<!-- doc/src/sgml/pgsurgery.sgml -->

<sect1 id="pgsurgery" xreflabel="pg_surgery">
<!-- pgdoc-cn_start sig_en=72211ac519eb4144fb70ecc763ddcedb sig_cn_org=None source=14.1 
 <title>pg_surgery</title>
________________________________________________________-->
 <title>pg_surgery</title>
<!-- pgdoc-cn_end sig_en=72211ac519eb4144fb70ecc763ddcedb -->

<!-- pgdoc-cn_start sig_en=2899432944facf08ea86bedad9f600ac sig_cn_org=None source=14.1 
 <indexterm zone="pgsurgery">
  <primary>pg_surgery</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="pgsurgery">
  <primary>pg_surgery</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=2899432944facf08ea86bedad9f600ac -->

<!-- pgdoc-cn_start sig_en=835e2216baf80ca370cb0e5e8b6b9f1f sig_cn_org=None source=14.1 
 <para>
  The <filename>pg_surgery</filename> module provides various functions to
  perform surgery on a damaged relation. These functions are unsafe by design
  and using them may corrupt (or further corrupt) your database. For example,
  these functions can easily be used to make a table inconsistent with its
  own indexes, to cause <literal>UNIQUE</literal> or
  <literal>FOREIGN KEY</literal> constraint violations, or even to make
  tuples visible which, when read, will cause a database server crash.
  They should be used with great caution and only as a last resort.
 </para>
________________________________________________________-->
 <para>
   <filename>pg_surgery</filename>模块提供了各种函数来对损坏的表进行修复。 这些函数在设计上是不安全的，使用它们可能会损坏（或进一步损坏）您的数据库。 例如，这些函数可以很容易地用于使表与其自己的索引不一致，导致 <literal>UNIQUE</literal> 或 <literal>FOREIGN KEY</literal> 约束违规，甚至使读取时将导致数据库服务器崩溃的元组可见。 应非常谨慎地使用它们，并且仅作为最后的手段。
 </para>
<!-- pgdoc-cn_end sig_en=835e2216baf80ca370cb0e5e8b6b9f1f -->

 <sect2>
<!-- pgdoc-cn_start sig_en=a75e46b58752dd4a3c18092d0816bc01 sig_cn_org=None source=14.1 
  <title>Functions</title>
________________________________________________________-->
  <title>函数</title>
<!-- pgdoc-cn_end sig_en=a75e46b58752dd4a3c18092d0816bc01 -->

  <variablelist>
   <varlistentry>
    <term>
     <function>heap_force_kill(regclass, tid[]) returns void</function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=7ff96668d0f375cabf360731beb30527 sig_cn_org=5e025c9d35d7ca4baff347a3b2db8c20 source=15.7 
     <para>
      <function>heap_force_kill</function> marks <quote>used</quote> line
      pointers as <quote>dead</quote> without examining the tuples. The
      intended use of this function is to forcibly remove tuples that are not
      otherwise accessible. For example:
<programlisting>
test=&gt; select * from t1 where ctid = '(0, 1)';
ERROR:  could not access status of transaction 4007513275
DETAIL:  Could not open file "pg_xact/0EED": No such file or directory.

test=# select heap_force_kill('t1'::regclass, ARRAY['(0, 1)']::tid[]);
 heap_force_kill
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-

(1 row)

test=# select * from t1 where ctid = '(0, 1)';
(0 rows)

</programlisting>
    </para>
________________________________________________________-->
     <para>
      <function>heap_force_kill</function>标记<quote>已使用</quote>的行指针为<quote>无效</quote>，而不检查元组。
      此函数的预期用途是强制删除其他方式无法访问的元组。例如：
<programlisting>
test=&gt; select * from t1 where ctid = '(0, 1)';
ERROR:  could not access status of transaction 4007513275
DETAIL:  Could not open file "pg_xact/0EED": No such file or directory.

test=# select heap_force_kill('t1'::regclass, ARRAY['(0, 1)']::tid[]);
 heap_force_kill
-----------------

(1 row)

test=# select * from t1 where ctid = '(0, 1)';
(0 rows)

</programlisting>
    </para>
<!-- pgdoc-cn_end sig_en=7ff96668d0f375cabf360731beb30527 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>heap_force_freeze(regclass, tid[]) returns void</function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=046ec9d247a4c579d5ccd0f248f00424 sig_cn_org=c23e1954ef7e72fb1207d67a73a9ff0a source=15.7 
     <para>
      <function>heap_force_freeze</function> marks tuples as frozen without
      examining the tuple data. The intended use of this function is to
      make accessible tuples which are inaccessible due to corrupted
      visibility information, or which prevent the table from being
      successfully vacuumed due to corrupted visibility information.
      For example:
<programlisting>
test=&gt; vacuum t1;
ERROR:  found xmin 507 from before relfrozenxid 515
CONTEXT:  while scanning block 0 of relation "public.t1"

test=# select ctid from t1 where xmin = 507;
 ctid
-&minus;-&minus;-&minus;-
 (0,3)
(1 row)

test=# select heap_force_freeze('t1'::regclass, ARRAY['(0, 3)']::tid[]);
 heap_force_freeze
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-

(1 row)

test=# select ctid from t1 where xmin = 2;
 ctid
-&minus;-&minus;-&minus;-
 (0,3)
(1 row)

</programlisting>
    </para>
________________________________________________________-->
     <para>
      <function>heap_force_freeze</function>标记元组为冻结状态，而不检查元组数据。该函数的预期用途是使无法访问的元组变得可访问，因为可见性信息损坏，或者由于可见性信息损坏而阻止表成功进行清理。例如：
<programlisting>
test=&gt; vacuum t1;
ERROR:  found xmin 507 from before relfrozenxid 515
CONTEXT:  while scanning block 0 of relation "public.t1"

test=# select ctid from t1 where xmin = 507;
 ctid
-------
 (0,3)
(1 row)

test=# select heap_force_freeze('t1'::regclass, ARRAY['(0, 3)']::tid[]);
 heap_force_freeze
-------------------

(1 row)

test=# select ctid from t1 where xmin = 2;
 ctid
-------
 (0,3)
(1 row)

</programlisting>
    </para>
<!-- pgdoc-cn_end sig_en=046ec9d247a4c579d5ccd0f248f00424 -->
   </listitem>
  </varlistentry>

  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=c9d18a21a6b8c7d5325e8feeb56b7420 sig_cn_org=None source=14.1 
  <title>Authors</title>
________________________________________________________-->
  <title>作者</title>
<!-- pgdoc-cn_end sig_en=c9d18a21a6b8c7d5325e8feeb56b7420 -->

<!-- pgdoc-cn_start sig_en=5f907061a8be4840206e2f341c7434b8 sig_cn_org=None source=14.1 
  <para>
   Ashutosh Sharma <email>ashu.coek88@gmail.com</email>
  </para>
________________________________________________________-->
  <para>
   Ashutosh Sharma <email>ashu.coek88@gmail.com</email>
  </para>
<!-- pgdoc-cn_end sig_en=5f907061a8be4840206e2f341c7434b8 -->
 </sect2>

</sect1>
