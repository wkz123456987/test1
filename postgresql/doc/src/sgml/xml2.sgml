<!-- doc/src/sgml/xml2.sgml -->

<sect1 id="xml2" xreflabel="xml2">
<!-- pgdoc-cn_start sig_en=a3b5888114f0dfbbee04e9a1a16d8f74 sig_cn_org=None source=14.1 
 <title>xml2</title>
________________________________________________________-->
 <title>xml2</title>
<!-- pgdoc-cn_end sig_en=a3b5888114f0dfbbee04e9a1a16d8f74 -->

<!-- pgdoc-cn_start sig_en=c660636670c367839c00041975f85f24 sig_cn_org=None source=14.1 
 <indexterm zone="xml2">
  <primary>xml2</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="xml2">
  <primary>xml2</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=c660636670c367839c00041975f85f24 -->

<!-- pgdoc-cn_start sig_en=627594cecbf18ca1a8575a5bb8bdf912 sig_cn_org=None source=14.1 
 <para>
  The <filename>xml2</filename> module provides XPath querying and
  XSLT functionality.
 </para>
________________________________________________________-->
 <para>
  <filename>xml2</filename>模块提供 XPath 查询和 XSLT 功能。
 </para>
<!-- pgdoc-cn_end sig_en=627594cecbf18ca1a8575a5bb8bdf912 -->

 <sect2>
<!-- pgdoc-cn_start sig_en=15a88a544f865cb369d993a8b5f5f6a9 sig_cn_org=None source=14.1 
  <title>Deprecation Notice</title>
________________________________________________________-->
  <title>废弃公告</title>
<!-- pgdoc-cn_end sig_en=15a88a544f865cb369d993a8b5f5f6a9 -->

<!-- pgdoc-cn_start sig_en=0011ed5ba2484f6b7f489f24e6f4982e sig_cn_org=None source=14.1 
  <para>
   From <productname>PostgreSQL</productname> 8.3 on, there is XML-related
   functionality based on the SQL/XML standard in the core server.
   That functionality covers XML syntax checking and XPath queries,
   which is what this module does, and more, but the API is
   not at all compatible.  It is planned that this module will be
   removed in a future version of PostgreSQL in favor of the newer standard API, so
   you are encouraged to try converting your applications.  If you
   find that some of the functionality of this module is not
   available in an adequate form with the newer API, please explain
   your issue to <email>pgsql-hackers@lists.postgresql.org</email> so that the deficiency
   can be addressed.
  </para>
________________________________________________________-->
  <para>
   从<productname>PostgreSQL</productname> 8.3 开始，在核心服务器中就已经有基于 SQL/XML 标准的 XML 相关功能。那些功能覆盖了 XML 语法检查和 XPath 查询，这些本模块也能做，但是其 API 并不是完全兼容。这个模块已经有计划将从 PostgreSQL 的一个未来版本中移除，因此我们鼓励你尝试转换你的应用。如果你发现这个模块的某些功能在更新的 API 中没有合适的形式相对应，请向<email>pgsql-hackers@lists.postgresql.org</email>表达你的问题，这样该缺点会被进行改进。
  </para>
<!-- pgdoc-cn_end sig_en=0011ed5ba2484f6b7f489f24e6f4982e -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=4e2c3834f0a11306a87b072432416c6a sig_cn_org=None source=14.1 
  <title>Description of Functions</title>
________________________________________________________-->
  <title>函数的描述</title>
<!-- pgdoc-cn_end sig_en=4e2c3834f0a11306a87b072432416c6a -->

<!-- pgdoc-cn_start sig_en=51aefbf0c67fafd8cbc01f3d44267520 sig_cn_org=None source=14.1 
  <para>
   <xref linkend="xml2-functions-table"/> shows the functions provided by this module.
   These functions provide straightforward XML parsing and XPath queries.
  </para>
________________________________________________________-->
  <para>
   <xref linkend="xml2-functions-table"/>展示了这个模块提供的函数。这些函数提供了直接的 XML 解析和 XPath 查询。
  </para>
<!-- pgdoc-cn_end sig_en=51aefbf0c67fafd8cbc01f3d44267520 -->

  <table id="xml2-functions-table">
<!-- pgdoc-cn_start sig_en=5b1af021f8edce9fb357d0fca18601f8 sig_cn_org=None source=14.1 
   <title><filename>xml2</filename> Functions</title>
________________________________________________________-->
   <title><filename>xml2</filename> 函数</title>
<!-- pgdoc-cn_end sig_en=5b1af021f8edce9fb357d0fca18601f8 -->
    <tgroup cols="1">
     <thead>
<!-- pgdoc-cn_start sig_en=4c899847d3051ef2b6955dda3de51c66 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Function
       </para>
       <para>
        Description
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        函数
       </para>
       <para>
        描述
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=4c899847d3051ef2b6955dda3de51c66 -->
     </thead>

     <tbody>
<!-- pgdoc-cn_start sig_en=72f2b5af92bc6293659deb03c070d899 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xml_valid</function> ( <parameter>document</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Parses the given document and returns true if the
        document is well-formed XML.  (Note: this is an alias for the standard
        PostgreSQL function <function>xml_is_well_formed()</function>.  The
        name <function>xml_valid()</function> is technically incorrect since validity
        and well-formedness have different meanings in XML.)
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xml_valid</function> ( <parameter>document</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        解析给定的文档，如果文档是格式良好的 XML，则返回 true。（注意，这是标准PostgreSQL函数<function>xml_is_well_formed()</function>的别名。
        名称<function>xml_valid()</function>在技术上是不正确的，因为在 XML 中有效性和结构良好性具有不同的含义。）
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=72f2b5af92bc6293659deb03c070d899 -->

<!-- pgdoc-cn_start sig_en=5a0c1acd59696dd9251a0fa25f6c6ce2 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_string</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Evaluates the XPath query on the supplied document, and
        casts the result to <type>text</type>.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_string</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        在提供的文档上评估 XPath 查询，并将结果转换为<type>text</type>。
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=5a0c1acd59696dd9251a0fa25f6c6ce2 -->

<!-- pgdoc-cn_start sig_en=f38964fcc384dd48e59687913f4f7c31 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_number</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>real</returnvalue>
       </para>
       <para>
        Evaluates the XPath query on the supplied document, and
        casts the result to <type>real</type>.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_number</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>real</returnvalue>
       </para>
       <para>
        在提供的文档上评估 XPath 查询，并将结果转换为<type>real</type>。
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=f38964fcc384dd48e59687913f4f7c31 -->

<!-- pgdoc-cn_start sig_en=2392568978e69e16e9df41579076f13b sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_bool</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Evaluates the XPath query on the supplied document, and
        casts the result to <type>boolean</type>.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_bool</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        在提供的文档上评估 XPath 查询，并将结果转换为<type>boolean</type>。
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=2392568978e69e16e9df41579076f13b -->

<!-- pgdoc-cn_start sig_en=d67e12b5f64d48b98315c1e6809de6ff sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_nodeset</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type>, <parameter>toptag</parameter> <type>text</type>, <parameter>itemtag</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Evaluates the query on the document and wraps the result in XML
        tags. If the result is multivalued, the output will look like:
<synopsis>
&lt;toptag&gt;
&lt;itemtag&gt;Value 1 which could be an XML fragment&lt;/itemtag&gt;
&lt;itemtag&gt;Value 2....&lt;/itemtag&gt;
&lt;/toptag&gt;
</synopsis>
        If either <parameter>toptag</parameter>
        or <parameter>itemtag</parameter> is an empty string, the relevant tag
        is omitted.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_nodeset</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type>, <parameter>toptag</parameter> <type>text</type>, <parameter>itemtag</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        这个函数在文档上计算查询并且把结果包装在 XML 标签中。如果结果是多值的，输出看起来是这样：
<synopsis>
&lt;toptag&gt;
&lt;itemtag&gt;Value 1 which could be an XML fragment&lt;/itemtag&gt;
&lt;itemtag&gt;Value 2....&lt;/itemtag&gt;
&lt;/toptag&gt;
</synopsis>
        如果<parameter>toptag</parameter>或者<parameter>itemtag</parameter>是一个空字符串，相关的标签会被忽略。
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=d67e12b5f64d48b98315c1e6809de6ff -->

<!-- pgdoc-cn_start sig_en=d5029ad069fd16077f50a38265128922 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_nodeset</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type>, <parameter>itemtag</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Like <function>xpath_nodeset(document, query, toptag, itemtag)</function> but result omits <parameter>toptag</parameter>.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_nodeset</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type>, <parameter>itemtag</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        类似于<function>xpath_nodeset(document, query, toptag, itemtag)</function>但结果省略了<parameter>toptag</parameter>。
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=d5029ad069fd16077f50a38265128922 -->

<!-- pgdoc-cn_start sig_en=b27f78a5b37162df90428e314aa863d4 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_nodeset</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Like <function>xpath_nodeset(document, query, toptag, itemtag)</function> but result omits both tags.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_nodeset</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        与<function>xpath_nodeset(document, query, toptag, itemtag)</function>相似但是结果忽略两种标签。
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=b27f78a5b37162df90428e314aa863d4 -->

<!-- pgdoc-cn_start sig_en=49bb29c93e0de483e6750f8d189cc4d2 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_list</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type>, <parameter>separator</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Evaluates the query on the document and returns multiple values
        separated by the specified separator, for example <literal>Value
        1,Value 2,Value 3</literal> if <parameter>separator</parameter>
        is <literal>,</literal>.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_list</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type>, <parameter>separator</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        评估文档上的查询并返回由指定分隔符分隔的多个值，例如<literal>Value 1,Value 2,Value 3</literal>，如果<parameter>separator</parameter>
        是<literal>,</literal>.
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=49bb29c93e0de483e6750f8d189cc4d2 -->

<!-- pgdoc-cn_start sig_en=a574c666c2aec101145321b2f46b22b5 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_list</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        This is a wrapper for the above function that uses <literal>,</literal>
        as the separator.
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>xpath_list</function> ( <parameter>document</parameter> <type>text</type>, <parameter>query</parameter> <type>text</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        这是上述函数的包装器，使用<literal>,</literal>作为分隔符。
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=a574c666c2aec101145321b2f46b22b5 -->
     </tbody>
    </tgroup>
  </table>
 </sect2>

 <sect2>
  <title><literal>xpath_table</literal></title>

<!-- pgdoc-cn_start sig_en=a6ba35ae20687be1bf75bfd7823f058a sig_cn_org=None source=14.1 
  <indexterm>
   <primary>xpath_table</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>xpath_table</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=a6ba35ae20687be1bf75bfd7823f058a -->

<!-- pgdoc-cn_start sig_en=0a68db06311dd8b46603744a333148c1 sig_cn_org=None source=14.1 
<synopsis>
xpath_table(text key, text document, text relation, text xpaths, text criteria) returns setof record
</synopsis>
________________________________________________________-->
<synopsis>
xpath_table(text key, text document, text relation, text xpaths, text criteria) returns setof record
</synopsis>
<!-- pgdoc-cn_end sig_en=0a68db06311dd8b46603744a333148c1 -->

<!-- pgdoc-cn_start sig_en=b7edbfebe6fd30b3173e0a997b515542 sig_cn_org=None source=14.1 
  <para>
   <function>xpath_table</function> is a table function that evaluates a set of XPath
   queries on each of a set of documents and returns the results as a
   table. The primary key field from the original document table is returned
   as the first column of the result so that the result set
   can readily be used in joins.  The parameters are described in
   <xref linkend="xml2-xpath-table-parameters"/>.
  </para>
________________________________________________________-->
  <para>
   <function>xpath_table</function>是一个表函数，它在一组文档中的每一个上计算一组 XPath 查询，并且将结果作为一个表返回。来自原始文档表的主键域被返回为结果的第一列，这样结果集可以被用于连接。其参数在<xref linkend="xml2-xpath-table-parameters"/>中描述。
  </para>
<!-- pgdoc-cn_end sig_en=b7edbfebe6fd30b3173e0a997b515542 -->

  <table id="xml2-xpath-table-parameters">
<!-- pgdoc-cn_start sig_en=f2a409f1a0cf5a079c3f175f97db5d43 sig_cn_org=None source=14.1 
   <title><function>xpath_table</function> Parameters</title>
________________________________________________________-->
   <title><function>xpath_table</function> 参数</title>
<!-- pgdoc-cn_end sig_en=f2a409f1a0cf5a079c3f175f97db5d43 -->
   <tgroup cols="2">
     <colspec colname="col1" colwidth="1*"/>
     <colspec colname="col2" colwidth="2*"/>
     <thead>
<!-- pgdoc-cn_start sig_en=bc09248c9539e705de31a7cc98c59698 sig_cn_org=None source=14.1 
     <row>
      <entry>Parameter</entry>
      <entry>Description</entry>
     </row>
________________________________________________________-->
     <row>
      <entry>参数</entry>
      <entry>描述</entry>
     </row>
<!-- pgdoc-cn_end sig_en=bc09248c9539e705de31a7cc98c59698 -->
    </thead>
    <tbody>
<!-- pgdoc-cn_start sig_en=6124f6279213b4731f71f84c94738484 sig_cn_org=None source=14.1 
     <row>
      <entry><parameter>key</parameter></entry>
      <entry>
       <para>
        the name of the <quote>key</quote> field &mdash; this is just a field to be used as
        the first column of the output table, i.e., it identifies the record from
        which each output row came (see note below about multiple values)
       </para>
      </entry>
     </row>
________________________________________________________-->
     <row>
      <entry><parameter>key</parameter></entry>
      <entry>
       <para>
        <quote>key</quote>域的名称 &mdash; 这只是被用作输出表中第一列的域，即它标识每一个输出行是来自于哪个记录（见下面有关多个值的注解）
       </para>
      </entry>
     </row>
<!-- pgdoc-cn_end sig_en=6124f6279213b4731f71f84c94738484 -->
<!-- pgdoc-cn_start sig_en=7c2522a388f101aec4b5fd3f8b92fedf sig_cn_org=None source=14.1 
     <row>
      <entry><parameter>document</parameter></entry>
      <entry>
       <para>
        the name of the field containing the XML document
       </para>
      </entry>
     </row>
________________________________________________________-->
     <row>
      <entry><parameter>document</parameter></entry>
      <entry>
       <para>
        包含 XML 文档的域的名称
       </para>
      </entry>
     </row>
<!-- pgdoc-cn_end sig_en=7c2522a388f101aec4b5fd3f8b92fedf -->
<!-- pgdoc-cn_start sig_en=850df1e545f75a2896ab902598d83cca sig_cn_org=None source=14.1 
     <row>
      <entry><parameter>relation</parameter></entry>
      <entry>
       <para>
        the name of the table or view containing the documents
       </para>
      </entry>
     </row>
________________________________________________________-->
     <row>
      <entry><parameter>relation</parameter></entry>
      <entry>
       <para>
        包含文档的表或视图的名称
       </para>
      </entry>
     </row>
<!-- pgdoc-cn_end sig_en=850df1e545f75a2896ab902598d83cca -->
<!-- pgdoc-cn_start sig_en=d81f11ad83bdbee8eca478d581dad087 sig_cn_org=None source=14.1 
     <row>
      <entry><parameter>xpaths</parameter></entry>
      <entry>
       <para>
        one or more XPath expressions, separated by <literal>|</literal>
       </para>
      </entry>
     </row>
________________________________________________________-->
     <row>
      <entry><parameter>xpaths</parameter></entry>
      <entry>
       <para>
        一个或多个 XPath 表达式，用<literal>|</literal>分隔
       </para>
      </entry>
     </row>
<!-- pgdoc-cn_end sig_en=d81f11ad83bdbee8eca478d581dad087 -->
<!-- pgdoc-cn_start sig_en=5891b8d6bb4126a5e2913b08a626a9d0 sig_cn_org=None source=14.1 
     <row>
      <entry><parameter>criteria</parameter></entry>
      <entry>
       <para>
        the contents of the WHERE clause. This cannot be omitted, so use
        <literal>true</literal> or <literal>1=1</literal> if you want to
        process all the rows in the relation
       </para>
      </entry>
     </row>
________________________________________________________-->
     <row>
      <entry><parameter>criteria</parameter></entry>
      <entry>
       <para>
        WHERE 子句的内容。这不能被忽略，因此如果你想要处理关系中的所有行，可以使用<literal>true</literal>或<literal>1=1</literal>
       </para>
      </entry>
     </row>
<!-- pgdoc-cn_end sig_en=5891b8d6bb4126a5e2913b08a626a9d0 -->
    </tbody>
   </tgroup>
  </table>

<!-- pgdoc-cn_start sig_en=73677d29da816e71beeca56df964214f sig_cn_org=None source=14.1 
  <para>
   These parameters (except the XPath strings) are just substituted
   into a plain SQL SELECT statement, so you have some flexibility &mdash; the
   statement is
  </para>
________________________________________________________-->
  <para>
   这些参数（除了 XPath 字符串）只是会被替换到一个纯粹的 SQL SELECT 语句中，因此你有一些灵活性 &mdash; 该语句是
  </para>
<!-- pgdoc-cn_end sig_en=73677d29da816e71beeca56df964214f -->

  <para>
   <literal>
    SELECT &lt;key&gt;, &lt;document&gt; FROM &lt;relation&gt; WHERE &lt;criteria&gt;
   </literal>
  </para>

<!-- pgdoc-cn_start sig_en=f599ffbb6bcfaa17b0e0257d6d826f39 sig_cn_org=None source=14.1 
  <para>
   so those parameters can be <emphasis>anything</emphasis> valid in those particular
   locations. The result from this SELECT needs to return exactly two
   columns (which it will unless you try to list multiple fields for key
   or document). Beware that this simplistic approach requires that you
   validate any user-supplied values to avoid SQL injection attacks.
  </para>
________________________________________________________-->
  <para>
   因此那些参数可以是那些特定位置上合法的<emphasis>任何东西</emphasis>。来自于这个 SELECT 的结果需要返回正好两列（它确实会这样，除非你尝试为键或文档列出多个域）。注意这种简单方法要求你验证任何用户提供的值来避免 SQL 注入攻击。
  </para>
<!-- pgdoc-cn_end sig_en=f599ffbb6bcfaa17b0e0257d6d826f39 -->

<!-- pgdoc-cn_start sig_en=83bd9a92f695b735dd59ae3f9182beb8 sig_cn_org=None source=14.1 
  <para>
   The function has to be used in a <literal>FROM</literal> expression, with an
   <literal>AS</literal> clause to specify the output columns; for example
<programlisting>
SELECT * FROM
xpath_table('article_id',
            'article_xml',
            'articles',
            '/article/author|/article/pages|/article/title',
            'date_entered > ''2003-01-01'' ')
AS t(article_id integer, author text, page_count integer, title text);
</programlisting>
   The <literal>AS</literal> clause defines the names and types of the columns in the
   output table.  The first is the <quote>key</quote> field and the rest correspond
   to the XPath queries.
   If there are more XPath queries than result columns,
   the extra queries will be ignored. If there are more result columns
   than XPath queries, the extra columns will be NULL.
  </para>
________________________________________________________-->
  <para>
   该函数必须被使用在一个<literal>FROM</literal>表达式中，并带有一个<literal>AS</literal>子句来指定输出列，例如
<programlisting>
SELECT * FROM
xpath_table('article_id',
            'article_xml',
            'articles',
            '/article/author|/article/pages|/article/title',
            'date_entered > ''2003-01-01'' ')
AS t(article_id integer, author text, page_count integer, title text);
</programlisting>
   <literal>AS</literal>子句定义了输出表中列的名称和类型。第一个是<quote>key</quote>域并且剩下的对应于 XPath 查询。如果 XPath 查询比结果列多，额外的查询将被忽略。如果结果列比 XPath 查询多，额外的列将是 NULL。
  </para>
<!-- pgdoc-cn_end sig_en=83bd9a92f695b735dd59ae3f9182beb8 -->

<!-- pgdoc-cn_start sig_en=39c40e21b27aeb10eae5eb8ff3780453 sig_cn_org=None source=14.1 
  <para>
   Notice that this example defines the <structname>page_count</structname> result
   column as an integer.  The function deals internally with string
   representations, so when you say you want an integer in the output, it will
   take the string representation of the XPath result and use PostgreSQL input
   functions to transform it into an integer (or whatever type the <type>AS</type>
   clause requests). An error will result if it can't do this &mdash; for
   example if the result is empty &mdash; so you may wish to just stick to
   <type>text</type> as the column type if you think your data has any problems.
  </para>
________________________________________________________-->
  <para>
   注意这个例子定义<structname>page_count</structname>结果列为一个整数。该函数在内部处理字符串表达，因此当你在输出中想要一个整数时，它将采用 XPath 结果的字符串表达并且使用 PostgreSQL 输入函数来把它转换成一个整数（或者<type>AS</type>子句要求的任何类型）。如果它无法做到这一点将会导致一个错误 &mdash; 例如结果是空 &mdash; 因此如果你认为你的数据有任何问题，你可能希望坚持用<type>text</type>作为列类型。
  </para>
<!-- pgdoc-cn_end sig_en=39c40e21b27aeb10eae5eb8ff3780453 -->

<!-- pgdoc-cn_start sig_en=eba3a42c3e43a12dd7b3feaf20548d66 sig_cn_org=10ee2c2d6c3fb21221a9000f2cb1df56 source=15.7 
  <para>
   The calling <command>SELECT</command> statement doesn't necessarily have to be
   just <literal>SELECT *</literal> &mdash; it can reference the output
   columns by name or join them to other tables. The function produces a
   virtual table with which you can perform any operation you wish (e.g.,
   aggregation, joining, sorting etc.). So we could also have:
<programlisting>
SELECT t.title, p.fullname, p.email
FROM xpath_table('article_id', 'article_xml', 'articles',
                 '/article/title|/article/author/@id',
                 'xpath_string(article_xml,''/article/@date'') > ''2003-03-20'' ')
       AS t(article_id integer, title text, author_id integer),
     tblPeopleInfo AS p
WHERE t.author_id = p.person_id;
</programlisting>
   as a more complicated example. Of course, you could wrap all
   of this in a view for convenience.
  </para>
________________________________________________________-->
  <para>
   调用<command>SELECT</command>语句不一定只能是<literal>SELECT *</literal> &mdash; 它可以通过名称引用输出列或将它们连接到其他表。
   该函数生成一个虚拟表，您可以对其执行任何操作（例如，聚合、连接、排序等）。因此，我们也可以有：
<programlisting>
SELECT t.title, p.fullname, p.email
FROM xpath_table('article_id', 'article_xml', 'articles',
                 '/article/title|/article/author/@id',
                 'xpath_string(article_xml,''/article/@date'') > ''2003-03-20'' ')
       AS t(article_id integer, title text, author_id integer),
     tblPeopleInfo AS p
WHERE t.author_id = p.person_id;
</programlisting>
   作为一个更复杂的示例。当然，为方便使用，您可以将所有这些内容都包装在一个视图中。
</para>
<!-- pgdoc-cn_end sig_en=eba3a42c3e43a12dd7b3feaf20548d66 -->

  <sect3>
<!-- pgdoc-cn_start sig_en=e22211a77f75aac8a74a8d33e4199447 sig_cn_org=None source=14.1 
   <title>Multivalued Results</title>
________________________________________________________-->
   <title>多值结果</title>
<!-- pgdoc-cn_end sig_en=e22211a77f75aac8a74a8d33e4199447 -->

<!-- pgdoc-cn_start sig_en=88102ea14481c34303d6d905c35a36a7 sig_cn_org=None source=14.1 
   <para>
    The <function>xpath_table</function> function assumes that the results of each XPath query
    might be multivalued, so the number of rows returned by the function
    may not be the same as the number of input documents. The first row
    returned contains the first result from each query, the second row the
    second result from each query. If one of the queries has fewer values
    than the others, null values will be returned instead.
   </para>
________________________________________________________-->
   <para>
    <function>xpath_table</function>函数假定每一个 XPath 查询的结果可能是多值的，因此该函数返回的行数可能与输入文档的数目不同。被返回的第一行包含来自每一个查询的第一个结果，第二行则是来自每一个查询的第二个结果。如果其中一个查询的值比其他查询少，则会为它返回空值。
   </para>
<!-- pgdoc-cn_end sig_en=88102ea14481c34303d6d905c35a36a7 -->

<!-- pgdoc-cn_start sig_en=761a436eb860e7454acf5f55c9ed34f3 sig_cn_org=None source=14.1 
   <para>
    In some cases, a user will know that a given XPath query will return
    only a single result (perhaps a unique document identifier) &mdash; if used
    alongside an XPath query returning multiple results, the single-valued
    result will appear only on the first row of the result. The solution
    to this is to use the key field as part of a join against a simpler
    XPath query. As an example:

<programlisting>
CREATE TABLE test (
    id int PRIMARY KEY,
    xml text
);

INSERT INTO test VALUES (1, '&lt;doc num="C1"&gt;
&lt;line num="L1"&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/line&gt;
&lt;line num="L2"&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/line&gt;
&lt;/doc&gt;');

INSERT INTO test VALUES (2, '&lt;doc num="C2"&gt;
&lt;line num="L1"&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/line&gt;
&lt;line num="L2"&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/line&gt;
&lt;/doc&gt;');

SELECT * FROM
  xpath_table('id','xml','test',
              '/doc/@num|/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',
              'true')
  AS t(id int, doc_num varchar(10), line_num varchar(10), val1 int, val2 int, val3 int)
WHERE id = 1 ORDER BY doc_num, line_num

 id | doc_num | line_num | val1 | val2 | val3
-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;
  1 | C1      | L1       |    1 |    2 |    3
  1 |         | L2       |   11 |   22 |   33
</programlisting>
   </para>
________________________________________________________-->
   <para>
    在某些情况下，一个用户将知道一个给定的 XPath 查询将只返回一个单一结果（可能是一个唯一文档标识符） &mdash; 如果和一个返回多值的 XPath 查询一起使用，单值结果将只出现在结果的第一行中。对于这种情况的解决方案是使用键域作为针对一个更简单 XPath 查询的连接的一部分。一个例子：

<programlisting>
CREATE TABLE test (
    id int PRIMARY KEY,
    xml text
);

INSERT INTO test VALUES (1, '&lt;doc num="C1"&gt;
&lt;line num="L1"&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/line&gt;
&lt;line num="L2"&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/line&gt;
&lt;/doc&gt;');

INSERT INTO test VALUES (2, '&lt;doc num="C2"&gt;
&lt;line num="L1"&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/line&gt;
&lt;line num="L2"&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/line&gt;
&lt;/doc&gt;');

SELECT * FROM
  xpath_table('id','xml','test',
              '/doc/@num|/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',
              'true')
  AS t(id int, doc_num varchar(10), line_num varchar(10), val1 int, val2 int, val3 int)
WHERE id = 1 ORDER BY doc_num, line_num

 id | doc_num | line_num | val1 | val2 | val3
----+---------+----------+------+------+------
  1 | C1      | L1       |    1 |    2 |    3
  1 |         | L2       |   11 |   22 |   33
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=761a436eb860e7454acf5f55c9ed34f3 -->

<!-- pgdoc-cn_start sig_en=c691b5029da9aa792167f58a8d8640ca sig_cn_org=None source=14.1 
   <para>
    To get <literal>doc_num</literal> on every line, the solution is to use two invocations
    of <function>xpath_table</function> and join the results:

<programlisting>
SELECT t.*,i.doc_num FROM
  xpath_table('id', 'xml', 'test',
              '/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',
              'true')
    AS t(id int, line_num varchar(10), val1 int, val2 int, val3 int),
  xpath_table('id', 'xml', 'test', '/doc/@num', 'true')
    AS i(id int, doc_num varchar(10))
WHERE i.id=t.id AND i.id=1
ORDER BY doc_num, line_num;

 id | line_num | val1 | val2 | val3 | doc_num
-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-
  1 | L1       |    1 |    2 |    3 | C1
  1 | L2       |   11 |   22 |   33 | C1
(2 rows)
</programlisting>
   </para>
________________________________________________________-->
   <para>
    要在每一行上得到<literal>doc_num</literal>，解决方案是使用<function>xpath_table</function>的两个调用并且连接结果：

<programlisting>
SELECT t.*,i.doc_num FROM
  xpath_table('id', 'xml', 'test',
              '/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',
              'true')
    AS t(id int, line_num varchar(10), val1 int, val2 int, val3 int),
  xpath_table('id', 'xml', 'test', '/doc/@num', 'true')
    AS i(id int, doc_num varchar(10))
WHERE i.id=t.id AND i.id=1
ORDER BY doc_num, line_num;

 id | line_num | val1 | val2 | val3 | doc_num
----+----------+------+------+------+---------
  1 | L1       |    1 |    2 |    3 | C1
  1 | L2       |   11 |   22 |   33 | C1
(2 rows)
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=c691b5029da9aa792167f58a8d8640ca -->
  </sect3>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=07e25c59fce324744aaca867dd413c3a sig_cn_org=None source=14.1 
  <title>XSLT Functions</title>
________________________________________________________-->
  <title>XSLT 函数</title>
<!-- pgdoc-cn_end sig_en=07e25c59fce324744aaca867dd413c3a -->

<!-- pgdoc-cn_start sig_en=4097e811ada4a4591ddc25f5eccf2547 sig_cn_org=None source=14.1 
  <para>
   The following functions are available if libxslt is installed:
  </para>
________________________________________________________-->
  <para>
   如果安装了 libxslt，那么可以使用下列函数：
  </para>
<!-- pgdoc-cn_end sig_en=4097e811ada4a4591ddc25f5eccf2547 -->

  <sect3>
   <title><literal>xslt_process</literal></title>

<!-- pgdoc-cn_start sig_en=55de436cb46689338646a96eda195836 sig_cn_org=None source=14.1 
  <indexterm>
   <primary>xslt_process</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>xslt_process</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=55de436cb46689338646a96eda195836 -->

<!-- pgdoc-cn_start sig_en=2a71e95aeefb94af75e807dbce2b18cd sig_cn_org=None source=14.1 
<synopsis>
xslt_process(text document, text stylesheet, text paramlist) returns text
</synopsis>
________________________________________________________-->
<synopsis>
xslt_process(text document, text stylesheet, text paramlist) returns text
</synopsis>
<!-- pgdoc-cn_end sig_en=2a71e95aeefb94af75e807dbce2b18cd -->

<!-- pgdoc-cn_start sig_en=e051df404ff02136f054cd090b24ca39 sig_cn_org=None source=14.1 
   <para>
    This function applies the XSL stylesheet to the document and returns
    the transformed result. The <literal>paramlist</literal> is a list of parameter
    assignments to be used in the transformation, specified in the form
    <literal>a=1,b=2</literal>. Note that the
    parameter parsing is very simple-minded: parameter values cannot
    contain commas!
   </para>
________________________________________________________-->
   <para>
    这个函数将 XSL 样式表应用于文档并且返回转换过的结果。<literal>paramlist</literal>是一个被用在转换中的参数赋值列表，以<literal>a=1,b=2</literal>的形式指定。注意参数解析是非常天真的：参数值不能包含逗号！
   </para>
<!-- pgdoc-cn_end sig_en=e051df404ff02136f054cd090b24ca39 -->

<!-- pgdoc-cn_start sig_en=2aca61be15d404d62488fae3ffe1a114 sig_cn_org=None source=14.1 
   <para>
    There is also a two-parameter version of <function>xslt_process</function> which
    does not pass any parameters to the transformation.
   </para>
________________________________________________________-->
   <para>
    还有一个双参数版本的<function>xslt_process</function>，它不会向转换传递任何参数。
   </para>
<!-- pgdoc-cn_end sig_en=2aca61be15d404d62488fae3ffe1a114 -->
  </sect3>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc sig_cn_org=None source=14.1 
  <title>Author</title>
________________________________________________________-->
  <title>作者</title>
<!-- pgdoc-cn_end sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc -->

<!-- pgdoc-cn_start sig_en=0ed712082d35cf9848cf59b8d70c9643 sig_cn_org=None source=14.1 
  <para>
   John Gray <email>jgray@azuli.co.uk</email>
  </para>
________________________________________________________-->
  <para>
   John Gray <email>jgray@azuli.co.uk</email>
  </para>
<!-- pgdoc-cn_end sig_en=0ed712082d35cf9848cf59b8d70c9643 -->

<!-- pgdoc-cn_start sig_en=59ab15af7d228ed7a5ec5f6bbc2fab70 sig_cn_org=None source=14.1 
  <para>
   Development of this module was sponsored by Torchbox Ltd. (www.torchbox.com).
   It has the same BSD license as PostgreSQL.
  </para>
________________________________________________________-->
  <para>
   这个模块的开发由 Torchbox Ltd. (www.torchbox.com) 赞助。它使用了和 PostgreSQL 相同的 BSD 许可证。
  </para>
<!-- pgdoc-cn_end sig_en=59ab15af7d228ed7a5ec5f6bbc2fab70 -->
 </sect2>

</sect1>
