<!-- doc/src/sgml/pageinspect.sgml -->

<sect1 id="pageinspect" xreflabel="pageinspect">
<!-- pgdoc-cn_start sig_en=bf33d1078e2e6d4d11a899f881e247e8 sig_cn_org=None source=14.1 
 <title>pageinspect</title>
________________________________________________________-->
 <title>pageinspect</title>
<!-- pgdoc-cn_end sig_en=bf33d1078e2e6d4d11a899f881e247e8 -->

<!-- pgdoc-cn_start sig_en=9c95563cb6f1e851f060331177a81f57 sig_cn_org=None source=14.1 
 <indexterm zone="pageinspect">
  <primary>pageinspect</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="pageinspect">
  <primary>pageinspect</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=9c95563cb6f1e851f060331177a81f57 -->

<!-- pgdoc-cn_start sig_en=aa236d441c32a69bdc3cfb12d6b5bbc9 sig_cn_org=None source=14.1 
 <para>
  The <filename>pageinspect</filename> module provides functions that allow you to
  inspect the contents of database pages at a low level, which is useful for
  debugging purposes.  All of these functions may be used only by superusers.
 </para>
________________________________________________________-->
 <para>
  <filename>pageinspect</filename>模块提供函数让你从低层次观察数据库页面的内容，这对于调试目的很有用。所有这些函数只能被超级用户使用。
 </para>
<!-- pgdoc-cn_end sig_en=aa236d441c32a69bdc3cfb12d6b5bbc9 -->

 <sect2>
<!-- pgdoc-cn_start sig_en=de61004da272d2b09557e1e261c98ae9 sig_cn_org=None source=14.1 
  <title>General Functions</title>
________________________________________________________-->
  <title>通用函数</title>
<!-- pgdoc-cn_end sig_en=de61004da272d2b09557e1e261c98ae9 -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=7e6e5d9b6110e16ad305ea86d017d420 sig_cn_org=None source=14.1 
    <term>
     <function>get_raw_page(relname text, fork text, blkno bigint) returns bytea</function>
     <indexterm>
      <primary>get_raw_page</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>get_raw_page(relname text, fork text, blkno bigint) 返回 bytea</function>
    <indexterm>
     <primary>get_raw_page</primary>
    </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=7e6e5d9b6110e16ad305ea86d017d420 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=8d34294c1326a103052883c00b7aa8c1 sig_cn_org=9cfd8a8a0e929dc776e7a2bb9617146a source=15.7 
     <para>
      <function>get_raw_page</function> reads the specified block of the named
      relation and returns a copy as a <type>bytea</type> value.  This allows a
      single time-consistent copy of the block to be obtained.
      <replaceable>fork</replaceable> should be <literal>'main'</literal> for
      the main data fork, <literal>'fsm'</literal> for the
      <link linkend="storage-fsm">free space map</link>,
      <literal>'vm'</literal> for the
      <link linkend="storage-vm">visibility map</link>, or
      <literal>'init'</literal> for the initialization fork.
     </para>
________________________________________________________-->
     <para>
      <function>get_raw_page</function>读取指定块的命名关系并将其作为<type>bytea</type>值返回。这允许获取块的单个时间一致副本。
      <replaceable>fork</replaceable>应为<literal>'main'</literal>表示主数据分支，<literal>'fsm'</literal>表示
      <link linkend="storage-fsm">自由空间图</link>，<literal>'vm'</literal>表示
      <link linkend="storage-vm">可见性图</link>，或<literal>'init'</literal>表示初始化分支。
     </para>
<!-- pgdoc-cn_end sig_en=8d34294c1326a103052883c00b7aa8c1 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>get_raw_page(relname text, blkno bigint) returns bytea</function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=6660a1cc8e38f5c39cd57f7ec7bcb19a sig_cn_org=None source=14.1 
     <para>
      A shorthand version of <function>get_raw_page</function>, for reading
      from the main fork.  Equivalent to
      <literal>get_raw_page(relname, 'main', blkno)</literal>
     </para>
________________________________________________________-->
     <para>
      一个简写版的<function>get_raw_page</function>，用于读取主分叉。等效于<literal>get_raw_page(relname, 'main', blkno)</literal>
     </para>
<!-- pgdoc-cn_end sig_en=6660a1cc8e38f5c39cd57f7ec7bcb19a -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=fb241d02f343f72fb3dcf3e35b45aed8 sig_cn_org=None source=14.1 
    <term>
     <function>page_header(page bytea) returns record</function>
     <indexterm>
      <primary>page_header</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>page_header(page bytea) 返回 record</function>
    <indexterm>
     <primary>page_header</primary>
    </indexterm>    
    </term>
<!-- pgdoc-cn_end sig_en=fb241d02f343f72fb3dcf3e35b45aed8 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=02c275e13b50ee811bf3b521f719db4c sig_cn_org=None source=14.1 
     <para>
      <function>page_header</function> shows fields that are common to all
      <productname>PostgreSQL</productname> heap and index pages.
     </para>
________________________________________________________-->
     <para>
      <function>page_header</function>显示所有<productname>PostgreSQL</productname>堆和索引页面的公共域。
     </para>
<!-- pgdoc-cn_end sig_en=02c275e13b50ee811bf3b521f719db4c -->

<!-- pgdoc-cn_start sig_en=490956635a75fe3d69a4d71b63fd490b sig_cn_org=None source=14.1 
     <para>
      A page image obtained with <function>get_raw_page</function> should be
      passed as argument.  For example:
<screen>
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-
 0/24A1B50 |        0 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0
</screen>
      The returned columns correspond to the fields in the
      <structname>PageHeaderData</structname> struct.
      See <filename>src/include/storage/bufpage.h</filename> for details.
     </para>
________________________________________________________-->
     <para>
      用<function>get_raw_page</function>获得的一个页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid
-----------+----------+--------+-------+-------+---------+----------+---------+-----------
 0/24A1B50 |        0 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0
</screen>
      返回的列对应于<structname>PageHeaderData</structname>结构中的域。详见<filename>src/include/storage/bufpage.h</filename>。
    </para>
<!-- pgdoc-cn_end sig_en=490956635a75fe3d69a4d71b63fd490b -->

<!-- pgdoc-cn_start sig_en=9b42bd96e08f0ba920e46b8c572c2d49 sig_cn_org=None source=14.1 
     <para>
      The <structfield>checksum</structfield> field is the checksum stored in
      the page, which might be incorrect if the page is somehow corrupted.  If
      data checksums are not enabled for this instance, then the value stored
      is meaningless.
     </para>
________________________________________________________-->
     <para>
      <structfield>checksum</structfield>域是存放在页面中的校验和，如果页面被损坏它可能是不正确的。如果对这个实例没有启用数据校验和，则存储的这个值没有意义。
     </para>
<!-- pgdoc-cn_end sig_en=9b42bd96e08f0ba920e46b8c572c2d49 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=883e8313b6742bba5cd75f998d39fb85 sig_cn_org=None source=14.1 
    <term>
     <function>page_checksum(page bytea, blkno bigint) returns smallint</function>
     <indexterm>
      <primary>page_checksum</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>page_checksum(page bytea, blkno bigint) returns smallint</function>
     <indexterm>
      <primary>page_checksum</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=883e8313b6742bba5cd75f998d39fb85 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=b21c11f0e0f27659e0c09c8a6bb79a90 sig_cn_org=None source=14.1 
     <para>
      <function>page_checksum</function> computes the checksum for the page, as if
      it was located at the given block.
     </para>
________________________________________________________-->
     <para>
      <function>page_checksum</function>为页面计算校验和，就像它被放置在给定块上一样。
     </para>
<!-- pgdoc-cn_end sig_en=b21c11f0e0f27659e0c09c8a6bb79a90 -->

<!-- pgdoc-cn_start sig_en=1a7fe5b65457f8849b4e412d619a1ae6 sig_cn_org=None source=14.1 
     <para>
      A page image obtained with <function>get_raw_page</function> should be
      passed as argument.  For example:
<screen>
test=# SELECT page_checksum(get_raw_page('pg_class', 0), 0);
 page_checksum
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
         13443
</screen>
      Note that the checksum depends on the block number, so matching block
      numbers should be passed (except when doing esoteric debugging).
     </para>
________________________________________________________-->
     <para>
      应该将<function>get_raw_page</function>得到的页面映像作为参数传入。例如：
<screen>
test=# SELECT page_checksum(get_raw_page('pg_class', 0), 0);
 page_checksum
---------------
         13443
</screen>
      注意校验和取决于块号，因此应该将匹配的块号传入（除非在做调试）。
     </para>
<!-- pgdoc-cn_end sig_en=1a7fe5b65457f8849b4e412d619a1ae6 -->

<!-- pgdoc-cn_start sig_en=17211a4eeee861c7819aa85716228dd5 sig_cn_org=None source=14.1 
     <para>
      The checksum computed with this function can be compared with
      the <structfield>checksum</structfield> result field of the
      function <function>page_header</function>.  If data checksums are
      enabled for this instance, then the two values should be equal.
     </para>
________________________________________________________-->
     <para>
      用这个函数计算的校验和可以拿来和函数<function>page_header</function>的结果域<structfield>checksum</structfield>进行比较。如果为这个实例启用了数据校验和，则两个值应该相等。
     </para>
<!-- pgdoc-cn_end sig_en=17211a4eeee861c7819aa85716228dd5 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=06af35bd0da3bb8134df422f59157859 sig_cn_org=None source=14.1 
    <term>
     <function>fsm_page_contents(page bytea) returns text</function>
     <indexterm>
      <primary>fsm_page_contents</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>fsm_page_contents(page bytea) returns text</function>
     <indexterm>
      <primary>fsm_page_contents</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=06af35bd0da3bb8134df422f59157859 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=131420fdc76df25d1f0d12b863c6c13c sig_cn_org=084bac5d98c7c90a5a1bba5247da79e8 source=15.7 
     <para>
      <function>fsm_page_contents</function> shows the internal node structure
      of an <acronym>FSM</acronym> page.  For example:
<screen>
test=# SELECT fsm_page_contents(get_raw_page('pg_class', 'fsm', 0));
</screen>
      The output is a multiline string, with one line per node in the binary
      tree within the page.  Only those nodes that are not zero are printed.
      The so-called "next" pointer, which points to the next slot to be
      returned from the page, is also printed.
     </para>
________________________________________________________-->
     <para>
      <function>fsm_page_contents</function>显示了<acronym>FSM</acronym>页面的内部节点结构。例如：
<screen>
test=# SELECT fsm_page_contents(get_raw_page('pg_class', 'fsm', 0));
</screen>
      输出是一个多行字符串，每行代表页面内二叉树中的一个节点。只打印那些不为零的节点。
      所谓的“next”指针，指向下一个要从页面返回的插槽，也会被打印。
</para>
<!-- pgdoc-cn_end sig_en=131420fdc76df25d1f0d12b863c6c13c -->
<!-- pgdoc-cn_start sig_en=b31fc87f360c55fa50feb0d95bccdf5f sig_cn_org=dcf1414b2e326f3bc83aaea01c100d01 source=15.7 
     <para>
      See <filename>src/backend/storage/freespace/README</filename> for more
      information on the structure of an <acronym>FSM</acronym> page.
     </para>
________________________________________________________-->
     <para>
      查看<filename>src/backend/storage/freespace/README</filename>了解<acronym>FSM</acronym>页面的结构。
     </para>
<!-- pgdoc-cn_end sig_en=b31fc87f360c55fa50feb0d95bccdf5f -->
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=482b866ef19d1773ea5c24510ddcf53f sig_cn_org=None source=14.1 
  <title>Heap Functions</title>
________________________________________________________-->
  <title>Heap Functions</title>
<!-- pgdoc-cn_end sig_en=482b866ef19d1773ea5c24510ddcf53f -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=cdd231c67819dfb6183644f7e4dca2cb sig_cn_org=None source=14.1 
    <term>
     <function>heap_page_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>heap_page_items</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>heap_page_items(page bytea) 返回 setof record</function>
    <indexterm>
     <primary>heap_page_items</primary>
    </indexterm>    
    </term>
<!-- pgdoc-cn_end sig_en=cdd231c67819dfb6183644f7e4dca2cb -->

    <listitem>
<!-- pgdoc-cn_start sig_en=25007748204d90995bd57398b69b0fbd sig_cn_org=None source=14.1 
     <para>
      <function>heap_page_items</function> shows all line pointers on a heap
      page.  For those line pointers that are in use, tuple headers as well
      as tuple raw data are also shown. All tuples are shown, whether or not
      the tuples were visible to an MVCC snapshot at the time the raw page
      was copied.
     </para>
________________________________________________________-->
     <para>
      <function>heap_page_items</function>显示一个堆页面上所有的行指针。
      对那些使用中的行指针，元组头部和元组原始数据也会被显示。
      不管元组对于拷贝原始页面时的 MVCC 快照是否可见，它们都会被显示。
     </para>
<!-- pgdoc-cn_end sig_en=25007748204d90995bd57398b69b0fbd -->
<!-- pgdoc-cn_start sig_en=0ca49274837778d17c2eb417bf799fb8 sig_cn_org=None source=14.1 
     <para>
      A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
<screen>
test=# SELECT * FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      See <filename>src/include/storage/itemid.h</filename> and
      <filename>src/include/access/htup_details.h</filename> for explanations of the fields
      returned.
     </para>
________________________________________________________-->
     <para>
      用<function>get_raw_page</function>获得的一个堆页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      返回的域的解释可见<filename>src/include/storage/itemid.h</filename>和<filename>src/include/access/htup_details.h</filename>。
     </para>
<!-- pgdoc-cn_end sig_en=0ca49274837778d17c2eb417bf799fb8 -->
<!-- pgdoc-cn_start sig_en=90b750ede71c56a0c79b94e127c78ce7 sig_cn_org=None source=14.1 
     <para>
      The <function>heap_tuple_infomask_flags</function> function can be
      used to unpack the flag bits of <structfield>t_infomask</structfield>
      and <structfield>t_infomask2</structfield> for heap tuples.
     </para>
________________________________________________________-->
     <para>
      <function>heap_tuple_infomask_flags</function>函数可用于为堆元组解包<structfield>t_infomask</structfield>
      和<structfield>t_infomask2</structfield>的标志位。
     </para>
<!-- pgdoc-cn_end sig_en=90b750ede71c56a0c79b94e127c78ce7 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=0d1d25c2686b543a7b11956c70bcc73e sig_cn_org=None source=14.1 
    <term>
     <function>tuple_data_split(rel_oid oid, t_data bytea, t_infomask integer, t_infomask2 integer, t_bits text [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>tuple_data_split</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>tuple_data_split(rel_oid oid, t_data bytea, t_infomask integer, t_infomask2 integer, t_bits text [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>tuple_data_split</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=0d1d25c2686b543a7b11956c70bcc73e -->
    <listitem>
<!-- pgdoc-cn_start sig_en=f752b621712c591f23f537345fbc5f4a sig_cn_org=None source=14.1 
     <para>
      <function>tuple_data_split</function> splits tuple data into attributes
      in the same way as backend internals.
<screen>
test=# SELECT tuple_data_split('pg_class'::regclass, t_data, t_infomask, t_infomask2, t_bits) FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      This function should be called with the same arguments as the return
      attributes of <function>heap_page_items</function>.
     </para>
________________________________________________________-->
     <para>
      <function>tuple_data_split</function>以后端内部的相同方式将元组数据拆解成属性。
<screen>
test=# SELECT tuple_data_split('pg_class'::regclass, t_data, t_infomask, t_infomask2, t_bits) FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      应该用与<function>heap_page_items</function>的返回属性相同的参数来调用这个函数。
     </para>
<!-- pgdoc-cn_end sig_en=f752b621712c591f23f537345fbc5f4a -->
<!-- pgdoc-cn_start sig_en=d59a0a9c484ffbb32ca2c2869af6b97c sig_cn_org=None source=14.1 
     <para>
      If <parameter>do_detoast</parameter> is <literal>true</literal>,
      attributes will be detoasted as needed. Default value is
      <literal>false</literal>.
     </para>
________________________________________________________-->
     <para>
      如果<parameter>do_detoast</parameter>是<literal>true</literal>，则根据需要将把属性解除TOAST。默认值为<literal>false</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=d59a0a9c484ffbb32ca2c2869af6b97c -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=b5bc457c93fac2563f70a6ba52626d3d sig_cn_org=None source=14.1 
    <term>
     <function>heap_page_item_attrs(page bytea, rel_oid regclass [, do_detoast bool]) returns setof record</function>
     <indexterm>
      <primary>heap_page_item_attrs</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>heap_page_item_attrs(page bytea, rel_oid regclass [, do_detoast bool]) returns setof record</function>
     <indexterm>
      <primary>heap_page_item_attrs</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=b5bc457c93fac2563f70a6ba52626d3d -->
    <listitem>
<!-- pgdoc-cn_start sig_en=0e2badc995b261467517c0531da30c9e sig_cn_org=None source=14.1 
     <para>
      <function>heap_page_item_attrs</function> is equivalent to
      <function>heap_page_items</function> except that it returns
      tuple raw data as an array of attributes that can optionally
      be detoasted by <parameter>do_detoast</parameter> which is
      <literal>false</literal> by default.
     </para>
________________________________________________________-->
     <para>
      <function>heap_page_item_attrs</function>等效于
      <function>heap_page_items</function>，不过它会把元组原始数据
      返回为属性的数组，如果<parameter>do_detoast</parameter>为真（
      默认为<literal>false</literal>），这些属性会被反 TOAST。
     </para>
<!-- pgdoc-cn_end sig_en=0e2badc995b261467517c0531da30c9e -->
<!-- pgdoc-cn_start sig_en=d7ec7ae920eba7cc1b1d19023e770d66 sig_cn_org=None source=14.1 
     <para>
      A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
<screen>
test=# SELECT * FROM heap_page_item_attrs(get_raw_page('pg_class', 0), 'pg_class'::regclass);
</screen>
     </para>
________________________________________________________-->
     <para>
      应该把用<function>get_raw_page</function>得到的一个堆页面映像
      作为参数传入。例如：
<screen>
test=# SELECT * FROM heap_page_item_attrs(get_raw_page('pg_class', 0), 'pg_class'::regclass);
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=d7ec7ae920eba7cc1b1d19023e770d66 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=e0f549a9614395e7de1a97386c42817e sig_cn_org=None source=14.1 
    <term>
     <function>heap_tuple_infomask_flags(t_infomask integer, t_infomask2 integer) returns record</function>
     <indexterm>
      <primary>heap_tuple_infomask_flags</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>heap_tuple_infomask_flags(t_infomask integer, t_infomask2 integer) returns record</function>
     <indexterm>
      <primary>heap_tuple_infomask_flags</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=e0f549a9614395e7de1a97386c42817e -->
    <listitem>
<!-- pgdoc-cn_start sig_en=86bade956b7961c668f6bae00113d258 sig_cn_org=None source=14.1 
     <para>
      <function>heap_tuple_infomask_flags</function> decodes the
      <structfield>t_infomask</structfield> and
      <structfield>t_infomask2</structfield> returned by
      <function>heap_page_items</function> into a human-readable
      set of arrays made of flag names, with one column for all
      the flags and one column for combined flags. For example:
<screen>
test=# SELECT t_ctid, raw_flags, combined_flags
         FROM heap_page_items(get_raw_page('pg_class', 0)),
           LATERAL heap_tuple_infomask_flags(t_infomask, t_infomask2)
         WHERE t_infomask IS NOT NULL OR t_infomask2 IS NOT NULL;
</screen>
      This function should be called with the same arguments as the return
      attributes of <function>heap_page_items</function>.
     </para>
________________________________________________________-->
     <para>
      <function>heap_tuple_infomask_flags</function>将<function>heap_page_items</function>返回的
      <structfield>t_infomask</structfield>和<structfield>t_infomask2</structfield>解码为一组由标志
      名称组成的人类可读数组， 一列用于所有标志，一列用于组合标志。 例如：
<screen>
test=# SELECT t_ctid, raw_flags, combined_flags
         FROM heap_page_items(get_raw_page('pg_class', 0)),
           LATERAL heap_tuple_infomask_flags(t_infomask, t_infomask2)
         WHERE t_infomask IS NOT NULL OR t_infomask2 IS NOT NULL;
</screen>
      应该使用与<function>heap_page_items</function>的返回属性相同的参数调用此函数。
     </para>
<!-- pgdoc-cn_end sig_en=86bade956b7961c668f6bae00113d258 -->
<!-- pgdoc-cn_start sig_en=e60a396a99c0474d559edda495e91aaf sig_cn_org=None source=14.1 
     <para>
      Combined flags are displayed for source-level macros that take into
      account the value of more than one raw bit, such as
      <literal>HEAP_XMIN_FROZEN</literal>.
     </para>
________________________________________________________-->
     <para>
      为考虑多个原始位值的源级宏显示组合标志，例如<literal>HEAP_XMIN_FROZEN</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=e60a396a99c0474d559edda495e91aaf -->
<!-- pgdoc-cn_start sig_en=044f54f1be8ee27561d30c14e11fd09b sig_cn_org=None source=14.1 
     <para>
      See <filename>src/include/access/htup_details.h</filename> for
      explanations of the flag names returned.
     </para>
________________________________________________________-->
     <para>
      有关返回的标志名称的说明，请参阅<filename>src/include/access/htup_details.h</filename>。
     </para>
<!-- pgdoc-cn_end sig_en=044f54f1be8ee27561d30c14e11fd09b -->
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=0e2467e04f71af2cba0789b8c206d724 sig_cn_org=None source=14.1 
  <title>B-Tree Functions</title>
________________________________________________________-->
  <title>B树函数</title>
<!-- pgdoc-cn_end sig_en=0e2467e04f71af2cba0789b8c206d724 -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=a7da0fc8b2558ff33c4e6c2af2887f7f sig_cn_org=None source=14.1 
    <term>
     <function>bt_metap(relname text) returns record</function>
     <indexterm>
      <primary>bt_metap</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>bt_metap(relname text) 返回 record</function>
    <indexterm>
     <primary>bt_metap</primary>
    </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=a7da0fc8b2558ff33c4e6c2af2887f7f -->

    <listitem>
<!-- pgdoc-cn_start sig_en=c47951ae7394c677b73e5c6576cb6a49 sig_cn_org=None source=14.1 
     <para>
      <function>bt_metap</function> returns information about a B-tree
      index's metapage.  For example:
<screen>
test=# SELECT * FROM bt_metap('pg_cast_oid_index');
-[ RECORD 1 ]-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-
magic                     | 340322
version                   | 4
root                      | 1
level                     | 0
fastroot                  | 1
fastlevel                 | 0
last_cleanup_num_delpages | 0
last_cleanup_num_tuples   | 230
allequalimage             | f
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>bt_metap</function>返回关于一个B树索引元页的信息。例如：
<screen>
test=# SELECT * FROM bt_metap('pg_cast_oid_index');
-[ RECORD 1 ]-------------+-------
magic                     | 340322
version                   | 4
root                      | 1
level                     | 0
fastroot                  | 1
fastlevel                 | 0
last_cleanup_num_delpages | 0
last_cleanup_num_tuples   | 230
allequalimage             | f
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=c47951ae7394c677b73e5c6576cb6a49 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=06d942caf6628a08f1b948aac3db3e7d sig_cn_org=None source=14.1 
    <term>
     <function>bt_page_stats(relname text, blkno bigint) returns record</function>
     <indexterm>
      <primary>bt_page_stats</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>bt_page_stats(relname text, blkno bigint) 返回 record</function>
    <indexterm>
     <primary>bt_page_stats</primary>
    </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=06d942caf6628a08f1b948aac3db3e7d -->

    <listitem>
<!-- pgdoc-cn_start sig_en=c9fffd7034dc57f406934d06e4f509c8 sig_cn_org=None source=14.1 
     <para>
      <function>bt_page_stats</function> returns summary information about
      single pages of B-tree indexes.  For example:
<screen>
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);
-[ RECORD 1 ]-+-&minus;-&minus;-
blkno         | 1
type          | l
live_items    | 224
dead_items    | 0
avg_item_size | 16
page_size     | 8192
free_size     | 3668
btpo_prev     | 0
btpo_next     | 0
btpo_level    | 0
btpo_flags    | 3
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>bt_page_stats</function>返回有关 B-树索引单一页面的总计信息。例如：
<screen>
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);
-[ RECORD 1 ]-+-----
blkno         | 1
type          | l
live_items    | 224
dead_items    | 0
avg_item_size | 16
page_size     | 8192
free_size     | 3668
btpo_prev     | 0
btpo_next     | 0
btpo_level    | 0
btpo_flags    | 3
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=c9fffd7034dc57f406934d06e4f509c8 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=56a096a95e293e5b87ae3f77ff252ba5 sig_cn_org=None source=14.1 
    <term>
     <function>bt_page_items(relname text, blkno bigint) returns setof record</function>
     <indexterm>
      <primary>bt_page_items</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>bt_page_items(relname text, blkno bigint) 返回 setof record</function>
    <indexterm>
     <primary>bt_page_items</primary>
    </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=56a096a95e293e5b87ae3f77ff252ba5 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=e6360532bcb9858339f65fb5636dbefd sig_cn_org=None source=14.1 
     <para>
      <function>bt_page_items</function> returns detailed information about
      all of the items on a B-tree index page.  For example:
<screen>
test=# SELECT itemoffset, ctid, itemlen, nulls, vars, data, dead, htid, tids[0:2] AS some_tids
        FROM bt_page_items('tenk2_hundred', 5);
 itemoffset |   ctid    | itemlen | nulls | vars |          data           | dead |  htid  |      some_tids
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
          1 | (16,1)    |      16 | f     | f    | 30 00 00 00 00 00 00 00 |      |        |
          2 | (16,8292) |     616 | f     | f    | 24 00 00 00 00 00 00 00 | f    | (1,6)  | {"(1,6)","(10,22)"}
          3 | (16,8292) |     616 | f     | f    | 25 00 00 00 00 00 00 00 | f    | (1,18) | {"(1,18)","(4,22)"}
          4 | (16,8292) |     616 | f     | f    | 26 00 00 00 00 00 00 00 | f    | (4,18) | {"(4,18)","(6,17)"}
          5 | (16,8292) |     616 | f     | f    | 27 00 00 00 00 00 00 00 | f    | (1,2)  | {"(1,2)","(1,19)"}
          6 | (16,8292) |     616 | f     | f    | 28 00 00 00 00 00 00 00 | f    | (2,24) | {"(2,24)","(4,11)"}
          7 | (16,8292) |     616 | f     | f    | 29 00 00 00 00 00 00 00 | f    | (2,17) | {"(2,17)","(11,2)"}
          8 | (16,8292) |     616 | f     | f    | 2a 00 00 00 00 00 00 00 | f    | (0,25) | {"(0,25)","(3,20)"}
          9 | (16,8292) |     616 | f     | f    | 2b 00 00 00 00 00 00 00 | f    | (0,10) | {"(0,10)","(0,14)"}
         10 | (16,8292) |     616 | f     | f    | 2c 00 00 00 00 00 00 00 | f    | (1,3)  | {"(1,3)","(3,9)"}
         11 | (16,8292) |     616 | f     | f    | 2d 00 00 00 00 00 00 00 | f    | (6,28) | {"(6,28)","(11,1)"}
         12 | (16,8292) |     616 | f     | f    | 2e 00 00 00 00 00 00 00 | f    | (0,27) | {"(0,27)","(1,13)"}
         13 | (16,8292) |     616 | f     | f    | 2f 00 00 00 00 00 00 00 | f    | (4,17) | {"(4,17)","(4,21)"}
(13 rows)
</screen>
      This is a B-tree leaf page.  All tuples that point to the table
      happen to be posting list tuples (all of which store a total of
      100 6 byte TIDs).  There is also a <quote>high key</quote> tuple
      at <literal>itemoffset</literal> number 1.
      <structfield>ctid</structfield> is used to store encoded
      information about each tuple in this example, though leaf page
      tuples often store a heap TID directly in the
      <structfield>ctid</structfield> field instead.
      <structfield>tids</structfield> is the list of TIDs stored as a
      posting list.
     </para>
________________________________________________________-->
     <para>
      <function>bt_page_items</function>返回一个 B-树索引页面上项的所有细节信息。例如：
<screen>
test=# SELECT itemoffset, ctid, itemlen, nulls, vars, data, dead, htid, tids[0:2] AS some_tids
        FROM bt_page_items('tenk2_hundred', 5);
 itemoffset |   ctid    | itemlen | nulls | vars |          data           | dead |  htid  |      some_tids
------------+-----------+---------+-------+------+-------------------------+------+--------+---------------------
          1 | (16,1)    |      16 | f     | f    | 30 00 00 00 00 00 00 00 |      |        |
          2 | (16,8292) |     616 | f     | f    | 24 00 00 00 00 00 00 00 | f    | (1,6)  | {"(1,6)","(10,22)"}
          3 | (16,8292) |     616 | f     | f    | 25 00 00 00 00 00 00 00 | f    | (1,18) | {"(1,18)","(4,22)"}
          4 | (16,8292) |     616 | f     | f    | 26 00 00 00 00 00 00 00 | f    | (4,18) | {"(4,18)","(6,17)"}
          5 | (16,8292) |     616 | f     | f    | 27 00 00 00 00 00 00 00 | f    | (1,2)  | {"(1,2)","(1,19)"}
          6 | (16,8292) |     616 | f     | f    | 28 00 00 00 00 00 00 00 | f    | (2,24) | {"(2,24)","(4,11)"}
          7 | (16,8292) |     616 | f     | f    | 29 00 00 00 00 00 00 00 | f    | (2,17) | {"(2,17)","(11,2)"}
          8 | (16,8292) |     616 | f     | f    | 2a 00 00 00 00 00 00 00 | f    | (0,25) | {"(0,25)","(3,20)"}
          9 | (16,8292) |     616 | f     | f    | 2b 00 00 00 00 00 00 00 | f    | (0,10) | {"(0,10)","(0,14)"}
         10 | (16,8292) |     616 | f     | f    | 2c 00 00 00 00 00 00 00 | f    | (1,3)  | {"(1,3)","(3,9)"}
         11 | (16,8292) |     616 | f     | f    | 2d 00 00 00 00 00 00 00 | f    | (6,28) | {"(6,28)","(11,1)"}
         12 | (16,8292) |     616 | f     | f    | 2e 00 00 00 00 00 00 00 | f    | (0,27) | {"(0,27)","(1,13)"}
         13 | (16,8292) |     616 | f     | f    | 2f 00 00 00 00 00 00 00 | f    | (4,17) | {"(4,17)","(4,21)"}
(13 rows)
</screen>
      这是一个 B 树的叶子页面。 指向该表的所有元组恰好是发布列表元组（所有这些元组总共存储 100 个 6 字节 TID）。
      在<literal>itemoffset</literal>编号 1 处还有一个<quote>high key</quote>元组。
      <structfield>ctid</structfield>用于存储本示例中每个元组的编码信息，尽管叶页元组通常将堆 TID 直接存储在<structfield>ctid</structfield>字段中，而不是<structfield>tids</structfield>是存储为发布列表的 TID 列表。
     </para>
<!-- pgdoc-cn_end sig_en=e6360532bcb9858339f65fb5636dbefd -->
<!-- pgdoc-cn_start sig_en=88ab3a53c0083e1bd33e83a3e4a138ef sig_cn_org=None source=14.1 
     <para>
      In an internal page (not shown), the block number part of
      <structfield>ctid</structfield> is a <quote>downlink</quote>,
      which is a block number of another page in the index itself.
      The offset part (the second number) of
      <structfield>ctid</structfield> stores encoded information about
      the tuple, such as the number of columns present (suffix
      truncation may have removed unneeded suffix columns).  Truncated
      columns are treated as having the value <quote>minus
       infinity</quote>.
     </para>
________________________________________________________-->
     <para>
      在内部页面（未显示）中，<structfield>ctid</structfield>的块号部分是一个<quote>downlink</quote>，
      它是索引本身中另一个页面的块号。<structfield>ctid</structfield>的偏移部分（第二个数字）存储有关元组的编码信息，
      例如存在的列数（后缀截断可能已删除不需要的后缀列）。截断的列被视为具有值<quote>minus infinity</quote>。
     </para>
<!-- pgdoc-cn_end sig_en=88ab3a53c0083e1bd33e83a3e4a138ef -->
<!-- pgdoc-cn_start sig_en=59955fa514a6031ee94afd13136a80d4 sig_cn_org=None source=14.1 
     <para>
      <structfield>htid</structfield> shows a heap TID for the tuple,
      regardless of the underlying tuple representation.  This value
      may match <structfield>ctid</structfield>, or may be decoded
      from the alternative representations used by posting list tuples
      and tuples from internal pages.  Tuples in internal pages
      usually have the implementation level heap TID column truncated
      away, which is represented as a NULL
      <structfield>htid</structfield> value.
     </para>
________________________________________________________-->
     <para>
      <structfield>htid</structfield>显示元组的堆 TID，无论底层元组表示如何。
      该值可能与<structfield>ctid</structfield>匹配，或者可以从发布列表元组和
      来自内部页面的元组所使用的替代表示中解码。内部页面中的元组通常会截断实现级别的
      堆 TID 列，这表示为 NULL<structfield>htid</structfield>值。
     </para>
<!-- pgdoc-cn_end sig_en=59955fa514a6031ee94afd13136a80d4 -->
<!-- pgdoc-cn_start sig_en=c3dfc39695abe9edd00193f68cbb717c sig_cn_org=None source=14.1 
     <para>
      Note that the first item on any non-rightmost page (any page with
      a non-zero value in the <structfield>btpo_next</structfield> field) is the
      page's <quote>high key</quote>, meaning its <structfield>data</structfield>
      serves as an upper bound on all items appearing on the page, while
      its <structfield>ctid</structfield> field does not point to
      another block.  Also, on internal pages, the first real data
      item (the first item that is not a high key) reliably has every
      column truncated away, leaving no actual value in its
      <structfield>data</structfield> field.  Such an item does have a
      valid downlink in its <structfield>ctid</structfield> field,
      however.
     </para>
________________________________________________________-->
     <para>
      注意在任何非最右页面（页面的<structfield>btpo_next</structfield>域中有非零
      值）上的第一个项是该页的<quote>high key</quote>，表示它的
      <structfield>data</structfield>是作为该页面上所有项的一个上界存在，而它的
      <structfield>ctid</structfield>字段不指向另一个块。此外，在内部页面上，第一个真正的数据项（第一个不是高键的项）可靠地将每一列都截断了，在其<structfield>data</structfield>字段中没有留下任何实际值。不过，这样一个项确实
      在其有<structfield>ctid</structfield>域中有向下的链接。
     </para>
<!-- pgdoc-cn_end sig_en=c3dfc39695abe9edd00193f68cbb717c -->
<!-- pgdoc-cn_start sig_en=dab1a055ec5869009ddb7f7abf7165a8 sig_cn_org=None source=14.1 
     <para>
      For more details about the structure of B-tree indexes, see
      <xref linkend="btree-structure"/>.  For more details about
      deduplication and posting lists, see <xref
       linkend="btree-deduplication"/>.
     </para>
________________________________________________________-->
     <para>
      有关 B 树索引结构的更多详细信息，请参阅<xref linkend="btree-structure"/>。
      有关重复数据删除和发布列表的更多详细信息，请参阅<xref linkend="btree-deduplication"/>。
     </para>
<!-- pgdoc-cn_end sig_en=dab1a055ec5869009ddb7f7abf7165a8 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=9abca186f92d0a1a51f8f5106984751a sig_cn_org=None source=14.1 
    <term>
     <function>bt_page_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>bt_page_items</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>bt_page_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>bt_page_items</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=9abca186f92d0a1a51f8f5106984751a -->

    <listitem>
<!-- pgdoc-cn_start sig_en=fabacfa2f33c1aa3cdb4b8d025d5d16e sig_cn_org=None source=14.1 
     <para>
      It is also possible to pass a page to <function>bt_page_items</function>
      as a <type>bytea</type> value.  A page image obtained
      with <function>get_raw_page</function> should be passed as argument.  So
      the last example could also be rewritten like this:
<screen>
test=# SELECT itemoffset, ctid, itemlen, nulls, vars, data, dead, htid, tids[0:2] AS some_tids
        FROM bt_page_items(get_raw_page('tenk2_hundred', 5));
 itemoffset |   ctid    | itemlen | nulls | vars |          data           | dead |  htid  |      some_tids
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
          1 | (16,1)    |      16 | f     | f    | 30 00 00 00 00 00 00 00 |      |        |
          2 | (16,8292) |     616 | f     | f    | 24 00 00 00 00 00 00 00 | f    | (1,6)  | {"(1,6)","(10,22)"}
          3 | (16,8292) |     616 | f     | f    | 25 00 00 00 00 00 00 00 | f    | (1,18) | {"(1,18)","(4,22)"}
          4 | (16,8292) |     616 | f     | f    | 26 00 00 00 00 00 00 00 | f    | (4,18) | {"(4,18)","(6,17)"}
          5 | (16,8292) |     616 | f     | f    | 27 00 00 00 00 00 00 00 | f    | (1,2)  | {"(1,2)","(1,19)"}
          6 | (16,8292) |     616 | f     | f    | 28 00 00 00 00 00 00 00 | f    | (2,24) | {"(2,24)","(4,11)"}
          7 | (16,8292) |     616 | f     | f    | 29 00 00 00 00 00 00 00 | f    | (2,17) | {"(2,17)","(11,2)"}
          8 | (16,8292) |     616 | f     | f    | 2a 00 00 00 00 00 00 00 | f    | (0,25) | {"(0,25)","(3,20)"}
          9 | (16,8292) |     616 | f     | f    | 2b 00 00 00 00 00 00 00 | f    | (0,10) | {"(0,10)","(0,14)"}
         10 | (16,8292) |     616 | f     | f    | 2c 00 00 00 00 00 00 00 | f    | (1,3)  | {"(1,3)","(3,9)"}
         11 | (16,8292) |     616 | f     | f    | 2d 00 00 00 00 00 00 00 | f    | (6,28) | {"(6,28)","(11,1)"}
         12 | (16,8292) |     616 | f     | f    | 2e 00 00 00 00 00 00 00 | f    | (0,27) | {"(0,27)","(1,13)"}
         13 | (16,8292) |     616 | f     | f    | 2f 00 00 00 00 00 00 00 | f    | (4,17) | {"(4,17)","(4,21)"}
(13 rows)
</screen>
      All the other details are the same as explained in the previous item.
     </para>
________________________________________________________-->
     <para>
      还可以把一个页面以<type>bytea</type>值的形式传递给<function>bt_page_items</function>。应该将<function>get_raw_page</function>得到的页面映像作为参数传入。因此，上一个例子可以被重写成这样：
<screen>
test=# SELECT itemoffset, ctid, itemlen, nulls, vars, data, dead, htid, tids[0:2] AS some_tids
        FROM bt_page_items(get_raw_page('tenk2_hundred', 5));
 itemoffset |   ctid    | itemlen | nulls | vars |          data           | dead |  htid  |      some_tids
------------+-----------+---------+-------+------+-------------------------+------+--------+---------------------
          1 | (16,1)    |      16 | f     | f    | 30 00 00 00 00 00 00 00 |      |        |
          2 | (16,8292) |     616 | f     | f    | 24 00 00 00 00 00 00 00 | f    | (1,6)  | {"(1,6)","(10,22)"}
          3 | (16,8292) |     616 | f     | f    | 25 00 00 00 00 00 00 00 | f    | (1,18) | {"(1,18)","(4,22)"}
          4 | (16,8292) |     616 | f     | f    | 26 00 00 00 00 00 00 00 | f    | (4,18) | {"(4,18)","(6,17)"}
          5 | (16,8292) |     616 | f     | f    | 27 00 00 00 00 00 00 00 | f    | (1,2)  | {"(1,2)","(1,19)"}
          6 | (16,8292) |     616 | f     | f    | 28 00 00 00 00 00 00 00 | f    | (2,24) | {"(2,24)","(4,11)"}
          7 | (16,8292) |     616 | f     | f    | 29 00 00 00 00 00 00 00 | f    | (2,17) | {"(2,17)","(11,2)"}
          8 | (16,8292) |     616 | f     | f    | 2a 00 00 00 00 00 00 00 | f    | (0,25) | {"(0,25)","(3,20)"}
          9 | (16,8292) |     616 | f     | f    | 2b 00 00 00 00 00 00 00 | f    | (0,10) | {"(0,10)","(0,14)"}
         10 | (16,8292) |     616 | f     | f    | 2c 00 00 00 00 00 00 00 | f    | (1,3)  | {"(1,3)","(3,9)"}
         11 | (16,8292) |     616 | f     | f    | 2d 00 00 00 00 00 00 00 | f    | (6,28) | {"(6,28)","(11,1)"}
         12 | (16,8292) |     616 | f     | f    | 2e 00 00 00 00 00 00 00 | f    | (0,27) | {"(0,27)","(1,13)"}
         13 | (16,8292) |     616 | f     | f    | 2f 00 00 00 00 00 00 00 | f    | (4,17) | {"(4,17)","(4,21)"}
(13 rows)
</screen>
      所有其他细节和前一项中的解释相同。
     </para>
<!-- pgdoc-cn_end sig_en=fabacfa2f33c1aa3cdb4b8d025d5d16e -->
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=ae9e069f7029907ab527b4410ff055f0 sig_cn_org=None source=14.1 
  <title>BRIN Functions</title>
________________________________________________________-->
  <title>BRIN函数</title>
<!-- pgdoc-cn_end sig_en=ae9e069f7029907ab527b4410ff055f0 -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=17a1b9bca2b3da78f426a615dfe12b82 sig_cn_org=None source=14.1 
    <term>
     <function>brin_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>brin_page_type</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>brin_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>brin_page_type</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=17a1b9bca2b3da78f426a615dfe12b82 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=307b8d91c6b34cffdfe1f556af0a1d9b sig_cn_org=fe4d3b4f2a2b249effaf4c9b24ef5483 source=15.7 
     <para>
      <function>brin_page_type</function> returns the page type of the given
      <acronym>BRIN</acronym> index page, or throws an error if the page is
      not a valid <acronym>BRIN</acronym> page.  For example:
<screen>
test=# SELECT brin_page_type(get_raw_page('brinidx', 0));
 brin_page_type
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 meta
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>brin_page_type</function>返回给定<acronym>BRIN</acronym>索引页的页面类型，如果页面不是有效的<acronym>BRIN</acronym>页面，则抛出错误。例如:
<screen>
test=# SELECT brin_page_type(get_raw_page('brinidx', 0));
 brin_page_type
----------------
 meta
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=307b8d91c6b34cffdfe1f556af0a1d9b -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=3b58b5401377ff19bedb8664f4a58bd7 sig_cn_org=None source=14.1 
    <term>
     <function>brin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>brin_metapage_info</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>brin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>brin_metapage_info</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=3b58b5401377ff19bedb8664f4a58bd7 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=72e8ba16c37b6e77eef6cd39e7805838 sig_cn_org=139ed3639b409423e4747c57b180367b source=15.7 
     <para>
      <function>brin_metapage_info</function> returns assorted information
      about a <acronym>BRIN</acronym> index metapage.  For example:
<screen>
test=# SELECT * FROM brin_metapage_info(get_raw_page('brinidx', 0));
   magic    | version | pagesperrange | lastrevmappage
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 0xA8109CFA |       1 |             4 |              2
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>brin_metapage_info</function>返回有关<acronym>BRIN</acronym>索引元页面的各种信息。例如：
<screen>
test=# SELECT * FROM brin_metapage_info(get_raw_page('brinidx', 0));
   magic    | version | pagesperrange | lastrevmappage
------------+---------+---------------+----------------
 0xA8109CFA |       1 |             4 |              2
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=72e8ba16c37b6e77eef6cd39e7805838 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=a44da5040718fc1ed766af59aff60a9f sig_cn_org=None source=14.1 
    <term>
     <function>brin_revmap_data(page bytea) returns setof tid</function>
     <indexterm>
      <primary>brin_revmap_data</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>brin_revmap_data(page bytea) returns setof tid</function>
     <indexterm>
      <primary>brin_revmap_data</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=a44da5040718fc1ed766af59aff60a9f -->

    <listitem>
<!-- pgdoc-cn_start sig_en=da12cc6c0c6e56ad2cbe94796c34596d sig_cn_org=3bc07390c6716f0342bbd509ae6ed9c8 source=15.7 
     <para>
      <function>brin_revmap_data</function> returns the list of tuple
      identifiers in a <acronym>BRIN</acronym> index range map page.
      For example:
<screen>
test=# SELECT * FROM brin_revmap_data(get_raw_page('brinidx', 2)) LIMIT 5;
  pages
-&minus;-&minus;-&minus;-&minus;-
 (6,137)
 (6,138)
 (6,139)
 (6,140)
 (6,141)
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>brin_revmap_data</function>返回<acronym>BRIN</acronym>索引范围映射页中的元组标识符列表。
      例如:
<screen>
test=# SELECT * FROM brin_revmap_data(get_raw_page('brinidx', 2)) LIMIT 5;
  pages
---------
 (6,137)
 (6,138)
 (6,139)
 (6,140)
 (6,141)
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=da12cc6c0c6e56ad2cbe94796c34596d -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=af01f6d85aaaebd733b89e7162968597 sig_cn_org=None source=14.1 
    <term>
     <function>brin_page_items(page bytea, index oid) returns setof record</function>
     <indexterm>
      <primary>brin_page_items</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>brin_page_items(page bytea, index oid) returns setof record</function>
     <indexterm>
      <primary>brin_page_items</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=af01f6d85aaaebd733b89e7162968597 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=8ed106f055a92268d3abd1aa880aa2b7 sig_cn_org=73cb89227f4e4aa71a4b82916401b369 source=15.7 
     <para>
      <function>brin_page_items</function> returns the data stored in the
      <acronym>BRIN</acronym> data page.  For example:
<screen>
test=# SELECT * FROM brin_page_items(get_raw_page('brinidx', 5),
                                     'brinidx')
       ORDER BY blknum, attnum LIMIT 6;
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |    value
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
        137 |      0 |      1 | t        | f        | f           |
        137 |      0 |      2 | f        | f        | f           | {1 .. 88}
        138 |      4 |      1 | t        | f        | f           |
        138 |      4 |      2 | f        | f        | f           | {89 .. 176}
        139 |      8 |      1 | t        | f        | f           |
        139 |      8 |      2 | f        | f        | f           | {177 .. 264}
</screen>
      The returned columns correspond to the fields in the
      <structname>BrinMemTuple</structname> and <structname>BrinValues</structname> structs.
      See <filename>src/include/access/brin_tuple.h</filename> for details.
     </para>
________________________________________________________-->
     <para>
      <function>brin_page_items</function>返回存储在<acronym>BRIN</acronym>数据页中的数据。例如：
<screen>
test=# SELECT * FROM brin_page_items(get_raw_page('brinidx', 5),
                                     'brinidx')
       ORDER BY blknum, attnum LIMIT 6;
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |    value
------------+--------+--------+----------+----------+-------------+--------------
        137 |      0 |      1 | t        | f        | f           |
        137 |      0 |      2 | f        | f        | f           | {1 .. 88}
        138 |      4 |      1 | t        | f        | f           |
        138 |      4 |      2 | f        | f        | f           | {89 .. 176}
        139 |      8 |      1 | t        | f        | f           |
        139 |      8 |      2 | f        | f        | f           | {177 .. 264}
</screen>
      返回的列对应于<structname>BrinMemTuple</structname>和<structname>BrinValues</structname>结构中的字段。
      有关详细信息，请参阅<filename>src/include/access/brin_tuple.h</filename>。
     </para>
<!-- pgdoc-cn_end sig_en=8ed106f055a92268d3abd1aa880aa2b7 -->
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=dbe8ca56f264b61edc10a493c37d4691 sig_cn_org=None source=14.1 
  <title>GIN Functions</title>
________________________________________________________-->
  <title>GIN函数</title>
<!-- pgdoc-cn_end sig_en=dbe8ca56f264b61edc10a493c37d4691 -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=1f2bfad695a7eac34f998a999158fd55 sig_cn_org=None source=14.1 
    <term>
     <function>gin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_metapage_info</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>gin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_metapage_info</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=1f2bfad695a7eac34f998a999158fd55 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=0a95db027615c80921b4c83ed60be4f5 sig_cn_org=None source=14.1 
     <para>
      <function>gin_metapage_info</function> returns information about
      a <acronym>GIN</acronym> index metapage.  For example:
<screen>
test=# SELECT * FROM gin_metapage_info(get_raw_page('gin_index', 0));
-[ RECORD 1 ]-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-
pending_head     | 4294967295
pending_tail     | 4294967295
tail_free_size   | 0
n_pending_pages  | 0
n_pending_tuples | 0
n_total_pages    | 7
n_entry_pages    | 6
n_data_pages     | 0
n_entries        | 693
version          | 2
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>gin_metapage_info</function>返回有关一个
      <acronym>GIN</acronym>索引元页的信息。例如：
<screen>
test=# SELECT * FROM gin_metapage_info(get_raw_page('gin_index', 0));
-[ RECORD 1 ]----+-----------
pending_head     | 4294967295
pending_tail     | 4294967295
tail_free_size   | 0
n_pending_pages  | 0
n_pending_tuples | 0
n_total_pages    | 7
n_entry_pages    | 6
n_data_pages     | 0
n_entries        | 693
version          | 2
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=0a95db027615c80921b4c83ed60be4f5 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=009b8cc02e77b3a0e6276f289ed4a3b4 sig_cn_org=None source=14.1 
    <term>
     <function>gin_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_page_opaque_info</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>gin_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_page_opaque_info</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=009b8cc02e77b3a0e6276f289ed4a3b4 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=967acbff3f402923dffe6a3c2bf97375 sig_cn_org=None source=14.1 
     <para>
      <function>gin_page_opaque_info</function> returns information about
      a <acronym>GIN</acronym> index opaque area, like the page type.
      For example:
<screen>
test=# SELECT * FROM gin_page_opaque_info(get_raw_page('gin_index', 2));
 rightlink | maxoff |         flags
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
         5 |      0 | {data,leaf,compressed}
(1 row)
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>gin_page_opaque_info</function>返回有关一个
      <acronym>GIN</acronym>索引不透明区域的信息，如页面类型等。例如：
<screen>
test=# SELECT * FROM gin_page_opaque_info(get_raw_page('gin_index', 2));
 rightlink | maxoff |         flags
-----------+--------+------------------------
         5 |      0 | {data,leaf,compressed}
(1 row)
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=967acbff3f402923dffe6a3c2bf97375 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=4c1e42dea04dfba3d86dec1f44bd6340 sig_cn_org=None source=14.1 
    <term>
     <function>gin_leafpage_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>gin_leafpage_items</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>gin_leafpage_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>gin_leafpage_items</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=4c1e42dea04dfba3d86dec1f44bd6340 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=9f7b5fa00cae9cfe67d2ecf9ffd3b158 sig_cn_org=None source=14.1 
     <para>
      <function>gin_leafpage_items</function> returns information about
      the data stored in a <acronym>GIN</acronym> leaf page.  For example:
<screen>
test=# SELECT first_tid, nbytes, tids[0:5] AS some_tids
        FROM gin_leafpage_items(get_raw_page('gin_test_idx', 2));
 first_tid | nbytes |                        some_tids
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 (8,41)    |    244 | {"(8,41)","(8,43)","(8,44)","(8,45)","(8,46)"}
 (10,45)   |    248 | {"(10,45)","(10,46)","(10,47)","(10,48)","(10,49)"}
 (12,52)   |    248 | {"(12,52)","(12,53)","(12,54)","(12,55)","(12,56)"}
 (14,59)   |    320 | {"(14,59)","(14,60)","(14,61)","(14,62)","(14,63)"}
 (167,16)  |    376 | {"(167,16)","(167,17)","(167,18)","(167,19)","(167,20)"}
 (170,30)  |    376 | {"(170,30)","(170,31)","(170,32)","(170,33)","(170,34)"}
 (173,44)  |    197 | {"(173,44)","(173,45)","(173,46)","(173,47)","(173,48)"}
(7 rows)
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>gin_leafpage_items</function>返回有关存储在一个
      <acronym>GIN</acronym>叶子页面中的数据的信息。例如：
<screen>
test=# SELECT first_tid, nbytes, tids[0:5] AS some_tids
        FROM gin_leafpage_items(get_raw_page('gin_test_idx', 2));
 first_tid | nbytes |                        some_tids
-----------+--------+----------------------------------------------------------
 (8,41)    |    244 | {"(8,41)","(8,43)","(8,44)","(8,45)","(8,46)"}
 (10,45)   |    248 | {"(10,45)","(10,46)","(10,47)","(10,48)","(10,49)"}
 (12,52)   |    248 | {"(12,52)","(12,53)","(12,54)","(12,55)","(12,56)"}
 (14,59)   |    320 | {"(14,59)","(14,60)","(14,61)","(14,62)","(14,63)"}
 (167,16)  |    376 | {"(167,16)","(167,17)","(167,18)","(167,19)","(167,20)"}
 (170,30)  |    376 | {"(170,30)","(170,31)","(170,32)","(170,33)","(170,34)"}
 (173,44)  |    197 | {"(173,44)","(173,45)","(173,46)","(173,47)","(173,48)"}
(7 rows)
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=9f7b5fa00cae9cfe67d2ecf9ffd3b158 -->
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=5b527be6fb1ed9f38cef12e8b9c72f46 sig_cn_org=None source=14.1 
  <title>GiST Functions</title>
________________________________________________________-->
  <title>GiST 函数</title>
<!-- pgdoc-cn_end sig_en=5b527be6fb1ed9f38cef12e8b9c72f46 -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=fe8cc85cc8f51de621c4dc3e095f8b14 sig_cn_org=None source=14.1 
    <term>
     <function>gist_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gist_page_opaque_info</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>gist_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gist_page_opaque_info</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=fe8cc85cc8f51de621c4dc3e095f8b14 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=c577a0f9bba19757977fa3c85bf89a44 sig_cn_org=439b3d5542c5ce3b0e0dc2672e10ac81 source=15.7 
     <para>
      <function>gist_page_opaque_info</function> returns information from
      a <acronym>GiST</acronym> index page's opaque area, such as the NSN,
      rightlink and page type.
      For example:
<screen>
test=# SELECT * FROM gist_page_opaque_info(get_raw_page('test_gist_idx', 2));
 lsn | nsn | rightlink | flags
-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;
 0/1 | 0/0 |         1 | {leaf}
(1 row)
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>gist_page_opaque_info</function>返回<acronym>GiST</acronym>索引页的不透明区域信息，例如NSN、rightlink和页类型。
      例如：
<screen>
test=# SELECT * FROM gist_page_opaque_info(get_raw_page('test_gist_idx', 2));
 lsn | nsn | rightlink | flags
-----+-----+-----------+--------
 0/1 | 0/0 |         1 | {leaf}
(1 row)
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=c577a0f9bba19757977fa3c85bf89a44 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=0f0c51c87149854d2d3d56a37a09e39b sig_cn_org=None source=14.1 
    <term>
     <function>gist_page_items(page bytea, index_oid regclass) returns setof record</function>
     <indexterm>
      <primary>gist_page_items</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>gist_page_items(page bytea, index_oid regclass) returns setof record</function>
     <indexterm>
      <primary>gist_page_items</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=0f0c51c87149854d2d3d56a37a09e39b -->

    <listitem>
<!-- pgdoc-cn_start sig_en=2e75bba0475a1b39e0ea184f05c1445d sig_cn_org=deb1bbcb0d5c87492f308137fe3ee44c source=15.7 
     <para>
      <function>gist_page_items</function> returns information about
      the data stored in a page of a <acronym>GiST</acronym> index.  For example:
<screen>
test=# SELECT * FROM gist_page_items(get_raw_page('test_gist_idx', 0), 'test_gist_idx');
 itemoffset |   ctid    | itemlen | dead |             keys
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
          1 | (1,65535) |      40 | f    | (p)=("(185,185),(1,1)")
          2 | (2,65535) |      40 | f    | (p)=("(370,370),(186,186)")
          3 | (3,65535) |      40 | f    | (p)=("(555,555),(371,371)")
          4 | (4,65535) |      40 | f    | (p)=("(740,740),(556,556)")
          5 | (5,65535) |      40 | f    | (p)=("(870,870),(741,741)")
          6 | (6,65535) |      40 | f    | (p)=("(1000,1000),(871,871)")
(6 rows)
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>gist_page_items</function>返回有关存储在<acronym>GiST</acronym>索引页中数据的信息。例如：
<screen>
test=# SELECT * FROM gist_page_items(get_raw_page('test_gist_idx', 0), 'test_gist_idx');
 itemoffset |   ctid    | itemlen | dead |             keys
------------+-----------+---------+------+-------------------------------
          1 | (1,65535) |      40 | f    | (p)=("(185,185),(1,1)")
          2 | (2,65535) |      40 | f    | (p)=("(370,370),(186,186)")
          3 | (3,65535) |      40 | f    | (p)=("(555,555),(371,371)")
          4 | (4,65535) |      40 | f    | (p)=("(740,740),(556,556)")
          5 | (5,65535) |      40 | f    | (p)=("(870,870),(741,741)")
          6 | (6,65535) |      40 | f    | (p)=("(1000,1000),(871,871)")
(6 rows)
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=2e75bba0475a1b39e0ea184f05c1445d -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=644498849e0e24fff4ae47d81fe094e1 sig_cn_org=None source=14.1 
    <term>
     <function>gist_page_items_bytea(page bytea) returns setof record</function>
     <indexterm>
      <primary>gist_page_items_bytea</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>gist_page_items_bytea(page bytea) returns setof record</function>
     <indexterm>
      <primary>gist_page_items_bytea</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=644498849e0e24fff4ae47d81fe094e1 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=4b1969b7f3279ce684d01255422bb348 sig_cn_org=0104cffe44d8345cb647ca93e83c4b9d source=15.7 
     <para>
      Same as <function>gist_page_items</function>, but returns the key data
      as a raw <type>bytea</type> blob.  Since it does not attempt to decode
      the key, it does not need to know which index is involved.  For
      example:
<screen>
test=# SELECT * FROM gist_page_items_bytea(get_raw_page('test_gist_idx', 0));
 itemoffset |   ctid    | itemlen | dead |                                      key_data
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
          1 | (1,65535) |      40 | f    | \x00000100ffff28000000000000c0644000000000&zwsp;00c06440000000000000f03f000000000000f03f
          2 | (2,65535) |      40 | f    | \x00000200ffff28000000000000c0744000000000&zwsp;00c074400000000000e064400000000000e06440
          3 | (3,65535) |      40 | f    | \x00000300ffff28000000000000207f4000000000&zwsp;00207f400000000000d074400000000000d07440
          4 | (4,65535) |      40 | f    | \x00000400ffff28000000000000c0844000000000&zwsp;00c084400000000000307f400000000000307f40
          5 | (5,65535) |      40 | f    | \x00000500ffff28000000000000f0894000000000&zwsp;00f089400000000000c884400000000000c88440
          6 | (6,65535) |      40 | f    | \x00000600ffff28000000000000208f4000000000&zwsp;00208f400000000000f889400000000000f88940
          7 | (7,65535) |      40 | f    | \x00000700ffff28000000000000408f4000000000&zwsp;00408f400000000000288f400000000000288f40
(7 rows)
</screen>
     </para>
________________________________________________________-->
     <para>
      与<function>gist_page_items</function>相同，但将关键数据作为原始<type>bytea</type> blob返回。
      由于它不尝试解码关键字，因此不需要知道涉及的索引是哪个。例如：
<screen>
test=# SELECT * FROM gist_page_items_bytea(get_raw_page('test_gist_idx', 0));
 itemoffset |   ctid    | itemlen | dead |                                      key_data
------------+-----------+---------+------+-----------------------------------------&zwsp;-------------------------------------------
          1 | (1,65535) |      40 | f    | \x00000100ffff28000000000000c0644000000000&zwsp;00c06440000000000000f03f000000000000f03f
          2 | (2,65535) |      40 | f    | \x00000200ffff28000000000000c0744000000000&zwsp;00c074400000000000e064400000000000e06440
          3 | (3,65535) |      40 | f    | \x00000300ffff28000000000000207f4000000000&zwsp;00207f400000000000d074400000000000d07440
          4 | (4,65535) |      40 | f    | \x00000400ffff28000000000000c0844000000000&zwsp;00c084400000000000307f400000000000307f40
          5 | (5,65535) |      40 | f    | \x00000500ffff28000000000000f0894000000000&zwsp;00f089400000000000c884400000000000c88440
          6 | (6,65535) |      40 | f    | \x00000600ffff28000000000000208f4000000000&zwsp;00208f400000000000f889400000000000f88940
          7 | (7,65535) |      40 | f    | \x00000700ffff28000000000000408f4000000000&zwsp;00408f400000000000288f400000000000288f40
(7 rows)
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=4b1969b7f3279ce684d01255422bb348 -->
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=5164b1bfaefca1925b6d7dc9891c53bc sig_cn_org=None source=14.1 
  <title>Hash Functions</title>
________________________________________________________-->
  <title>Hash函数</title>
<!-- pgdoc-cn_end sig_en=5164b1bfaefca1925b6d7dc9891c53bc -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=d31291f39607bc0004b3dfcf618cf66d sig_cn_org=None source=14.1 
    <term>
     <function>hash_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>hash_page_type</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>hash_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>hash_page_type</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=d31291f39607bc0004b3dfcf618cf66d -->

    <listitem>
<!-- pgdoc-cn_start sig_en=a6ca7d7bcb5c12ea0626f2810d142436 sig_cn_org=6b0f0ea5829e7f908e22e19994bcf22b source=15.7 
     <para>
      <function>hash_page_type</function> returns page type of
      the given <acronym>HASH</acronym> index page.  For example:
<screen>
test=# SELECT hash_page_type(get_raw_page('con_hash_index', 0));
 hash_page_type
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 metapage
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>hash_page_type</function>返回给定<acronym>HASH</acronym>索引页的页面类型。例如：
<screen>
test=# SELECT hash_page_type(get_raw_page('con_hash_index', 0));
 hash_page_type
----------------
 metapage
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=a6ca7d7bcb5c12ea0626f2810d142436 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=a2edbc2aea5db413fb45f38b44f0ee96 sig_cn_org=None source=14.1 
    <term>
     <function>hash_page_stats(page bytea) returns setof record</function>
     <indexterm>
      <primary>hash_page_stats</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>hash_page_stats(page bytea) returns setof record</function>
     <indexterm>
      <primary>hash_page_stats</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=a2edbc2aea5db413fb45f38b44f0ee96 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=f43fa8054d71a50c4ac1f22fd2a09d81 sig_cn_org=None source=14.1 
     <para>
      <function>hash_page_stats</function> returns information about
      a bucket or overflow page of a <acronym>HASH</acronym> index.
      For example:
<screen>
test=# SELECT * FROM hash_page_stats(get_raw_page('con_hash_index', 1));
-[ RECORD 1 ]-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-
live_items      | 407
dead_items      | 0
page_size       | 8192
free_size       | 8
hasho_prevblkno | 4096
hasho_nextblkno | 8474
hasho_bucket    | 0
hasho_flag      | 66
hasho_page_id   | 65408
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>hash_page_stats</function>返回有关一个<acronym>HASH</acronym>索引的桶页或者溢出页的信息。例如：
<screen>
test=# SELECT * FROM hash_page_stats(get_raw_page('con_hash_index', 1));
-[ RECORD 1 ]---+-----------
live_items      | 407
dead_items      | 0
page_size       | 8192
free_size       | 8
hasho_prevblkno | 4096
hasho_nextblkno | 8474
hasho_bucket    | 0
hasho_flag      | 66
hasho_page_id   | 65408
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=f43fa8054d71a50c4ac1f22fd2a09d81 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=dc83ace9a1b6b3c7fefef4b6982a20d6 sig_cn_org=None source=14.1 
    <term>
     <function>hash_page_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>hash_page_items</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>hash_page_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>hash_page_items</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=dc83ace9a1b6b3c7fefef4b6982a20d6 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=b5d16093bd1133cc2bc8992a6a8c4216 sig_cn_org=16f3dad412a6d3dbcf500b470c10d655 source=15.7 
     <para>
      <function>hash_page_items</function> returns information about
      the data stored in a bucket or overflow page of a <acronym>HASH</acronym>
      index page.  For example:
<screen>
test=# SELECT * FROM hash_page_items(get_raw_page('con_hash_index', 1)) LIMIT 5;
 itemoffset |   ctid    |    data
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
          1 | (899,77)  | 1053474816
          2 | (897,29)  | 1053474816
          3 | (894,207) | 1053474816
          4 | (892,159) | 1053474816
          5 | (890,111) | 1053474816
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>hash_page_items</function>返回有关存储在哈希索引页的桶或溢出页中的数据的信息。例如：
<screen>
test=# SELECT * FROM hash_page_items(get_raw_page('con_hash_index', 1)) LIMIT 5;
 itemoffset |   ctid    |    data
------------+-----------+------------
          1 | (899,77)  | 1053474816
          2 | (897,29)  | 1053474816
          3 | (894,207) | 1053474816
          4 | (892,159) | 1053474816
          5 | (890,111) | 1053474816
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=b5d16093bd1133cc2bc8992a6a8c4216 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=8b6d8f362ddd7c39edfc79cd1c7988e4 sig_cn_org=None source=14.1 
    <term>
     <function>hash_bitmap_info(index oid, blkno bigint) returns record</function>
     <indexterm>
      <primary>hash_bitmap_info</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>hash_bitmap_info(index oid, blkno bigint) returns record</function>
     <indexterm>
      <primary>hash_bitmap_info</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=8b6d8f362ddd7c39edfc79cd1c7988e4 -->

    <listitem>
<!-- pgdoc-cn_start sig_en=8b689ae8f65f19e80b0f80a5a91d8485 sig_cn_org=79fcfa2a27cd131d99d6a0b8d7ce1b0a source=15.7 
     <para>
      <function>hash_bitmap_info</function> shows the status of a bit
      in the bitmap page for a particular overflow page of <acronym>HASH</acronym>
      index. For example:
<screen>
test=# SELECT * FROM hash_bitmap_info('con_hash_index', 2052);
 bitmapblkno | bitmapbit | bitstatus
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-
          65 |         3 | t
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>hash_bitmap_info</function>显示<acronym>HASH</acronym>索引的特定溢出页的位图页中位的状态。例如：
<screen>
test=# SELECT * FROM hash_bitmap_info('con_hash_index', 2052);
 bitmapblkno | bitmapbit | bitstatus
-------------+-----------+-----------
          65 |         3 | t
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=8b689ae8f65f19e80b0f80a5a91d8485 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=99162b9ac9db4b605925cf44de637abe sig_cn_org=None source=14.1 
    <term>
     <function>hash_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>hash_metapage_info</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <function>hash_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>hash_metapage_info</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=99162b9ac9db4b605925cf44de637abe -->

    <listitem>
<!-- pgdoc-cn_start sig_en=82fb53af561f766dfe1fa4489b936d75 sig_cn_org=None source=14.1 
     <para>
      <function>hash_metapage_info</function> returns information stored
      in the meta page of a <acronym>HASH</acronym> index.  For example:
<screen>
test=# SELECT magic, version, ntuples, ffactor, bsize, bmsize, bmshift,
test-#     maxbucket, highmask, lowmask, ovflpoint, firstfree, nmaps, procid,
test-#     regexp_replace(spares::text, '(,0)*}', '}') as spares,
test-#     regexp_replace(mapp::text, '(,0)*}', '}') as mapp
test-# FROM hash_metapage_info(get_raw_page('con_hash_index', 0));
-[ RECORD 1 ]-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
magic     | 105121344
version   | 4
ntuples   | 500500
ffactor   | 40
bsize     | 8152
bmsize    | 4096
bmshift   | 15
maxbucket | 12512
highmask  | 16383
lowmask   | 8191
ovflpoint | 28
firstfree | 1204
nmaps     | 1
procid    | 450
spares    | {0,0,0,0,0,0,1,1,1,1,1,1,1,1,3,4,4,4,45,55,58,59,&zwsp;508,567,628,704,1193,1202,1204}
mapp      | {65}
</screen>
     </para>
________________________________________________________-->
     <para>
      <function>hash_metapage_info</function>返回一个<acronym>HASH</acronym>索引的元页中存放的信息。例如：
<screen>
test=# SELECT magic, version, ntuples, ffactor, bsize, bmsize, bmshift,
test-#     maxbucket, highmask, lowmask, ovflpoint, firstfree, nmaps, procid,
test-#     regexp_replace(spares::text, '(,0)*}', '}') as spares,
test-#     regexp_replace(mapp::text, '(,0)*}', '}') as mapp
test-# FROM hash_metapage_info(get_raw_page('con_hash_index', 0));
-[ RECORD 1 ]-------------------------------------------------&zwsp;------------------------------
magic     | 105121344
version   | 4
ntuples   | 500500
ffactor   | 40
bsize     | 8152
bmsize    | 4096
bmshift   | 15
maxbucket | 12512
highmask  | 16383
lowmask   | 8191
ovflpoint | 28
firstfree | 1204
nmaps     | 1
procid    | 450
spares    | {0,0,0,0,0,0,1,1,1,1,1,1,1,1,3,4,4,4,45,55,58,59,&zwsp;508,567,628,704,1193,1202,1204}
mapp      | {65}
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=82fb53af561f766dfe1fa4489b936d75 -->
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

</sect1>
