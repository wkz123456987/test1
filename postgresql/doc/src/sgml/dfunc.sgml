<!-- doc/src/sgml/dfunc.sgml -->

<sect2 id="dfunc">
<!-- pgdoc-cn_start sig_en=a40b497f7e09904a85d32b846d5b8878 sig_cn_org=None source=14.1 
 <title>Compiling and Linking Dynamically-Loaded Functions</title>
________________________________________________________-->
 <title>编译和链接动态载入的函数</title>
<!-- pgdoc-cn_end sig_en=a40b497f7e09904a85d32b846d5b8878 -->

<!-- pgdoc-cn_start sig_en=9589a20763697bcbc3262df1421fa12e sig_cn_org=None source=14.1 
 <para>
  Before you are able to use your
  <productname>PostgreSQL</productname> extension functions written in
  C, they must be compiled and linked in a special way to produce a
  file that can be dynamically loaded by the server.  To be precise, a
  <firstterm>shared library</firstterm> needs to be
  created.<indexterm><primary>shared library</primary></indexterm>

 </para>
________________________________________________________-->
 <para>
  在使用 C 编写的<productname>PostgreSQL</productname>扩展函数之前，必须以一种特殊的方式编译并且链接它们，以便产生一个能被服务器动态载入的文件。简而言之，需要创建一个<firstterm>共享库</firstterm>。<indexterm><primary>共享库</primary></indexterm>

 </para>
<!-- pgdoc-cn_end sig_en=9589a20763697bcbc3262df1421fa12e -->

<!-- pgdoc-cn_start sig_en=8a86bd12b83832127b8832a7d929a2d3 sig_cn_org=None source=14.1 
 <para>
  For information beyond what is contained in this section
  you should read the documentation of your
  operating system, in particular the manual pages for the C compiler,
  <command>cc</command>, and the link editor, <command>ld</command>.
  In addition, the <productname>PostgreSQL</productname> source code
  contains several working examples in the
  <filename>contrib</filename> directory.  If you rely on these
  examples you will make your modules dependent on the availability
  of the <productname>PostgreSQL</productname> source code, however.
 </para>
________________________________________________________-->
 <para>
  超出本节所含内容之外的信息请参考你的操作系统文档，特别是 C 编译器（<command>cc</command>）和链接编辑器（<command>ld</command>）的手册页。另外，<productname>PostgreSQL</productname>源代码的<filename>contrib</filename>目录中包含了一些可以工作的例子。但是，如果你依靠这些例子，也会使你的模块依赖于<productname>PostgreSQL</productname>源码的可用性。
 </para>
<!-- pgdoc-cn_end sig_en=8a86bd12b83832127b8832a7d929a2d3 -->

<!-- pgdoc-cn_start sig_en=68f83e016395bebb887546ca12719674 sig_cn_org=None source=14.1 
 <para>
  Creating shared libraries is generally analogous to linking
  executables: first the source files are compiled into object files,
  then the object files are linked together.  The object files need to
  be created as <firstterm>position-independent code</firstterm>
  (<acronym>PIC</acronym>),<indexterm><primary>PIC</primary></indexterm> which
  conceptually means that they can be placed at an arbitrary location
  in memory when they are loaded by the executable.  (Object files
  intended for executables are usually not compiled that way.)  The
  command to link a shared library contains special flags to
  distinguish it from linking an executable (at least in theory
  &mdash; on some systems the practice is much uglier).
 </para>
________________________________________________________-->
 <para>
  创建共享库通常与链接可执行文件相似：首先源文件被编译成对象文件，然后对象文件被链接起来。对象文件需要被创建为<firstterm>独立位置代码</firstterm>（<acronym>PIC</acronym>），<indexterm><primary>PIC</primary></indexterm>，这在概念上意味着当它们被可执行文件载入时，它们可以被放置在内存中的任意位置（用于可执行文件的对象文件通常不会以那种方式编译）。链接一个共享库的命令会包含特殊标志来把它与链接一个可执行文件区分开（至少在理论上 &mdash; 在某些系统上实际上很丑陋）。
 </para>
<!-- pgdoc-cn_end sig_en=68f83e016395bebb887546ca12719674 -->

<!-- pgdoc-cn_start sig_en=5971583104a6837f5c8d1b80b23857bf sig_cn_org=None source=14.1 
 <para>
  In the following examples we assume that your source code is in a
  file <filename>foo.c</filename> and we will create a shared library
  <filename>foo.so</filename>.  The intermediate object file will be
  called <filename>foo.o</filename> unless otherwise noted.  A shared
  library can contain more than one object file, but we only use one
  here.
 </para>
________________________________________________________-->
 <para>
  在下列例子中，我们假定你的源代码在一个文件<filename>foo.c</filename>中，并且我们将创建一个共享库<filename>foo.so</filename>。除非特别注明，中间的对象文件将被称为<filename>foo.o</filename>。一个共享库能包含多于一个对象文件，但是我们在这里只使用一个。
 </para>
<!-- pgdoc-cn_end sig_en=5971583104a6837f5c8d1b80b23857bf -->

<!--
  Note: Reading GNU Libtool sources is generally a good way of
  figuring out this information.  The methods used within PostgreSQL
  source code are not necessarily ideal.
-->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=f41375587a32bb669b5462e3b28bc55e sig_cn_org=None source=14.1 
    <term>
     <systemitem class="osname">FreeBSD</systemitem>
     <indexterm><primary>FreeBSD</primary><secondary>shared library</secondary></indexterm>
    </term>
________________________________________________________-->
    <term><systemitem class="osname">FreeBSD</systemitem>
    <indexterm><primary>FreeBSD</primary><secondary>共享库</secondary></indexterm></term>
<!-- pgdoc-cn_end sig_en=f41375587a32bb669b5462e3b28bc55e -->
    <listitem>
<!-- pgdoc-cn_start sig_en=264e2843195d7642872ff6bb9994ad18 sig_cn_org=None source=14.1 
     <para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fPIC</option>.  To create shared libraries the compiler
      flag is <option>-shared</option>.
<programlisting>
gcc -fPIC -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
      This is applicable as of version 3.0 of
      <systemitem class="osname">FreeBSD</systemitem>.
     </para>
________________________________________________________-->
     <para>
      用来创建<acronym>PIC</acronym>的编译器标志是<option>-fPIC</option>。要创建共享库，编译器标志是<option>-shared</option>。
<programlisting>
gcc -fPIC -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
      这适用于<systemitem class="osname">FreeBSD</systemitem>从 3.0 开始的版本。
     </para>
<!-- pgdoc-cn_end sig_en=264e2843195d7642872ff6bb9994ad18 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=2082325ba98a908a5575747cc7781f17 sig_cn_org=None source=14.1 
    <term>
     <systemitem class="osname">HP-UX</systemitem>
     <indexterm><primary>HP-UX</primary><secondary>shared library</secondary></indexterm>
    </term>
________________________________________________________-->
    <term><systemitem class="osname">HP-UX</systemitem>
    <indexterm><primary>HP-UX</primary><secondary>共享库</secondary></indexterm></term>
<!-- pgdoc-cn_end sig_en=2082325ba98a908a5575747cc7781f17 -->
    <listitem>
<!-- pgdoc-cn_start sig_en=91e7898f4d767dc24ea40f9df43cd4b6 sig_cn_org=None source=14.1 
     <para>
      The compiler flag of the system compiler to create
      <acronym>PIC</acronym> is <option>+z</option>.  When using
      <application>GCC</application> it's <option>-fPIC</option>. The
      linker flag for shared libraries is <option>-b</option>.  So:
<programlisting>
cc +z -c foo.c
</programlisting>
      or:
<programlisting>
gcc -fPIC -c foo.c
</programlisting>
      and then:
<programlisting>
ld -b -o foo.sl foo.o
</programlisting>
      <systemitem class="osname">HP-UX</systemitem> uses the extension
      <filename>.sl</filename> for shared libraries, unlike most other
      systems.
     </para>
________________________________________________________-->
     <para>
      该系统编译器创建<acronym>PIC</acronym>的编译器标志是<option>+z</option>。当使用<application>GCC</application>自己的<option>-fPIC</option>时。用于共享库的链接器标志是<option>-b</option>。因此：
<programlisting>
cc +z -c foo.c
</programlisting>
      或者：
<programlisting>
gcc -fPIC -c foo.c
</programlisting>
      并且然后：
<programlisting>
ld -b -o foo.sl foo.o
</programlisting>
      和大部分其他系统不同，<systemitem class="osname">HP-UX</systemitem>为共享库使用扩展<filename>.sl</filename>。
     </para>
<!-- pgdoc-cn_end sig_en=91e7898f4d767dc24ea40f9df43cd4b6 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=4b3b78d6ae064b11c5ef9e933e19692a sig_cn_org=None source=14.1 
    <term>
     <systemitem class="osname">Linux</systemitem>
     <indexterm><primary>Linux</primary><secondary>shared library</secondary></indexterm>
    </term>
________________________________________________________-->
    <term><systemitem class="osname">Linux</systemitem>
    <indexterm><primary>Linux</primary><secondary>共享库</secondary></indexterm></term>
<!-- pgdoc-cn_end sig_en=4b3b78d6ae064b11c5ef9e933e19692a -->
    <listitem>
<!-- pgdoc-cn_start sig_en=17645396161bf8d2b0953a10dbc6f6e0 sig_cn_org=None source=14.1 
     <para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fPIC</option>.
      The compiler flag to create a shared library is
      <option>-shared</option>.  A complete example looks like this:
<programlisting>
cc -fPIC -c foo.c
cc -shared -o foo.so foo.o
</programlisting>
     </para>
________________________________________________________-->
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。创建一个共享库的编译器标志是<option>-shared</option>。一个完整的例子看起来像：
<programlisting>
cc -fPIC -c foo.c
cc -shared -o foo.so foo.o
</programlisting>
     </para>
<!-- pgdoc-cn_end sig_en=17645396161bf8d2b0953a10dbc6f6e0 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=2f16d4a477e4f6583f264fa289bdbe6b sig_cn_org=None source=14.1 
    <term>
     <systemitem class="osname">macOS</systemitem>
     <indexterm><primary>macOS</primary><secondary>shared library</secondary></indexterm>
    </term>
________________________________________________________-->
    <term><systemitem class="osname">macOS</systemitem>
    <indexterm><primary>macOS</primary><secondary>共享库</secondary></indexterm></term>
<!-- pgdoc-cn_end sig_en=2f16d4a477e4f6583f264fa289bdbe6b -->
    <listitem>
<!-- pgdoc-cn_start sig_en=c2ea97929b81e3a26834c824c8956b27 sig_cn_org=None source=14.1 
     <para>
      Here is an example.  It assumes the developer tools are installed.
<programlisting>
cc -c foo.c
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
</programlisting>
     </para>
________________________________________________________-->
     <para>
      这里是一个例子。它假定安装了开发者工具。
<programlisting>
cc -c foo.c
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
</programlisting>
     </para>
<!-- pgdoc-cn_end sig_en=c2ea97929b81e3a26834c824c8956b27 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=23f820c5945556ca57a7902481766248 sig_cn_org=None source=14.1 
    <term>
     <systemitem class="osname">NetBSD</systemitem>
     <indexterm><primary>NetBSD</primary><secondary>shared library</secondary></indexterm>
    </term>
________________________________________________________-->
    <term><systemitem class="osname">NetBSD</systemitem>
    <indexterm><primary>NetBSD</primary><secondary>共享库</secondary></indexterm></term>
<!-- pgdoc-cn_end sig_en=23f820c5945556ca57a7902481766248 -->
    <listitem>
<!-- pgdoc-cn_start sig_en=9f1868781f1fe41c2a6efa16bdc2e494 sig_cn_org=None source=14.1 
     <para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fPIC</option>.  For <acronym>ELF</acronym> systems, the
      compiler with the flag <option>-shared</option> is used to link
      shared libraries.  On the older non-ELF systems, <literal>ld
      -Bshareable</literal> is used.
<programlisting>
gcc -fPIC -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
________________________________________________________-->
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-fPIC</option>。对于<acronym>ELF</acronym>系统，带着标志<option>-shared</option>的编译器被用来链接共享库。在旧的非 ELF 系统上，<literal>ld -Bshareable</literal>会被使用。
<programlisting>
gcc -fPIC -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
<!-- pgdoc-cn_end sig_en=9f1868781f1fe41c2a6efa16bdc2e494 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=863b36a83b2f9ac03bf45ac3d3840d9c sig_cn_org=None source=14.1 
    <term>
     <systemitem class="osname">OpenBSD</systemitem>
     <indexterm><primary>OpenBSD</primary><secondary>shared library</secondary></indexterm>
    </term>
________________________________________________________-->
    <term><systemitem class="osname">OpenBSD</systemitem>
    <indexterm><primary>OpenBSD</primary><secondary>共享库</secondary></indexterm></term>
<!-- pgdoc-cn_end sig_en=863b36a83b2f9ac03bf45ac3d3840d9c -->
    <listitem>
<!-- pgdoc-cn_start sig_en=fd2c08170f5364dfa82baf006fbe48d4 sig_cn_org=None source=14.1 
     <para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-fPIC</option>.  <literal>ld -Bshareable</literal> is
      used to link shared libraries.
<programlisting>
gcc -fPIC -c foo.c
ld -Bshareable -o foo.so foo.o
</programlisting>
     </para>
________________________________________________________-->
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-fPIC</option>。<literal>ld -Bshareable</literal>被用来链接共享库。
<programlisting>
gcc -fPIC -c foo.c
ld -Bshareable -o foo.so foo.o
</programlisting>
     </para>
<!-- pgdoc-cn_end sig_en=fd2c08170f5364dfa82baf006fbe48d4 -->
    </listitem>
   </varlistentry>

   <varlistentry>
<!-- pgdoc-cn_start sig_en=c34e992478f91800c447ea65fb268c52 sig_cn_org=None source=14.1 
    <term>
     <systemitem class="osname">Solaris</systemitem>
     <indexterm><primary>Solaris</primary><secondary>shared library</secondary></indexterm>
    </term>
________________________________________________________-->
    <term><systemitem class="osname">Solaris</systemitem>
    <indexterm><primary>Solaris</primary><secondary>共享库</secondary></indexterm></term>
<!-- pgdoc-cn_end sig_en=c34e992478f91800c447ea65fb268c52 -->
    <listitem>
<!-- pgdoc-cn_start sig_en=75027a059bafc8753239efb5987e6a44 sig_cn_org=None source=14.1 
     <para>
      The compiler flag to create <acronym>PIC</acronym> is
      <option>-KPIC</option> with the Sun compiler and
      <option>-fPIC</option> with <application>GCC</application>.  To
      link shared libraries, the compiler option is
      <option>-G</option> with either compiler or alternatively
      <option>-shared</option> with <application>GCC</application>.
<programlisting>
cc -KPIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      or
<programlisting>
gcc -fPIC -c foo.c
gcc -G -o foo.so foo.o
</programlisting>
     </para>
________________________________________________________-->
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-KPIC</option>（用于 Sun 编译器）以及<option>-fPIC</option>（用于<application>GCC</application>）。要链接共享库，编译器选项对几种编译器都是<option>-G</option>或者是对<application>GCC</application>使用<option>-shared</option>。
<programlisting>
cc -KPIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      or
<programlisting>
gcc -fPIC -c foo.c
gcc -G -o foo.so foo.o
</programlisting>
     </para>
<!-- pgdoc-cn_end sig_en=75027a059bafc8753239efb5987e6a44 -->
    </listitem>
   </varlistentry>

  </variablelist>

 <tip>
<!-- pgdoc-cn_start sig_en=fb0c5a8021200152bb62da37695e0574 sig_cn_org=None source=14.1 
  <para>
   If this is too complicated for you, you should consider using
   <ulink url="https://www.gnu.org/software/libtool/">
   <productname>GNU Libtool</productname></ulink>,
   which hides the platform differences behind a uniform interface.
  </para>
________________________________________________________-->
  <para>
   如果这对你来说太复杂，你应该考虑使用<ulink url="https://www.gnu.org/software/libtool/">
   <productname>GNU Libtool</productname></ulink>，它会用一个统一的接口隐藏平台差异。
  </para>
<!-- pgdoc-cn_end sig_en=fb0c5a8021200152bb62da37695e0574 -->
 </tip>

<!-- pgdoc-cn_start sig_en=1afa248912ec64c8e07e64566a8600eb sig_cn_org=None source=14.1 
 <para>
  The resulting shared library file can then be loaded into
  <productname>PostgreSQL</productname>.  When specifying the file name
  to the <command>CREATE FUNCTION</command> command, one must give it
  the name of the shared library file, not the intermediate object file.
  Note that the system's standard shared-library extension (usually
  <literal>.so</literal> or <literal>.sl</literal>) can be omitted from
  the <command>CREATE FUNCTION</command> command, and normally should
  be omitted for best portability.
 </para>
________________________________________________________-->
 <para>
  结果的共享库文件接着就可以被载入到<productname>PostgreSQL</productname>。当把文件名指定给<command>CREATE FUNCTION</command>命令时，必须把共享库文件的名字给它，而不是中间的对象文件。注意系统的标准共享库扩展（通常是<literal>.so</literal>或者<literal>.sl</literal>）在<command>CREATE FUNCTION</command>命令中可以被忽略，并且通常为了最好的可移植性应该被忽略。
 </para>
<!-- pgdoc-cn_end sig_en=1afa248912ec64c8e07e64566a8600eb -->

<!-- pgdoc-cn_start sig_en=43cb6612b0e4e350bca65a3214621fec sig_cn_org=None source=14.1 
 <para>
  Refer back to <xref linkend="xfunc-c-dynload"/> about where the
  server expects to find the shared library files.
 </para>
________________________________________________________-->
 <para>
  服务器会期望在哪里寻找共享库文件请参考<xref linkend="xfunc-c-dynload"/>。
 </para>
<!-- pgdoc-cn_end sig_en=43cb6612b0e4e350bca65a3214621fec -->

<!--
Under AIX, object files are compiled normally but building the shared
library requires a couple of steps.  First, create the object file:
.nf
cc <other flags> -c foo.c
.fi
You must then create a symbol \*(lqexports\*(rq file for the object
file:
.nf
mkldexport foo.o `pwd` &gt; foo.exp
.fi
Finally, you can create the shared library:
.nf
ld <other flags> -H512 -T512 -o foo.so -e _nostart \e
   -bI:.../lib/postgres.exp -bE:foo.exp foo.o \e
   -lm -lc 2>/dev/null
.fi
  -->

</sect2>
