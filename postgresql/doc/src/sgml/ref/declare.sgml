<!--
doc/src/sgml/ref/declare.sgml
PostgreSQL documentation
-->

<refentry id="sql-declare">
<!-- pgdoc-cn_start sig_en=2d5d39042bd6926afa2b4116b36f86de sig_cn_org=None source=14.1 
 <indexterm zone="sql-declare">
  <primary>DECLARE</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-declare">
  <primary>DECLARE</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=2d5d39042bd6926afa2b4116b36f86de -->

<!-- pgdoc-cn_start sig_en=18a263e620c50d7ed1e26ffb740078c7 sig_cn_org=None source=14.1 
 <indexterm zone="sql-declare">
  <primary>cursor</primary>
  <secondary>DECLARE</secondary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-declare">
  <primary>cursor</primary>
  <secondary>DECLARE</secondary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=18a263e620c50d7ed1e26ffb740078c7 -->

 <refmeta>
  <refentrytitle>DECLARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=47af53d33e3d2a6b1a5f1978d43b0aa8 sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>DECLARE</refname>
  <refpurpose>define a cursor</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>DECLARE</refname>
  <refpurpose>定义一个游标</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=47af53d33e3d2a6b1a5f1978d43b0aa8 -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=3780a141d7517db7b38c10bdf917ceaf sig_cn_org=None source=14.1 
<synopsis>
DECLARE <replaceable class="parameter">name</replaceable> [ BINARY ] [ ASENSITIVE | INSENSITIVE ] [ [ NO ] SCROLL ]
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR <replaceable class="parameter">query</replaceable>
</synopsis>
________________________________________________________-->
<synopsis>
DECLARE <replaceable class="parameter">name</replaceable> [ BINARY ] [ ASENSITIVE | INSENSITIVE ] [ [ NO ] SCROLL ]
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR <replaceable class="parameter">query</replaceable>
</synopsis>
<!-- pgdoc-cn_end sig_en=3780a141d7517db7b38c10bdf917ceaf -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=56b0a35a057f4244e7d3568ef5e18f80 sig_cn_org=None source=14.1 
  <para>
   <command>DECLARE</command> allows a user to create cursors, which
   can be used to retrieve
   a small number of rows at a time out of a larger query.
   After the cursor is created, rows are fetched from it using
   <link linkend="sql-fetch"><command>FETCH</command></link>.
  </para>
________________________________________________________-->
  <para>
   <command>DECLARE</command>允许用户创建游标，游标可以被用来在大型查询暂停时检索少量的行。
   游标被创建后，可以用<link linkend="sql-fetch"><command>FETCH</command></link>从中取得行。
  </para>
<!-- pgdoc-cn_end sig_en=56b0a35a057f4244e7d3568ef5e18f80 -->

  <note>
<!-- pgdoc-cn_start sig_en=104798136bd8735d54b25a3f37d17549 sig_cn_org=None source=14.1 
   <para>
    This page describes usage of cursors at the SQL command level.
    If you are trying to use cursors inside a <application>PL/pgSQL</application>
    function, the rules are different &mdash;
    see <xref linkend="plpgsql-cursors"/>.
   </para>
________________________________________________________-->
   <para>
    这个页面描述在 SQL 命令层面上游标的用法。如果想要在
    <application>PL/pgSQL</application>函数中使用游标，其规则是不同的
     &mdash; 详见<xref linkend="plpgsql-cursors"/>。
   </para>
<!-- pgdoc-cn_end sig_en=104798136bd8735d54b25a3f37d17549 -->
  </note>
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=439a2d65a7478b819aa542c97d4d38d0 sig_cn_org=None source=14.1 
     <para>
      The name of the cursor to be created.
     </para>
________________________________________________________-->
     <para>
      要创建的游标的名称。
     </para>
<!-- pgdoc-cn_end sig_en=439a2d65a7478b819aa542c97d4d38d0 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BINARY</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=5f49ca2d855e35c48ad4ec12dfe157fe sig_cn_org=None source=14.1 
     <para>
      Causes the cursor to return data in binary rather than in text format.
     </para>
________________________________________________________-->
     <para>
      让游标返回二进制数据而不是返回文本格式数据。
     </para>
<!-- pgdoc-cn_end sig_en=5f49ca2d855e35c48ad4ec12dfe157fe -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ASENSITIVE</literal></term>
    <term><literal>INSENSITIVE</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=a22037816f8c63aafd94d9f662e7e979 sig_cn_org=None source=14.1 
     <para>
      Cursor sensitivity determines whether changes to the data underlying the
      cursor, done in the same transaction, after the cursor has been
      declared, are visible in the cursor.  <literal>INSENSITIVE</literal>
      means they are not visible, <literal>ASENSITIVE</literal> means the
      behavior is implementation-dependent.  A third behavior,
      <literal>SENSITIVE</literal>, meaning that such changes are visible in
      the cursor, is not available in <productname>PostgreSQL</productname>.
      In <productname>PostgreSQL</productname>, all cursors are insensitive;
      so these key words have no effect and are only accepted for
      compatibility with the SQL standard.
     </para>
________________________________________________________-->
     <para>
      游标敏感性决定了是否更改为游标下面的数据，在同一事务中完成，当游标被声明后，在游标中可见。
      <literal>INSENSITIVE</literal> 表示它们不可见，<literal>ASENSITIVE</literal>表示行为是实现相关的。
      第三个行为，<literal>SENSITIVE</literal>，意味着此类更改在游标中可见，但在<productname>PostgreSQL</productname>中不可用。
      在<productname>PostgreSQL</productname>中，所有游标都不敏感;因此这些关键字没有任何影响，并且只在兼容SQL标准时才被接受。
     </para>
<!-- pgdoc-cn_end sig_en=a22037816f8c63aafd94d9f662e7e979 -->

<!-- pgdoc-cn_start sig_en=bd37d696eeceb5db2a896350a1a88f95 sig_cn_org=None source=14.1 
     <para>
      Specifying <literal>INSENSITIVE</literal> together with <literal>FOR
      UPDATE</literal> or <literal>FOR SHARE</literal> is an error.
     </para>
________________________________________________________-->
     <para>
      把 <literal>INSENSITIVE</literal> 与 <literal>FOR UPDATE</literal> 或 <literal>FOR SHARE</literal> 一起指定，是一个错误。
     </para>
<!-- pgdoc-cn_end sig_en=bd37d696eeceb5db2a896350a1a88f95 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SCROLL</literal></term>
    <term><literal>NO SCROLL</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=2e10a04e2e5002ebd81cacb0231c7748 sig_cn_org=None source=14.1 
     <para><literal>SCROLL</literal> specifies that the cursor can be used
      to retrieve rows in a nonsequential fashion (e.g.,
      backward). Depending upon the complexity of the query's
      execution plan, specifying <literal>SCROLL</literal> might impose
      a performance penalty on the query's execution time.
      <literal>NO SCROLL</literal> specifies that the cursor cannot be
      used to retrieve rows in a nonsequential fashion.  The default is to
      allow scrolling in some cases; this is not the same as specifying
      <literal>SCROLL</literal>. See <xref linkend="sql-declare-notes"/>
      below for details.
     </para>
________________________________________________________-->
     <para><literal>SCROLL</literal>指定游标可以用非顺序（例如，反向）
     的方式从中检索行。根据查询的执行计划的复杂度，指定
     <literal>SCROLL</literal>可能导致查询执行时间上的性能损失。
      <literal>NO SCROLL</literal>指定游标不能以非顺序的方式从中检索
      行。默认是允许在某些情况下滚动，但这和指定
      <literal>SCROLL</literal>不完全相同。详情请见
      <xref linkend="sql-declare-notes"/>。
     </para>
<!-- pgdoc-cn_end sig_en=2e10a04e2e5002ebd81cacb0231c7748 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH HOLD</literal></term>
    <term><literal>WITHOUT HOLD</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=42c9a991360d04b203882f187b217153 sig_cn_org=None source=14.1 
     <para><literal>WITH HOLD</literal> specifies that the cursor can
      continue to be used after the transaction that created it
      successfully commits.  <literal>WITHOUT HOLD</literal> specifies
      that the cursor cannot be used outside of the transaction that
      created it. If neither <literal>WITHOUT HOLD</literal> nor
      <literal>WITH HOLD</literal> is specified, <literal>WITHOUT
      HOLD</literal> is the default.
     </para>
________________________________________________________-->
     <para><literal>WITH HOLD</literal>指定该游标在创建它的事务提交
     之后还能被继续使用。<literal>WITHOUT HOLD</literal>指定该游标
     不能在创建它的事务之外使用。如果两者都没有指定，则默认为
     <literal>WITHOUT HOLD</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=42c9a991360d04b203882f187b217153 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">query</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=20f92015746b80a801b2fdbd6270800b sig_cn_org=None source=14.1 
     <para>
      A <link linkend="sql-select"><command>SELECT</command></link> or
      <link linkend="sql-values"><command>VALUES</command></link> command
      which will provide the rows to be returned by the cursor.
     </para>
________________________________________________________-->
     <para>
      用于提供该游标返回的行的<link linkend="sql-select"><command>SELECT</command></link>或者<link linkend="sql-values"><command>VALUES</command></link>命令。
     </para>
<!-- pgdoc-cn_end sig_en=20f92015746b80a801b2fdbd6270800b -->
    </listitem>
   </varlistentry>
  </variablelist>

<!-- pgdoc-cn_start sig_en=76dc93e8402cd7a278f1afaf2191beb4 sig_cn_org=None source=14.1 
  <para>
   The key words <literal>ASENSITIVE</literal>, <literal>BINARY</literal>,
   <literal>INSENSITIVE</literal>, and <literal>SCROLL</literal> can
   appear in any order.
  </para>
________________________________________________________-->
  <para>
   关键词<literal>ASENSITIVE</literal>、<literal>BINARY</literal>、<literal>INSENSITIVE</literal>和<literal>SCROLL</literal>可以以任意顺序出现。
  </para>
<!-- pgdoc-cn_end sig_en=76dc93e8402cd7a278f1afaf2191beb4 -->
 </refsect1>

 <refsect1 id="sql-declare-notes" xreflabel="Notes">
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=d071687b8c42ad9d949f561127956450 sig_cn_org=None source=14.1 
  <para>
   Normal cursors return data in text format, the same as a
   <command>SELECT</command> would produce.  The <literal>BINARY</literal> option
   specifies that the cursor should return data in binary format.
   This reduces conversion effort for both the server and client,
   at the cost of more programmer effort to deal with platform-dependent
   binary data formats.
   As an example, if a query returns a value of one from an integer column,
   you would get a string of <literal>1</literal> with a default cursor,
   whereas with a binary cursor you would get
   a 4-byte field containing the internal representation of the value
   (in big-endian byte order).
  </para>
________________________________________________________-->
  <para>
   普通游标以文本格式返回数据，这和<command>SELECT</command>产生的数据一样。
   <literal>BINARY</literal>选项指定游标应该以二进制格式返回数据。这减少了服务
   器和客户端的转换负担，但程序员需要付出更多工作来处理与平台相关的二进制
   数据格式。例如，如果一个查询从一个整数列中返回一个值一，用一个默认游标
   将得到一个字符串<literal>1</literal>，而使用一个二进制游标将得到该值的四字节
   内部表示（big-endian 大端字节顺序）。
  </para>
<!-- pgdoc-cn_end sig_en=d071687b8c42ad9d949f561127956450 -->

<!-- pgdoc-cn_start sig_en=922cdf7e29e3d98ea9155dd0e51fb975 sig_cn_org=None source=14.1 
  <para>
   Binary cursors should be used carefully.  Many applications,
   including <application>psql</application>, are not prepared to
   handle binary cursors and expect data to come back in the text
   format.
  </para>
________________________________________________________-->
  <para>
   使用二进制游标时应该小心。很多应用（包括
   <application>psql</application>）还没有准备好处理二进制游标，
   它们仍然期待数据以文本格式到来。
  </para>
<!-- pgdoc-cn_end sig_en=922cdf7e29e3d98ea9155dd0e51fb975 -->

  <note>
<!-- pgdoc-cn_start sig_en=ae06504c9271a8bf8e09901000e49021 sig_cn_org=None source=14.1 
   <para>
    When the client application uses the <quote>extended query</quote> protocol
    to issue a <command>FETCH</command> command, the Bind protocol message
    specifies whether data is to be retrieved in text or binary format.
    This choice overrides the way that the cursor is defined.  The concept
    of a binary cursor as such is thus obsolete when using extended query
    protocol &mdash; any cursor can be treated as either text or binary.
   </para>
________________________________________________________-->
   <para>
    当客户端应用使用<quote>扩展查询</quote>协议发出一个
    <command>FETCH</command>命令，绑定协议消息会指定使用文本还是
    二进制格式检索数据。这种选择会覆盖定义游标时指定的方式。因此
    在使用扩展查询协议时，这样一个二进制游标的概念实际是被废弃的
    &mdash; 任何游标都可以被视作文本或者二进制。
   </para>
<!-- pgdoc-cn_end sig_en=ae06504c9271a8bf8e09901000e49021 -->
  </note>

<!-- pgdoc-cn_start sig_en=9a7821615ef03149d46cadcafd5f969e sig_cn_org=None source=14.1 
   <para>
    Unless <literal>WITH HOLD</literal> is specified, the cursor
    created by this command can only be used within the current
    transaction.  Thus, <command>DECLARE</command> without <literal>WITH
    HOLD</literal> is useless outside a transaction block: the cursor would
    survive only to the completion of the statement.  Therefore
    <productname>PostgreSQL</productname> reports an error if such a
    command is used outside a transaction block.
    Use
    <link linkend="sql-begin"><command>BEGIN</command></link> and
    <link linkend="sql-commit"><command>COMMIT</command></link>
    (or <link linkend="sql-rollback"><command>ROLLBACK</command></link>)
    to define a transaction block.
   </para>
________________________________________________________-->
   <para>
    除非指定了<literal>WITH HOLD</literal>，这个命令创建的游标只能在当前事务中使用。
    因此，没有<literal>WITH HOLD</literal>的<command>DECLARE</command>在事务块外是没有用的：游标只会生存到该语句结束。
    因此如果这种命令在事务块之外被使用，<productname>PostgreSQL</productname>会报告一个错误。
    定义事务块需要使用<link linkend="sql-begin"><command>BEGIN</command></link>和<link linkend="sql-commit"><command>COMMIT</command></link>（或者<link linkend="sql-rollback"><command>ROLLBACK</command></link>）。
   </para>
<!-- pgdoc-cn_end sig_en=9a7821615ef03149d46cadcafd5f969e -->

<!-- pgdoc-cn_start sig_en=58574adc73f1e029e5c810c461850600 sig_cn_org=None source=14.1 
   <para>
    If <literal>WITH HOLD</literal> is specified and the transaction
    that created the cursor successfully commits, the cursor can
    continue to be accessed by subsequent transactions in the same
    session.  (But if the creating transaction is aborted, the cursor
    is removed.)  A cursor created with <literal>WITH HOLD</literal>
    is closed when an explicit <command>CLOSE</command> command is
    issued on it, or the session ends.  In the current implementation,
    the rows represented by a held cursor are copied into a temporary
    file or memory area so that they remain available for subsequent
    transactions.
   </para>
________________________________________________________-->
   <para>
    如果指定了<literal>WITH HOLD</literal>并且创建游标的事务
    成功提交，在同一个会话中的后续事务中还能够继续访问该游标（
    但是如果创建事务被中止，游标会被移除）。一个用
    <literal>WITH HOLD</literal>创建的游标可以用一个显式的
    <command>CLOSE</command>命令关闭，或者会话结束时它
    也会被关闭。在当前的实现中，由一个被保持游标表示的行会被复
    制到一个临时文件或者内存区域中，这样它们才会在后续事务中保
    持可用。
   </para>
<!-- pgdoc-cn_end sig_en=58574adc73f1e029e5c810c461850600 -->

<!-- pgdoc-cn_start sig_en=b68747261f243a1d3444d55503361736 sig_cn_org=None source=14.1 
   <para>
    <literal>WITH HOLD</literal> may not be specified when the query
    includes <literal>FOR UPDATE</literal> or <literal>FOR SHARE</literal>.
   </para>
________________________________________________________-->
   <para>
    当查询包括<literal>FOR UPDATE</literal>或<literal>FOR SHARE</literal>时，
    不能指定<literal>WITH HOLD</literal>。
   </para>
<!-- pgdoc-cn_end sig_en=b68747261f243a1d3444d55503361736 -->

<!-- pgdoc-cn_start sig_en=59865272e4ff844edac5523720745223 sig_cn_org=None source=14.1 
   <para>
    The <literal>SCROLL</literal> option should be specified when defining a
    cursor that will be used to fetch backwards.  This is required by
    the SQL standard.  However, for compatibility with earlier
    versions, <productname>PostgreSQL</productname> will allow
    backward fetches without <literal>SCROLL</literal>, if the cursor's query
    plan is simple enough that no extra overhead is needed to support
    it. However, application developers are advised not to rely on
    using backward fetches from a cursor that has not been created
    with <literal>SCROLL</literal>.  If <literal>NO SCROLL</literal> is
    specified, then backward fetches are disallowed in any case.
   </para>
________________________________________________________-->
   <para>
    在定义一个将被反向取元组的游标时，应该指定<literal>SCROLL</literal>
    选项。这是 SQL 标准所要求的。不过，为了和早期版本兼容，
    如果游标的查询计划足够简单到支持它不需要额外的开销，
    <productname>PostgreSQL</productname>会允许在没有
    <literal>SCROLL</literal>的情况下反向取元组。不过，建议应用开发者
    不要依赖于从没有用<literal>SCROLL</literal>创建的游标中反向取
    元组。如果指定了<literal>NO SCROLL</literal>，那么任何情况下都不
    允许反向取元组。
   </para>
<!-- pgdoc-cn_end sig_en=59865272e4ff844edac5523720745223 -->

<!-- pgdoc-cn_start sig_en=6c8b113b68285f50a252a029039ef809 sig_cn_org=None source=14.1 
   <para>
    Backward fetches are also disallowed when the query
    includes <literal>FOR UPDATE</literal> or <literal>FOR SHARE</literal>; therefore
    <literal>SCROLL</literal> may not be specified in this case.
   </para>
________________________________________________________-->
   <para>
    当查询包括<literal>FOR UPDATE</literal>或<literal>FOR SHARE</literal>时，
    也不允许反向取元组。因此在这种情况下不能指定
    <literal>SCROLL</literal>。
   </para>
<!-- pgdoc-cn_end sig_en=6c8b113b68285f50a252a029039ef809 -->

   <caution>
<!-- pgdoc-cn_start sig_en=928c2d12b93ffef948974a5e57e9affb sig_cn_org=None source=14.1 
    <para>
     Scrollable cursors may give unexpected
     results if they invoke any volatile functions (see <xref
     linkend="xfunc-volatility"/>).  When a previously fetched row is
     re-fetched, the functions might be re-executed, perhaps leading to
     results different from the first time.  It's best to
     specify <literal>NO SCROLL</literal> for a query involving volatile
     functions.  If that is not practical, one workaround
     is to declare the cursor <literal>SCROLL WITH HOLD</literal> and commit the
     transaction before reading any rows from it.  This will force the
     entire output of the cursor to be materialized in temporary storage,
     so that volatile functions are executed exactly once for each row.
    </para>
________________________________________________________-->
    <para>
     如果可滚动游标调用了任何不稳定的函数（见<xref linkend="xfunc-volatility"/>），它们可能给出预期之外的结果。
     当重新取得一个之前取得过的行时，那些函数会被重新执行，这可能导致得到与第一次不同的结果。
     它最好指定<literal>NO SCROLL</literal>对频繁调用的易变函数。
     如果那样不可行，一个变通方法是，声明游标为<literal>SCROLL WITH HOLD</literal>并且在从其中读任何行之前提交事务。
     这将强制该游标的整个输出被物化在临时存储中，这样针对每一行只会执行一次不稳定函数。
    </para>
<!-- pgdoc-cn_end sig_en=928c2d12b93ffef948974a5e57e9affb -->
   </caution>

<!-- pgdoc-cn_start sig_en=6987e252a25d826adc1b7d185552bb25 sig_cn_org=None source=14.1 
   <para>
    If the cursor's query includes <literal>FOR UPDATE</literal> or <literal>FOR
    SHARE</literal>, then returned rows are locked at the time they are first
    fetched, in the same way as for a regular
    <link linkend="sql-select"><command>SELECT</command></link> command with
    these options.
    In addition, the returned rows will be the most up-to-date versions.
   </para>
________________________________________________________-->
   <para>
    如果游标的查询包括<literal>FOR UPDATE</literal>或者<literal>FOR SHARE</literal>，那么被返回的行会在它们第一次被取得时被锁定，这和带有这些选项的常规<link linkend="sql-select"><command>SELECT</command></link>命令一样。
    此外，被返回的行将是最新的版本。
   </para>
<!-- pgdoc-cn_end sig_en=6987e252a25d826adc1b7d185552bb25 -->

   <caution>
<!-- pgdoc-cn_start sig_en=8ecfc0f6921abb7ce064089ae22a1643 sig_cn_org=None source=14.1 
    <para>
     It is generally recommended to use <literal>FOR UPDATE</literal> if the cursor
     is intended to be used with <command>UPDATE ... WHERE CURRENT OF</command> or
     <command>DELETE ... WHERE CURRENT OF</command>.  Using <literal>FOR UPDATE</literal>
     prevents other sessions from changing the rows between the time they are
     fetched and the time they are updated.  Without <literal>FOR UPDATE</literal>,
     a subsequent <literal>WHERE CURRENT OF</literal> command will have no effect if
     the row was changed since the cursor was created.
    </para>
________________________________________________________-->
    <para>
     如果游标要和<command>UPDATE ... WHERE CURRENT OF</command>或者
     <command>DELETE ... WHERE CURRENT OF</command>一起使用，通常推荐
     使用<literal>FOR UPDATE</literal>。使用<literal>FOR UPDATE</literal>可以
     阻止其他会话在行被取得和被更新之间修改行。如果没有
     <literal>FOR UPDATE</literal>，当行在游标创建后被更改后，一个后续的
     <literal>WHERE CURRENT OF</literal>命令将不会产生效果。
    </para>
<!-- pgdoc-cn_end sig_en=8ecfc0f6921abb7ce064089ae22a1643 -->

<!-- pgdoc-cn_start sig_en=ddec916cc174e82289e905666fa5532a sig_cn_org=None source=14.1 
    <para>
     Another reason to use <literal>FOR UPDATE</literal> is that without it, a
     subsequent <literal>WHERE CURRENT OF</literal> might fail if the cursor query
     does not meet the SQL standard's rules for being <quote>simply
     updatable</quote> (in particular, the cursor must reference just one table
     and not use grouping or <literal>ORDER BY</literal>).  Cursors
     that are not simply updatable might work, or might not, depending on plan
     choice details; so in the worst case, an application might work in testing
     and then fail in production.  If <literal>FOR UPDATE</literal> is
     specified, the cursor is guaranteed to be updatable.
    </para>
________________________________________________________-->
    <para>
     另一个使用<literal>FOR UPDATE</literal>的原因是，如果没有它，当游标查询不符合
     SQL 标准的<quote>简单可更新</quote>规则时，后续的
     <literal>WHERE CURRENT OF</literal>可能会失败（特别地，该游标必须只引用一个
     表并且没有使用分组或者<literal>ORDER BY</literal>）。不是简单可更新的游标可能
     成功也可能不成功，这取决于计划选择的细节。因此在最坏的情况下，应用可能会
     在测试时成功但是在生产中失败。如果指定了<literal>FOR UPDATE</literal>，
	 则保证游标是可更新的。
    </para>
<!-- pgdoc-cn_end sig_en=ddec916cc174e82289e905666fa5532a -->

<!-- pgdoc-cn_start sig_en=9534004649dceb24406c541c058a8aac sig_cn_org=None source=14.1 
    <para>
     The main reason not to use <literal>FOR UPDATE</literal> with <literal>WHERE
     CURRENT OF</literal> is if you need the cursor to be scrollable, or to be
     isolated from concurrent updates (that is, continue to show the old
     data).  If this is a requirement, pay close heed to the caveats shown
     above.
    </para>
________________________________________________________-->
    <para>
     不把<literal>FOR UPDATE</literal>和<literal>WHERE CURRENT OF</literal>一起用的主要原因是，需要游标时可滚动的，或者与当前的更新隔离（也就是说，继续显示旧的数据）。
     如果这是你的需求，应密切关注安上述警示。
    </para>
<!-- pgdoc-cn_end sig_en=9534004649dceb24406c541c058a8aac -->
   </caution>

<!-- pgdoc-cn_start sig_en=169fa45ec3dbc0ddc49a89f8e9941dc8 sig_cn_org=None source=14.1 
   <para>
    The SQL standard only makes provisions for cursors in embedded
    <acronym>SQL</acronym>.  The <productname>PostgreSQL</productname>
    server does not implement an <command>OPEN</command> statement for
    cursors; a cursor is considered to be open when it is declared.
    However, <application>ECPG</application>, the embedded SQL
    preprocessor for <productname>PostgreSQL</productname>, supports
    the standard SQL cursor conventions, including those involving
    <command>DECLARE</command> and <command>OPEN</command> statements.
   </para>
________________________________________________________-->
   <para>
    SQL 标准只对嵌入式<acronym>SQL</acronym>中的游标做出了规定。
    <productname>PostgreSQL</productname>服务器没有为游标实现
    <command>OPEN</command>语句。当游标被声明时就被认为已经
    被打开。不过，<application>ECPG</application>（
    <productname>PostgreSQL</productname>的嵌入式 SQL 预处理器）
    支持标准 SQL 游标习惯，包括那些<command>DECLARE</command>
    和<command>OPEN</command>语句。
   </para>
<!-- pgdoc-cn_end sig_en=169fa45ec3dbc0ddc49a89f8e9941dc8 -->

<!-- pgdoc-cn_start sig_en=5c9b2a89bfbdfde61dd40c31b9e1dbcf sig_cn_org=None source=14.1 
   <para>
    You can see all available cursors by querying the <link
    linkend="view-pg-cursors"><structname>pg_cursors</structname></link>
    system view.
   </para>
________________________________________________________-->
   <para>
    你可以通过查询<link
    linkend="view-pg-cursors"><structname>pg_cursors</structname></link>
    系统视图可以看到所有可用的游标。
   </para>
<!-- pgdoc-cn_end sig_en=5c9b2a89bfbdfde61dd40c31b9e1dbcf -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=57f3d26e86761f7aa1ccb507fa9821ca sig_cn_org=None source=14.1 
  <para>
   To declare a cursor:
<programlisting>
DECLARE liahona CURSOR FOR SELECT * FROM films;
</programlisting>
   See <xref linkend="sql-fetch"/> for more
   examples of cursor usage.
  </para>
________________________________________________________-->
  <para>
   声明一个游标：
<programlisting>
DECLARE liahona CURSOR FOR SELECT * FROM films;
</programlisting>
   更多游标的例子请见<xref linkend="sql-fetch"/>。
  </para>
<!-- pgdoc-cn_end sig_en=57f3d26e86761f7aa1ccb507fa9821ca -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=2dffa3f70aa9b3c494fb9c5175d0d01c sig_cn_org=None source=14.1 
  <para>
   The SQL standard allows cursors only in embedded
   <acronym>SQL</acronym> and in modules. <productname>PostgreSQL</productname>
   permits cursors to be used interactively.
  </para>
________________________________________________________-->
  <para>
   SQL 标准只允许在嵌入式<acronym>SQL</acronym>和模块中使用游标。
   <productname>PostgreSQL</productname>允许以交互的方式使用游标。
  </para>
<!-- pgdoc-cn_end sig_en=2dffa3f70aa9b3c494fb9c5175d0d01c -->

<!-- pgdoc-cn_start sig_en=0b6eb9a6539063a2969e19ed914df2ba sig_cn_org=None source=14.1 
  <para>
   According to the SQL standard, changes made to insensitive cursors by
   <literal>UPDATE ... WHERE CURRENT OF</literal> and <literal>DELETE
   ... WHERE CURRENT OF</literal> statements are visible in that same
   cursor.  <productname>PostgreSQL</productname> treats these statements like
   all other data changing statements in that they are not visible in
   insensitive cursors.
  </para>
________________________________________________________-->
  <para>
   根据SQL标准，由<literal>UPDATE ... WHERE CURRENT OF</literal> 和 <literal>DELETE ... WHERE CURRENT OF</literal> 语句对不敏感游标做出的改变，在同一游标中是可见的。 
   <productname>PostgreSQL</productname> 对待这些语句就像所有其他数据更改语句，因为它们在不敏感游标里是不可见的。
  </para>
<!-- pgdoc-cn_end sig_en=0b6eb9a6539063a2969e19ed914df2ba -->

<!-- pgdoc-cn_start sig_en=1caced59e73add21e5d8323d75ce16a1 sig_cn_org=None source=14.1 
  <para>
   Binary cursors are a <productname>PostgreSQL</productname>
   extension.
  </para>
________________________________________________________-->
  <para>
   二进制游标是一种<productname>PostgreSQL</productname>
   扩展。
  </para>
<!-- pgdoc-cn_end sig_en=1caced59e73add21e5d8323d75ce16a1 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>另见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-close"/></member>
   <member><xref linkend="sql-fetch"/></member>
   <member><xref linkend="sql-move"/></member>
  </simplelist>
 </refsect1>
</refentry>
