<!--
doc/src/sgml/ref/pgbench.sgml
PostgreSQL documentation
-->

<refentry id="pgbench">
<!-- pgdoc-cn_start sig_en=87201afc6f5922fee7e9f534b7ea23ca sig_cn_org=None source=14.1 
 <indexterm zone="pgbench">
  <primary>pgbench</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="pgbench">
  <primary>pgbench</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=87201afc6f5922fee7e9f534b7ea23ca -->

 <refmeta>
  <refentrytitle><application>pgbench</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=10eb93c2ce6577a6b79e78cd9f9b9db7 sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>pgbench</refname>
  <refpurpose>run a benchmark test on <productname>PostgreSQL</productname></refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>pgbench</refname>
  <refpurpose>在<productname>PostgreSQL</productname>上运行一个基准测试</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=10eb93c2ce6577a6b79e78cd9f9b9db7 -->

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg choice="plain"><option>-i</option></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->
<!-- pgdoc-cn_start sig_en=94c541d0f5a08f2edfc066bc549cf0e3 sig_cn_org=None source=14.1 
 <para>
  <application>pgbench</application> is a simple program for running benchmark
  tests on <productname>PostgreSQL</productname>.  It runs the same sequence of SQL
  commands over and over, possibly in multiple concurrent database sessions,
  and then calculates the average transaction rate (transactions per second).
  By default, <application>pgbench</application> tests a scenario that is
  loosely based on TPC-B, involving five <command>SELECT</command>,
  <command>UPDATE</command>, and <command>INSERT</command> commands per transaction.
  However, it is easy to test other cases by writing your own transaction
  script files.
 </para>
________________________________________________________-->
 <para>
  <application>pgbench</application>是一种在<productname>PostgreSQL</productname>上运行基准测试的简单程序。它可能在并发的数据库会话中一遍一遍地运行相同序列的 SQL 命令，并且计算平均事务率（每秒的事务数）。默认情况下，<application>pgbench</application>会测试一种基于 TPC-B 但是要更宽松的场景，其中在每个事务中涉及五个<command>SELECT</command>、<command>UPDATE</command>以及<command>INSERT</command>命令。但是，通过编写自己的事务脚本文件很容易用来测试其他情况。
 </para>
<!-- pgdoc-cn_end sig_en=94c541d0f5a08f2edfc066bc549cf0e3 -->

<!-- pgdoc-cn_start sig_en=ebf0c1f6c75de3af439dba964afe7c4c sig_cn_org=2e96c1f86179a9edca1f1eef54ca1ad9 source=15.7 
 <para>
  Typical output from <application>pgbench</application> looks like:

<screen>
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 10
query mode: simple
number of clients: 10
number of threads: 1
maximum number of tries: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
number of failed transactions: 0 (0.000%)
latency average = 11.013 ms
latency stddev = 7.351 ms
initial connection time = 45.758 ms
tps = 896.967014 (without initial connection time)
</screen>

  The first seven lines report some of the most important parameter
  settings.
  The sixth line reports the maximum number of tries for transactions with
  serialization or deadlock errors (see <xref linkend="failures-and-retries"/>
  for more information).
  The eighth line reports the number of transactions completed
  and intended (the latter being just the product of number of clients
  and number of transactions per client); these will be equal unless the run
  failed before completion or some SQL command(s) failed.  (In
  <option>-T</option> mode, only the actual number of transactions is printed.)
  The next line reports the number of failed transactions due to
  serialization or deadlock errors (see <xref linkend="failures-and-retries"/>
  for more information).
  The last line reports the number of transactions per second.
 </para>
________________________________________________________-->
 <para>
  典型的<application>pgbench</application>输出如下：

<screen>
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 10
query mode: simple
number of clients: 10
number of threads: 1
maximum number of tries: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
number of failed transactions: 0 (0.000%)
latency average = 11.013 ms
latency stddev = 7.351 ms
initial connection time = 45.758 ms
tps = 896.967014 (without initial connection time)
</screen>

  前七行报告了一些最重要的参数设置。
  第六行报告了具有串行化或死锁错误的事务的最大尝试次数（有关更多信息，请参见<xref linkend="failures-and-retries"/>）。
  第八行报告了已完成和预期的事务数量（后者仅是客户端数量和每个客户端事务数量的乘积）；除非运行在完成之前失败或某些SQL命令失败，否则它们将相等。（在<option>-T</option>模式下，仅打印实际事务数量。）
  接下来的行报告了由于串行化或死锁错误而失败的事务数量（有关更多信息，请参见<xref linkend="failures-and-retries"/>）。
  最后一行报告了每秒事务数量。
</para>
<!-- pgdoc-cn_end sig_en=ebf0c1f6c75de3af439dba964afe7c4c -->

<!-- pgdoc-cn_start sig_en=b2600169e3cacecf177c6e3fcd239bb2 sig_cn_org=None source=14.1 
  <para>
   The default TPC-B-like transaction test requires specific tables to be
   set up beforehand.  <application>pgbench</application> should be invoked with
   the <option>-i</option> (initialize) option to create and populate these
   tables.  (When you are testing a custom script, you don't need this
   step, but will instead need to do whatever setup your test needs.)
   Initialization looks like:

<programlisting>
pgbench -i <optional> <replaceable>other-options</replaceable> </optional> <replaceable>dbname</replaceable>
</programlisting>

   where <replaceable>dbname</replaceable> is the name of the already-created
   database to test in.  (You may also need <option>-h</option>,
   <option>-p</option>, and/or <option>-U</option> options to specify how to
   connect to the database server.)
  </para>
________________________________________________________-->
  <para>
   默认的类 TPC-B 事务测试要求预先设置好特定的表。可以使用<option>-i</option>（初始化）选项调用<application>pgbench</application>来创建并且填充这些表（当你在测试一个自定义脚本时，你不需要这一步，但是需要按你自己的测试需要做一些设置工作）。初始化类似这样：

<programlisting>
pgbench -i <optional> <replaceable>other-options</replaceable> </optional> <replaceable>dbname</replaceable>
</programlisting>

   其中<replaceable>dbname</replaceable>是要在其中进行测试的预先创建好的数据库的名称（你可能还需要<option>-h</option>、<option>-p</option>或<option>-U</option>选项来指定如何连接到数据库服务器）。
  </para>
<!-- pgdoc-cn_end sig_en=b2600169e3cacecf177c6e3fcd239bb2 -->

  <caution>
<!-- pgdoc-cn_start sig_en=e5a9e8b6f129dcb2e793671734b6e524 sig_cn_org=None source=14.1 
   <para>
    <literal>pgbench -i</literal> creates four tables <structname>pgbench_accounts</structname>,
    <structname>pgbench_branches</structname>, <structname>pgbench_history</structname>, and
    <structname>pgbench_tellers</structname>,
    destroying any existing tables of these names.
    Be very careful to use another database if you have tables having these
    names!
   </para>
________________________________________________________-->
   <para>
    <literal>pgbench -i</literal>会创建四个表<structname>pgbench_accounts</structname>、
    <structname>pgbench_branches</structname>、<structname>pgbench_history</structname>以及<structname>pgbench_tellers</structname>，如果同名表已经存在会被先删除。如果你已经有同名表，一定注意要使用另一个数据库！
   </para>
<!-- pgdoc-cn_end sig_en=e5a9e8b6f129dcb2e793671734b6e524 -->
  </caution>

<!-- pgdoc-cn_start sig_en=22efa83d32d930351c8792f074ee86f8 sig_cn_org=None source=14.1 
  <para>
   At the default <quote>scale factor</quote> of 1, the tables initially
   contain this many rows:
<screen>
table                   # of rows
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
pgbench_branches        1
pgbench_tellers         10
pgbench_accounts        100000
pgbench_history         0
</screen>
   You can (and, for most purposes, probably should) increase the number
   of rows by using the <option>-s</option> (scale factor) option.  The
   <option>-F</option> (fillfactor) option might also be used at this point.
  </para>
________________________________________________________-->
  <para>
   在默认的情况下<quote>比例因子</quote>为 1，这些表初始包含的行数为：
<screen>
table                   # of rows
---------------------------------
pgbench_branches        1
pgbench_tellers         10
pgbench_accounts        100000
pgbench_history         0
</screen>
   你可以使用<option>-s</option>（比例因子）选项增加行的数量。<option>-F</option>（填充因子）选项也可以在这里使用。
  </para>
<!-- pgdoc-cn_end sig_en=22efa83d32d930351c8792f074ee86f8 -->

<!-- pgdoc-cn_start sig_en=9330ce27dcc434521967bf1a8d8346fa sig_cn_org=None source=14.1 
  <para>
   Once you have done the necessary setup, you can run your benchmark
   with a command that doesn't include <option>-i</option>, that is

<programlisting>
pgbench <optional> <replaceable>options</replaceable> </optional> <replaceable>dbname</replaceable>
</programlisting>

   In nearly all cases, you'll need some options to make a useful test.
   The most important options are <option>-c</option> (number of clients),
   <option>-t</option> (number of transactions), <option>-T</option> (time limit),
   and <option>-f</option> (specify a custom script file).
   See below for a full list.
  </para>
________________________________________________________-->
  <para>
   一旦你完成了必要的设置，你就可以用不包括<option>-i</option>的命令运行基准，也就是：

<programlisting>
pgbench <optional> <replaceable>options</replaceable> </optional> <replaceable>dbname</replaceable>
</programlisting>

   在近乎所有的情况中，你将需要一些选项来做一次有用的测试。最重要的选项是<option>-c</option>（客户端数量）、
   <option>-t</option>（事务数量）、<option>-T</option>（时间限制）以及<option>-f</option>（指定一个自定义脚本文件）。完整的列表见下文。
  </para>
<!-- pgdoc-cn_end sig_en=9330ce27dcc434521967bf1a8d8346fa -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=ee3f399228d18d2103d5b7f4e0aeeba8 sig_cn_org=None source=14.1 
  <title>Options</title>
________________________________________________________-->
  <title>选项</title>
<!-- pgdoc-cn_end sig_en=ee3f399228d18d2103d5b7f4e0aeeba8 -->

<!-- pgdoc-cn_start sig_en=d00683ef0a010e9221992c13dbe6af72 sig_cn_org=None source=14.1 
  <para>
   The following is divided into three subsections.  Different options are
   used during database initialization and while running benchmarks, but some
   options are useful in both cases.
  </para>
________________________________________________________-->
  <para>
   下面分成三个部分。数据库初始化期间使用的选项和运行基准时会使用不同的选项，但也有一些选项在两种情况下都使用。
  </para>
<!-- pgdoc-cn_end sig_en=d00683ef0a010e9221992c13dbe6af72 -->

 <refsect2 id="pgbench-init-options">
<!-- pgdoc-cn_start sig_en=5f033fa74c3913538bed54f3cfdf1357 sig_cn_org=None source=14.1 
  <title>Initialization Options</title>
________________________________________________________-->
  <title>初始化选项</title>
<!-- pgdoc-cn_end sig_en=5f033fa74c3913538bed54f3cfdf1357 -->

<!-- pgdoc-cn_start sig_en=aec078a8fdc7ffab064b96aeaf82371d sig_cn_org=ad89899b3a2dcc4d7d2633758e7619db source=15.7 
   <para>
    <application>pgbench</application> accepts the following command-line
    initialization arguments:

    <variablelist>

     <varlistentry>
________________________________________________________-->
   <para>
    <application>pgbench</application>接受以下命令行初始化参数：

    <variablelist>

     <varlistentry>
<!-- pgdoc-cn_end sig_en=aec078a8fdc7ffab064b96aeaf82371d -->
      <term><replaceable class="parameter">dbname</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=d7ace342f42c6a24a456b367e24414a0 sig_cn_org=2637ba26b7da7fd5998572ffba8f2522 source=15.7 
       <para>
        Specifies the name of the database to test in. If this is
        not specified, the environment variable
        <envar>PGDATABASE</envar> is used. If that is not set, the
        user name specified for the connection is used.
       </para>
________________________________________________________-->
       <para>
        指定要测试的数据库名称。如果未指定，则使用环境变量<envar>PGDATABASE</envar>。
        如果未设置该变量，则使用连接指定的用户名。
       </para>
<!-- pgdoc-cn_end sig_en=d7ace342f42c6a24a456b367e24414a0 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-i</option></term>
      <term><option>--initialize</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=4b483c148d80c2fe61dbe1eff0acb003 sig_cn_org=7fe441fa060b0c27ed0c3a99a9347015 source=15.7 
       <para>
        Required to invoke initialization mode.
       </para>
________________________________________________________-->
       <para>
        要求调用初始化模式。
       </para>
<!-- pgdoc-cn_end sig_en=4b483c148d80c2fe61dbe1eff0acb003 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-I <replaceable>init_steps</replaceable></option></term>
      <term><option>--init-steps=<replaceable>init_steps</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=a5a94320cfa16f6669b5adacdfb10281 sig_cn_org=d9b727accbb56d17017f57bc0fd93b06 source=15.7 
       <para>
        Perform just a selected set of the normal initialization steps.
        <replaceable>init_steps</replaceable> specifies the
        initialization steps to be performed, using one character per step.
        Each step is invoked in the specified order.
        The default is <literal>dtgvp</literal>.
        The available steps are:

        <variablelist>
         <varlistentry>
          <term><literal>d</literal> (Drop)</term>
          <listitem>
           <para>
            Drop any existing <application>pgbench</application> tables.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>t</literal> (create Tables)</term>
          <listitem>
           <para>
            Create the tables used by the
            standard <application>pgbench</application> scenario, namely
            <structname>pgbench_accounts</structname>,
            <structname>pgbench_branches</structname>,
            <structname>pgbench_history</structname>, and
            <structname>pgbench_tellers</structname>.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>g</literal> or <literal>G</literal> (Generate data, client-side or server-side)</term>
          <listitem>
           <para>
            Generate data and load it into the standard tables,
            replacing any data already present.
           </para>
           <para>
            With <literal>g</literal> (client-side data generation),
            data is generated in <command>pgbench</command> client and then
            sent to the server. This uses the client/server bandwidth
            extensively through a <command>COPY</command>.
            <command>pgbench</command> uses the FREEZE option with version 14 or later
            of <productname>PostgreSQL</productname> to speed up
            subsequent <command>VACUUM</command>, unless partitions are enabled.
            Using <literal>g</literal> causes logging to print one message
            every 100,000 rows while generating data for the
            <structname>pgbench_accounts</structname> table.
           </para>
           <para>
            With <literal>G</literal> (server-side data generation),
            only small queries are sent from the <command>pgbench</command>
            client and then data is actually generated in the server.
            No significant bandwidth is required for this variant, but
            the server will do more work.
            Using <literal>G</literal> causes logging not to print any progress
            message while generating data.
           </para>
           <para>
            The default initialization behavior uses client-side data
            generation (equivalent to <literal>g</literal>).
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>v</literal> (Vacuum)</term>
          <listitem>
           <para>
            Invoke <command>VACUUM</command> on the standard tables.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>p</literal> (create Primary keys)</term>
          <listitem>
           <para>
            Create primary key indexes on the standard tables.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
         <term><literal>f</literal> (create Foreign keys)</term>
          <listitem>
           <para>
            Create foreign key constraints between the standard tables.
            (Note that this step is not performed by default.)
           </para>
          </listitem>
         </varlistentry>
        </variablelist></para>
________________________________________________________-->
       <para>
        执行一组选定的正常初始化步骤。
        <replaceable>init_steps</replaceable>指定要执行的初始化步骤，每个步骤使用一个字符表示。
        每个步骤按指定顺序调用。
        默认值为<literal>dtgvp</literal>。
        可用的步骤包括：

        <variablelist>
         <varlistentry>
          <term><literal>d</literal>（删除）</term>
          <listitem>
           <para>
            删除任何现有的<application>pgbench</application>表。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>t</literal>（创建表）</term>
          <listitem>
           <para>
            创建标准<application>pgbench</application>场景使用的表，即
            <structname>pgbench_accounts</structname>、
            <structname>pgbench_branches</structname>、
            <structname>pgbench_history</structname>和
            <structname>pgbench_tellers</structname>。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>g</literal>或<literal>G</literal>（生成数据，客户端或服务器端）</term>
          <listitem>
           <para>
            生成数据并将其加载到标准表中，替换任何已经存在的数据。
           </para>
           <para>
            使用<literal>g</literal>（客户端数据生成），
            数据在<command>pgbench</command>客户端生成，然后发送到服务器。
            这通过<command>COPY</command>大量使用客户端/服务器带宽。
            <command>pgbench</command>在<productname>PostgreSQL</productname>的14版本或更高版本中使用FREEZE选项来加速后续的<command>VACUUM></command>，
            除非启用了分区。
            使用<literal>g</literal>会导致在为<structname>pgbench_accounts</structname>表生成数据时，
            每生成100,000行打印一条消息。
           </para>
           <para>
            使用<literal>G</literal>（服务器端数据生成），
            仅从<command>pgbench</command>客户端发送小查询，然后实际在服务器端生成数据。
            对于这种变体，不需要大量带宽，但服务器将执行更多工作。
            使用<literal>G</literal>会导致在生成数据时不打印任何进度消息。
           </para>
           <para>
            默认的初始化行为使用客户端数据生成（等同于<literal>g</literal>）。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>v</literal>（清理）</term>
          <listitem>
           <para>
            在标准表上调用<command>VACUUM</command>。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>p</literal>（创建主键）</term>
          <listitem>
           <para>
            在标准表上创建主键索引。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
         <term><literal>f</literal>（创建外键）</term>
          <listitem>
           <para>
            在标准表之间创建外键约束。
            （请注意，默认情况下不执行此步骤。）
           </para>
          </listitem>
         </varlistentry>
        </variablelist></para>
<!-- pgdoc-cn_end sig_en=a5a94320cfa16f6669b5adacdfb10281 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F</option> <replaceable>fillfactor</replaceable></term>
      <term><option>--fillfactor=</option><replaceable>fillfactor</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=0745996c136a6e78729bdf1d524e3c20 sig_cn_org=e12d3324ecd2ca2c1b846c25598fd205 source=15.7 
       <para>
        Create the <structname>pgbench_accounts</structname>,
        <structname>pgbench_tellers</structname> and
        <structname>pgbench_branches</structname> tables with the given fillfactor.
        Default is 100.
       </para>
________________________________________________________-->
       <para>
        创建<structname>pgbench_accounts</structname>、
        <structname>pgbench_tellers</structname>和
        <structname>pgbench_branches</structname>表，并使用给定的填充因子。
        默认值为100。
       </para>
<!-- pgdoc-cn_end sig_en=0745996c136a6e78729bdf1d524e3c20 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=fc2b42655136fd38f88b49ae131f5591 sig_cn_org=b8d6b3e1bc7a6fc94e862308ad45548d source=15.7 
       <para>
        Perform no vacuuming during initialization.
        (This option suppresses the <literal>v</literal> initialization step,
        even if it was specified in <option>-I</option>.)
       </para>
________________________________________________________-->
       <para>
        在初始化期间不执行吸尘操作。
        （此选项会抑制<literal>v</literal>初始化步骤，即使在<option>-I</option>中指定了。）
       </para>
<!-- pgdoc-cn_end sig_en=fc2b42655136fd38f88b49ae131f5591 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-q</option></term>
      <term><option>--quiet</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=47eb04a2529da94fd187f68fed4bafc6 sig_cn_org=51a099966b58533922dc87de8ff769ac source=15.7 
       <para>
        Switch logging to quiet mode, producing only one progress message per 5
        seconds. The default logging prints one message each 100,000 rows, which
        often outputs many lines per second (especially on good hardware).
       </para>
________________________________________________________-->
       <para>
        将日志记录切换到安静模式，每5秒只产生一条进度消息。默认日志每100,000行打印一条消息，
        这经常每秒输出多行（尤其是在良好的硬件上）。
       </para>
<!-- pgdoc-cn_end sig_en=47eb04a2529da94fd187f68fed4bafc6 -->
<!-- pgdoc-cn_start sig_en=b54e511a4d5a8562762bd6eb24ba83ad sig_cn_org=38dc24eb3a43e2c6f3031b3d3084a287 source=15.7 
       <para>
        This setting has no effect if <literal>G</literal> is specified
        in <option>-I</option>.
       </para>
________________________________________________________-->
       <para>
        如果在<option>-I</option>中指定了<literal>G</literal>，则此设置无效。
       </para>
<!-- pgdoc-cn_end sig_en=b54e511a4d5a8562762bd6eb24ba83ad -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>scale_factor</replaceable></term>
      <term><option>--scale=</option><replaceable>scale_factor</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=239e1e33846fe243e764cd6e97231232 sig_cn_org=1e5825b8289a0eddb5b4551a224671cc source=15.7 
       <para>
        Multiply the number of rows generated by the scale factor.
        For example, <literal>-s 100</literal> will create 10,000,000 rows
        in the <structname>pgbench_accounts</structname> table. Default is 1.
        When the scale is 20,000 or larger, the columns used to
        hold account identifiers (<structfield>aid</structfield> columns)
        will switch to using larger integers (<type>bigint</type>),
        in order to be big enough to hold the range of account
        identifiers.
       </para>
________________________________________________________-->
       <para>
        将生成的行数乘以比例因子。
        例如，<literal>-s 100</literal>将在<structname>pgbench_accounts</structname>表中创建10,000,000行。
        默认值为1。
        当比例为20,000或更大时，用于保存帐户标识符的列（<structfield>aid</structfield>列）
        将切换到使用更大的整数（<type>bigint</type>），
        以便足够大以容纳帐户标识符的范围。
       </para>
<!-- pgdoc-cn_end sig_en=239e1e33846fe243e764cd6e97231232 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--foreign-keys</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=2422b4dd19c41b3ae10f0232e4de917a sig_cn_org=afae463b86250acf379ce4b29e7414fe source=15.7 
       <para>
        Create foreign key constraints between the standard tables.
        (This option adds the <literal>f</literal> step to the initialization
        step sequence, if it is not already present.)
       </para>
________________________________________________________-->
       <para>
        在标准表之间创建外键约束。
        （如果尚未存在，则此选项将在初始化步骤序列中添加<literal>f</literal>步骤。）
       </para>
<!-- pgdoc-cn_end sig_en=2422b4dd19c41b3ae10f0232e4de917a -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--index-tablespace=<replaceable>index_tablespace</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=33d8027fd64e7178636e94fdd0559a56 sig_cn_org=b786ecdb2d838a90b0a29fc61d4f4242 source=15.7 
       <para>
        Create indexes in the specified tablespace, rather than the default
        tablespace.
       </para>
________________________________________________________-->
       <para>
        在指定的表空间中创建索引，而不是默认的表空间。
       </para>
<!-- pgdoc-cn_end sig_en=33d8027fd64e7178636e94fdd0559a56 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--partition-method=<replaceable>NAME</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=8698774db2099d14213134714edc096c sig_cn_org=475351ee4cca1a30514cfc8cb2187e6c source=15.7 
       <para>
        Create a partitioned <literal>pgbench_accounts</literal> table with
        <replaceable>NAME</replaceable> method.
        Expected values are <literal>range</literal> or <literal>hash</literal>.
        This option requires that <option>-&minus;partitions</option> is set to non-zero.
        If unspecified, default is <literal>range</literal>.
       </para>
________________________________________________________-->
       <para>
        创建一个分区的<literal>pgbench_accounts</literal>表，使用<replaceable>NAME</replaceable>方法。
        预期值为<literal>range</literal>或<literal>hash</literal>。
        此选项要求<option>--partitions</option>设置为非零值。
        如果未指定，默认为<literal>range</literal>。
       </para>
<!-- pgdoc-cn_end sig_en=8698774db2099d14213134714edc096c -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--partitions=<replaceable>NUM</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=6042dc68f2f11d9e65b411e9c49b8194 sig_cn_org=e07e5d5f7429300b32cb5b3442f5add6 source=15.7 
       <para>
        Create a partitioned <literal>pgbench_accounts</literal> table with
        <replaceable>NUM</replaceable> partitions of nearly equal size for
        the scaled number of accounts.
        Default is <literal>0</literal>, meaning no partitioning.
       </para>
________________________________________________________-->
       <para>
        创建一个分区的<literal>pgbench_accounts</literal>表，其中包含<replaceable>NUM</replaceable>个大小几乎相等的分区，用于规模化的账户数量。
        默认值为<literal>0</literal>，表示不分区。
       </para>
<!-- pgdoc-cn_end sig_en=6042dc68f2f11d9e65b411e9c49b8194 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--tablespace=<replaceable>tablespace</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=a75e4bb7ad4c0700eab21cc88debda87 sig_cn_org=92cfed4ad4111bc564225c0d501577ea source=15.7 
       <para>
        Create tables in the specified tablespace, rather than the default
        tablespace.
       </para>
________________________________________________________-->
       <para>
        在指定的表空间中创建表，而不是默认的表空间。
       </para>
<!-- pgdoc-cn_end sig_en=a75e4bb7ad4c0700eab21cc88debda87 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--unlogged-tables</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=26ac0e055f271ad8bdffb513f447f7c1 sig_cn_org=d7f2586340a10f211a89532827ea7df4 source=15.7 
       <para>
        Create all tables as unlogged tables, rather than permanent tables.
       </para>
________________________________________________________-->
       <para>
        创建所有表时都将其作为非记录表，而不是永久表。
       </para>
<!-- pgdoc-cn_end sig_en=26ac0e055f271ad8bdffb513f447f7c1 -->
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect2>

 <refsect2 id="pgbench-run-options">
<!-- pgdoc-cn_start sig_en=1ec67424b6c21f6a31de82dc8bee4d82 sig_cn_org=None source=14.1 
  <title>Benchmarking Options</title>
________________________________________________________-->
  <title>基准选项</title>
<!-- pgdoc-cn_end sig_en=1ec67424b6c21f6a31de82dc8bee4d82 -->

<!-- pgdoc-cn_start sig_en=d4918e6fcc5ca3651356d8859354f554 sig_cn_org=b50592b9f1c8491aec490f5feb634fc3 source=15.7 
   <para>
    <application>pgbench</application> accepts the following command-line
    benchmarking arguments:

    <variablelist>
     <varlistentry>
________________________________________________________-->
   <para>
    <application>pgbench</application>接受以下命令行基准测试参数：

    <variablelist>
     <varlistentry>
<!-- pgdoc-cn_end sig_en=d4918e6fcc5ca3651356d8859354f554 -->
      <term><option>-b</option> <replaceable>scriptname[@weight]</replaceable></term>
<!-- pgdoc-cn_start sig_en=dda16f720fbd9afbff8e9127dd98493f sig_cn_org=d9fae02bf3aef5530af7fd70acaeeddd source=15.7 
      <term><option>-&minus;builtin</option>=<replaceable>scriptname[@weight]</replaceable></term>
________________________________________________________-->
      <term><option>--builtin</option>=<replaceable>脚本名称[@权重]</replaceable></term>
<!-- pgdoc-cn_end sig_en=dda16f720fbd9afbff8e9127dd98493f -->
      <listitem>
<!-- pgdoc-cn_start sig_en=fa0c14c1692d03e3b88691298570e913 sig_cn_org=02a11ba52ff18b634c37685d26b6ffc2 source=15.7 
       <para>
        Add the specified built-in script to the list of scripts to be executed.
        Available built-in scripts are: <literal>tpcb-like</literal>,
        <literal>simple-update</literal> and <literal>select-only</literal>.
        Unambiguous prefixes of built-in names are accepted.
        With the special name <literal>list</literal>, show the list of built-in scripts
        and exit immediately.
       </para>
________________________________________________________-->
       <para>
        将指定的内置脚本添加到要执行的脚本列表中。
        可用的内置脚本包括：<literal>tpcb-like</literal>、
        <literal>simple-update</literal>和<literal>select-only</literal>。
        接受内置名称的无歧义前缀。
        使用特殊名称<literal>list</literal>，显示内置脚本列表
        并立即退出。
       </para>
<!-- pgdoc-cn_end sig_en=fa0c14c1692d03e3b88691298570e913 -->
<!-- pgdoc-cn_start sig_en=ba6de05c0134aaae09f1393d7e58f52f sig_cn_org=a9e7fdb25081a6fec18be01a4b060ce6 source=15.7 
       <para>
        Optionally, write an integer weight after <literal>@</literal> to
        adjust the probability of selecting this script versus other ones.
        The default weight is 1.
        See below for details.
       </para>
________________________________________________________-->
       <para>
        可选地，在<literal>@</literal>后写一个整数权重，以调整选择此脚本与其他脚本的概率。
        默认权重为1。
        详情请参见下文。
       </para>
<!-- pgdoc-cn_end sig_en=ba6de05c0134aaae09f1393d7e58f52f -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option> <replaceable>clients</replaceable></term>
      <term><option>--client=</option><replaceable>clients</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=b3c15468f70876060616c3301fa44c84 sig_cn_org=be1dd7facdad6fd81bdc9392c0359372 source=15.7 
       <para>
        Number of clients simulated, that is, number of concurrent database
        sessions.  Default is 1.
       </para>
________________________________________________________-->
       <para>
        模拟的客户端数量，即并发数据库会话的数量。默认值为1。
       </para>
<!-- pgdoc-cn_end sig_en=b3c15468f70876060616c3301fa44c84 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</option></term>
      <term><option>--connect</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=b7fbdbbc6deb1959a09d079221a8ea60 sig_cn_org=f055f90e01f84534be5602f250b1bebe source=15.7 
       <para>
        Establish a new connection for each transaction, rather than
        doing it just once per client session.
        This is useful to measure the connection overhead.
       </para>
________________________________________________________-->
       <para>
        为每个事务建立一个新连接，而不是仅在每个客户端会话中执行一次。
        这对于测量连接开销很有用。
       </para>
<!-- pgdoc-cn_end sig_en=b7fbdbbc6deb1959a09d079221a8ea60 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <term><option>--debug</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=72eb5b21dc1a2c072622126d04ce6a4c sig_cn_org=5f5560086ad6e15215089e19ea2faecc source=15.7 
       <para>
        Print debugging output.
       </para>
________________________________________________________-->
       <para>
        打印调试输出。
       </para>
<!-- pgdoc-cn_end sig_en=72eb5b21dc1a2c072622126d04ce6a4c -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-D</option> <replaceable>varname</replaceable><literal>=</literal><replaceable>value</replaceable></term>
      <term><option>--define=</option><replaceable>varname</replaceable><literal>=</literal><replaceable>value</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=20cb85449b92bd80d7134b323071db97 sig_cn_org=e0baf049e5dc5e4474735e0010066e34 source=15.7 
       <para>
        Define a variable for use by a custom script (see below).
        Multiple <option>-D</option> options are allowed.
       </para>
________________________________________________________-->
       <para>
        定义一个变量，供自定义脚本使用（见下文）。
        允许使用多个<option>-D</option>选项。
       </para>
<!-- pgdoc-cn_end sig_en=20cb85449b92bd80d7134b323071db97 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f</option> <replaceable>filename[@weight]</replaceable></term>
      <term><option>--file=</option><replaceable>filename[@weight]</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=5bddcd7dfd0b203cb53eb8f78ffcb6e3 sig_cn_org=4c688338fb52cc4b1330aae4678c6b04 source=15.7 
       <para>
        Add a transaction script read from <replaceable>filename</replaceable>
        to the list of scripts to be executed.
       </para>
________________________________________________________-->
       <para>
        将从<replaceable>文件名</replaceable>读取的事务脚本添加到要执行的脚本列表中。
       </para>
<!-- pgdoc-cn_end sig_en=5bddcd7dfd0b203cb53eb8f78ffcb6e3 -->
<!-- pgdoc-cn_start sig_en=9406c01577ba15520913e08d3d3e2196 sig_cn_org=552511201fdba3bbc71f9115845c95f0 source=15.7 
       <para>
        Optionally, write an integer weight after <literal>@</literal> to
        adjust the probability of selecting this script versus other ones.
        The default weight is 1.
        (To use a script file name that includes an <literal>@</literal>
        character, append a weight so that there is no ambiguity, for
        example <literal>filen@me@1</literal>.)
        See below for details.
       </para>
________________________________________________________-->
       <para>
        可选地，在<literal>@</literal>后面写一个整数权重，以调整选择此脚本与其他脚本的概率。
        默认权重为1。
        （要使用包含<literal>@</literal>字符的脚本文件名，附加一个权重以消除歧义，例如<literal>filen@me@1</literal>。）
        详细信息请参见下文。
       </para>
<!-- pgdoc-cn_end sig_en=9406c01577ba15520913e08d3d3e2196 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j</option> <replaceable>threads</replaceable></term>
      <term><option>--jobs=</option><replaceable>threads</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=8848bcf15ad6a01be4b2fbd275f1d0f4 sig_cn_org=33c68ff69c9f796035687b18914b8249 source=15.7 
       <para>
        Number of worker threads within <application>pgbench</application>.
        Using more than one thread can be helpful on multi-CPU machines.
        Clients are distributed as evenly as possible among available threads.
        Default is 1.
       </para>
________________________________________________________-->
       <para>
        <application>pgbench</application>中的工作线程数。
        在多CPU机器上使用多个线程可能会有所帮助。
        客户端尽可能均匀地分布在可用线程中。
        默认值为1。
       </para>
<!-- pgdoc-cn_end sig_en=8848bcf15ad6a01be4b2fbd275f1d0f4 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-l</option></term>
      <term><option>--log</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=fc0f838e50ea93b04bc8344f8cab26cd sig_cn_org=a69b96f99a5dfd16276739b7e037c5a3 source=15.7 
       <para>
        Write information about each transaction to a log file.
        See below for details.
       </para>
________________________________________________________-->
       <para>
        将每个交易的信息写入日志文件。
        详细信息请参见下文。
       </para>
<!-- pgdoc-cn_end sig_en=fc0f838e50ea93b04bc8344f8cab26cd -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-L</option> <replaceable>limit</replaceable></term>
      <term><option>--latency-limit=</option><replaceable>limit</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=235337e289fdd63f1386d29f20a828be sig_cn_org=0fe42df07b4924ae8616541f577b3056 source=15.7 
       <para>
        Transactions that last more than <replaceable>limit</replaceable> milliseconds
        are counted and reported separately, as <firstterm>late</firstterm>.
       </para>
________________________________________________________-->
       <para>
        持续时间超过<replaceable>limit</replaceable>毫秒的交易将被单独计数和报告，称为<firstterm>延迟</firstterm>。
       </para>
<!-- pgdoc-cn_end sig_en=235337e289fdd63f1386d29f20a828be -->
<!-- pgdoc-cn_start sig_en=e06674482c432f825c140b1644b98496 sig_cn_org=545e9265f819788c472e46d8073e4a75 source=15.7 
       <para>
        When throttling is used (<option>-&minus;rate=...</option>), transactions that
        lag behind schedule by more than <replaceable>limit</replaceable> ms, and thus
        have no hope of meeting the latency limit, are not sent to the server
        at all. They are counted and reported separately as
        <firstterm>skipped</firstterm>.
       </para>
________________________________________________________-->
       <para>
        当使用节流时（<option>--rate=...</option>），落后于计划时间超过<replaceable>limit</replaceable>毫秒的事务，
        因此无法满足延迟限制，根本不会发送到服务器。它们被计数并单独报告为<firstterm>跳过</firstterm>。
       </para>
<!-- pgdoc-cn_end sig_en=e06674482c432f825c140b1644b98496 -->
<!-- pgdoc-cn_start sig_en=e00cbe420c2bffdd71a09383e49a33d0 sig_cn_org=e2edbf518bc66f9bd4ddb7461748cb5f source=15.7 
       <para>
        When the <option>-&minus;max-tries</option> option is used, a transaction
        which fails due to a serialization anomaly or from a deadlock will not
        be retried if the total time of all its tries is greater than
        <replaceable>limit</replaceable> ms. To limit only the time of tries
        and not their number, use <literal>-&minus;max-tries=0</literal>. By
        default, the option <option>-&minus;max-tries</option> is set to 1 and
        transactions with serialization/deadlock errors are not retried. See
        <xref linkend="failures-and-retries"/> for more information about
        retrying such transactions.
       </para>
________________________________________________________-->
       <para>
        当使用<option>--max-tries</option>选项时，由于串行化异常或死锁而失败的事务，
        如果所有尝试的总时间大于<replaceable>limit</replaceable>毫秒，则不会重试。
        要仅限制尝试的时间而不是它们的数量，请使用<literal>--max-tries=0</literal>。
        默认情况下，选项<option>--max-tries</option>设置为1，且具有串行化/死锁错误的事务不会重试。
        有关重试此类事务的更多信息，请参见<xref linkend="failures-and-retries"/>。
       </para>
<!-- pgdoc-cn_end sig_en=e00cbe420c2bffdd71a09383e49a33d0 -->
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-M</option> <replaceable>querymode</replaceable></term>
      <term><option>--protocol=</option><replaceable>querymode</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=3ab93d7e9283c6b5274984fc7e695f50 sig_cn_org=dd602dda4d7838acf11f9542b7664528 source=15.7 
       <para>
        Protocol to use for submitting queries to the server:
          <itemizedlist>
           <listitem>
            <para><literal>simple</literal>: use simple query protocol.</para>
           </listitem>
           <listitem>
            <para><literal>extended</literal>: use extended query protocol.</para>
           </listitem>
           <listitem>
            <para><literal>prepared</literal>: use extended query protocol with prepared statements.</para>
           </listitem>
          </itemizedlist>

        In the <literal>prepared</literal> mode, <application>pgbench</application>
        reuses the parse analysis result starting from the second query
        iteration, so <application>pgbench</application> runs faster
        than in other modes.
       </para>
________________________________________________________-->
       <para>
        用于向服务器提交查询的协议：
          <itemizedlist>
           <listitem>
            <para><literal>simple</literal>: 使用简单查询协议。</para>
           </listitem>
           <listitem>
            <para><literal>extended</literal>: 使用扩展查询协议。</para>
           </listitem>
           <listitem>
            <para><literal>prepared</literal>: 使用带有预处理语句的扩展查询协议。</para>
           </listitem>
          </itemizedlist>

        在<literal>prepared</literal>模式下，<application>pgbench</application>
        从第二次查询迭代开始重用解析分析结果，因此<application>pgbench</application>运行速度
        比其他模式快。
       </para>
<!-- pgdoc-cn_end sig_en=3ab93d7e9283c6b5274984fc7e695f50 -->
<!-- pgdoc-cn_start sig_en=50e2ab992383e5ed6f1424f0a1953941 sig_cn_org=34eab1267c4aba3a9d73a0e870ba5d1b source=15.7 
       <para>
        The default is simple query protocol.  (See <xref linkend="protocol"/>
        for more information.)
       </para>
________________________________________________________-->
       <para>
        默认是简单查询协议。 (查看<xref linkend="protocol"/>获取更多信息。)
       </para>
<!-- pgdoc-cn_end sig_en=50e2ab992383e5ed6f1424f0a1953941 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=82fa5873962656cf6e8807e734f78526 sig_cn_org=85bc13d39bfb8a1e40b991dff5a3bb04 source=15.7 
       <para>
        Perform no vacuuming before running the test.
        This option is <emphasis>necessary</emphasis>
        if you are running a custom test scenario that does not include
        the standard tables <structname>pgbench_accounts</structname>,
        <structname>pgbench_branches</structname>, <structname>pgbench_history</structname>, and
        <structname>pgbench_tellers</structname>.
       </para>
________________________________________________________-->
       <para>
        在运行测试之前不要进行任何清洁工作。
        如果您正在运行不包括标准表<structname>pgbench_accounts</structname>、
        <structname>pgbench_branches</structname>、<structname>pgbench_history</structname>和
        <structname>pgbench_tellers</structname>的自定义测试方案，则此选项是<emphasis>必需的</emphasis>。
       </para>
<!-- pgdoc-cn_end sig_en=82fa5873962656cf6e8807e734f78526 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N</option></term>
      <term><option>--skip-some-updates</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=868dbdd242bf5cf9b59a08eb400f4893 sig_cn_org=2e10712d7f8fa4df14e074b89ff5a2a4 source=15.7 
       <para>
        Run built-in simple-update script.
        Shorthand for <option>-b simple-update</option>.
       </para>
________________________________________________________-->
       <para>
        运行内置的简单更新脚本。
        简写为<option>-b simple-update</option>。
       </para>
<!-- pgdoc-cn_end sig_en=868dbdd242bf5cf9b59a08eb400f4893 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option> <replaceable>sec</replaceable></term>
      <term><option>--progress=</option><replaceable>sec</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=1b4ce7a3679b8eaa312204cc3812f0e3 sig_cn_org=462de0c90e27189603a3b434455bef22 source=15.7 
       <para>
        Show progress report every <replaceable>sec</replaceable> seconds.  The report
        includes the time since the beginning of the run, the TPS since the
        last report, and the transaction latency average, standard deviation,
        and the number of failed transactions since the last report. Under
        throttling (<option>-R</option>), the latency is computed with respect
        to the transaction scheduled start time, not the actual transaction
        beginning time, thus it also includes the average schedule lag time.
        When <option>-&minus;max-tries</option> is used to enable transaction retries
        after serialization/deadlock errors, the report includes the number of
        retried transactions and the sum of all retries.
       </para>
________________________________________________________-->
       <para>
        每<replaceable>sec</replaceable>秒显示进度报告。 报告包括自运行开始以来的时间，自上次报告以来的TPS，
        事务延迟的平均值、标准差和自上次报告以来失败的事务数量。 在限流（<option>-R</option>）下，
        延迟是相对于事务计划开始时间计算的，而不是实际事务开始时间，因此它还包括平均计划滞后时间。
        当使用<option>--max-tries</option>启用事务在序列化/死锁错误后的重试时，报告包括重试事务的数量和所有重试的总和。
       </para>
<!-- pgdoc-cn_end sig_en=1b4ce7a3679b8eaa312204cc3812f0e3 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <term><option>--report-per-command</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=03e2702b81396aeb10f1d09b79eccc1b sig_cn_org=a08c35c98303e1772fd97b1cced24182 source=15.7 
       <para>
        Report the following statistics for each command after the benchmark
        finishes: the average per-statement latency (execution time from the
        perspective of the client), the number of failures, and the number of
        retries after serialization or deadlock errors in this command.  The
        report displays retry statistics only if the
        <option>-&minus;max-tries</option> option is not equal to 1.
       </para>
________________________________________________________-->
       <para>
        在基准测试完成后，报告每个命令的以下统计信息：每条语句的平均延迟（从客户端视角的执行时间）、失败次数以及在该命令中发生序列化或死锁错误后的重试次数。仅当<option>--max-tries</option>选项不等于1时，报告显示重试统计信息。
       </para>
<!-- pgdoc-cn_end sig_en=03e2702b81396aeb10f1d09b79eccc1b -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option> <replaceable>rate</replaceable></term>
      <term><option>--rate=</option><replaceable>rate</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=4291a5446a15160abd3b1ee22fa63b5a sig_cn_org=5bcd65b86371a4d76092828f0570a3e8 source=15.7 
       <para>
        Execute transactions targeting the specified rate instead of running
        as fast as possible (the default).  The rate is given in transactions
        per second.  If the targeted rate is above the maximum possible rate,
        the rate limit won't impact the results.
       </para>
________________________________________________________-->
       <para>
        执行针对指定速率的交易，而不是尽可能快地运行（默认）。速率以每秒交易数表示。
        如果目标速率高于最大可能速率，则速率限制不会影响结果。
       </para>
<!-- pgdoc-cn_end sig_en=4291a5446a15160abd3b1ee22fa63b5a -->
<!-- pgdoc-cn_start sig_en=89b5952e83d2a35868ec77aa1c3bdaf7 sig_cn_org=317bcc0a7d328f975255c84f4030cc00 source=15.7 
       <para>
        The rate is targeted by starting transactions along a
        Poisson-distributed schedule time line.  The expected start time
        schedule moves forward based on when the client first started, not
        when the previous transaction ended.  That approach means that when
        transactions go past their original scheduled end time, it is
        possible for later ones to catch up again.
       </para>
________________________________________________________-->
       <para>
        该速率是通过沿着泊松分布的时间线开始交易来定位的。 预期的开始时间表根据客户端首次启动的时间而向前移动，而不是根据上一个交易结束的时间。 这种方法意味着当交易超过其原定结束时间时，后续的交易可能会再次赶上。
       </para>
<!-- pgdoc-cn_end sig_en=89b5952e83d2a35868ec77aa1c3bdaf7 -->
<!-- pgdoc-cn_start sig_en=cf6ea5c0d38a9b7a8b39124084160029 sig_cn_org=0bfd13759e6f5494d98794d8498614f5 source=15.7 
       <para>
        When throttling is active, the transaction latency reported at the
        end of the run is calculated from the scheduled start times, so it
        includes the time each transaction had to wait for the previous
        transaction to finish. The wait time is called the schedule lag time,
        and its average and maximum are also reported separately. The
        transaction latency with respect to the actual transaction start time,
        i.e., the time spent executing the transaction in the database, can be
        computed by subtracting the schedule lag time from the reported
        latency.
       </para>
________________________________________________________-->
       <para>
        当节流激活时，运行结束时报告的事务延迟是从计划开始时间计算的，因此它包括每个事务等待前一个事务完成的时间。
        等待时间称为计划滞后时间，其平均值和最大值也分别报告。与实际事务开始时间相关的事务延迟，即在数据库中执行事务所花费的时间，
        可以通过从报告的延迟中减去计划滞后时间来计算。
       </para>
<!-- pgdoc-cn_end sig_en=cf6ea5c0d38a9b7a8b39124084160029 -->

<!-- pgdoc-cn_start sig_en=b38685e804ee6e59641a5d48709da62c sig_cn_org=57e4b24fffaf79e5ea6ff9f56ae006f1 source=15.7 
       <para>
        If <option>-&minus;latency-limit</option> is used together with <option>-&minus;rate</option>,
        a transaction can lag behind so much that it is already over the
        latency limit when the previous transaction ends, because the latency
        is calculated from the scheduled start time. Such transactions are
        not sent to the server, but are skipped altogether and counted
        separately.
       </para>
________________________________________________________-->
       <para>
        如果同时使用<option>--latency-limit</option>和<option>--rate</option>，
        一个事务可能会落后太多，以至于在前一个事务结束时已经超过了
        延迟限制，因为延迟是从计划开始时间计算的。这样的事务
        不会发送到服务器，而是完全跳过并单独计数。
       </para>
<!-- pgdoc-cn_end sig_en=b38685e804ee6e59641a5d48709da62c -->

<!-- pgdoc-cn_start sig_en=b5daa56111e6219714a8ef8b26c2c2ca sig_cn_org=3080a5c82fe9975e3c500505e7ae04c9 source=15.7 
       <para>
        A high schedule lag time is an indication that the system cannot
        process transactions at the specified rate, with the chosen number of
        clients and threads. When the average transaction execution time is
        longer than the scheduled interval between each transaction, each
        successive transaction will fall further behind, and the schedule lag
        time will keep increasing the longer the test run is. When that
        happens, you will have to reduce the specified transaction rate.
       </para>
________________________________________________________-->
       <para>
        高调度滞后时间表明系统无法以指定速率处理事务，无论选择了多少客户端和线程。
        当平均事务执行时间长于每个事务之间的预定间隔时，每个后续事务都会进一步落后，
        而调度滞后时间将随着测试运行时间的延长而增加。当发生这种情况时，您将不得不
        降低指定的事务速率。
       </para>
<!-- pgdoc-cn_end sig_en=b5daa56111e6219714a8ef8b26c2c2ca -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>scale_factor</replaceable></term>
      <term><option>--scale=</option><replaceable>scale_factor</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=458684e8681ae5d97b7692482a4a28fa sig_cn_org=e89aba1d26740a373a08a3bea96a04de source=15.7 
       <para>
        Report the specified scale factor in <application>pgbench</application>'s
        output.  With the built-in tests, this is not necessary; the
        correct scale factor will be detected by counting the number of
        rows in the <structname>pgbench_branches</structname> table.
        However, when testing only custom benchmarks (<option>-f</option> option),
        the scale factor will be reported as 1 unless this option is used.
       </para>
________________________________________________________-->
       <para>
        报告<application>pgbench</application>输出中指定的比例因子。
        对于内置测试，这是不必要的；正确的比例因子将通过计算<structname>pgbench_branches</structname>表中的行数来检测。
        但是，当仅测试自定义基准时（<option>-f</option>选项），
        除非使用此选项，否则比例因子将报告为1。
</para>
<!-- pgdoc-cn_end sig_en=458684e8681ae5d97b7692482a4a28fa -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S</option></term>
      <term><option>--select-only</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=49350840159182891b1d6b000c0e9869 sig_cn_org=a55bea32e16f87ede553f6a57738a7dc source=15.7 
       <para>
        Run built-in select-only script.
        Shorthand for <option>-b select-only</option>.
       </para>
________________________________________________________-->
       <para>
        运行内置的select-only脚本。
        <quote>select-only</quote>的简写形式是<option>-b select-only</option>。
       </para>
<!-- pgdoc-cn_end sig_en=49350840159182891b1d6b000c0e9869 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>transactions</replaceable></term>
      <term><option>--transactions=</option><replaceable>transactions</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=2f3788577c227e64cce0486e323e840e sig_cn_org=7b8c62c6dd3484fc9f904a006a51a239 source=15.7 
       <para>
        Number of transactions each client runs.  Default is 10.
       </para>
________________________________________________________-->
       <para>
        每个客户端运行的事务数量。默认值为10。
       </para>
<!-- pgdoc-cn_end sig_en=2f3788577c227e64cce0486e323e840e -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T</option> <replaceable>seconds</replaceable></term>
      <term><option>--time=</option><replaceable>seconds</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=e416612ff44c263ad77a0091cba56661 sig_cn_org=7f61198b8fe50cbeea6363139fc752d5 source=15.7 
       <para>
        Run the test for this many seconds, rather than a fixed number of
        transactions per client. <option>-t</option> and
        <option>-T</option> are mutually exclusive.
       </para>
________________________________________________________-->
       <para>
        运行测试的时间，而不是每个客户端的固定交易数量。 <option>-t</option> 和
        <option>-T</option> 是互斥的。
       </para>
<!-- pgdoc-cn_end sig_en=e416612ff44c263ad77a0091cba56661 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--vacuum-all</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=676a364da221dec5e6e3a0bad7fb5db2 sig_cn_org=45f1a454c39eb845e06b1aadb75cb42c source=15.7 
       <para>
        Vacuum all four standard tables before running the test.
        With neither <option>-n</option> nor <option>-v</option>, <application>pgbench</application> will vacuum the
        <structname>pgbench_tellers</structname> and <structname>pgbench_branches</structname>
        tables, and will truncate <structname>pgbench_history</structname>.
       </para>
________________________________________________________-->
       <para>
        在运行测试之前，清空所有四个标准表。
        如果既不使用<option>-n</option>也不使用<option>-v</option>，<application>pgbench</application>将会对
        <structname>pgbench_tellers</structname>和<structname>pgbench_branches</structname>
        表进行清理，并截断<structname>pgbench_history</structname>。
       </para>
<!-- pgdoc-cn_end sig_en=676a364da221dec5e6e3a0bad7fb5db2 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--aggregate-interval=<replaceable>seconds</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=95bc97d661a43c167a1b56f321572dad sig_cn_org=cf6b5e66cbdf82717850dc1a71c8f7c1 source=15.7 
       <para>
        Length of aggregation interval (in seconds).  May be used only
        with <option>-l</option> option.  With this option, the log contains
        per-interval summary data, as described below.
       </para>
________________________________________________________-->
       <para>
        聚合间隔的长度（以秒为单位）。只能与<option>-l</option>选项一起使用。
        使用此选项时，日志包含每个间隔的摘要数据，如下所述。
       </para>
<!-- pgdoc-cn_end sig_en=95bc97d661a43c167a1b56f321572dad -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--failures-detailed</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=baade95633a751dbf1dd0d43554482fc sig_cn_org=b834c71548dc590be63e9f7df94c053d source=15.7 
       <para>
        Report failures in per-transaction and aggregation logs, as well as in
        the main and per-script reports, grouped by the following types:
        <itemizedlist>
         <listitem>
          <para>serialization failures;</para>
         </listitem>
         <listitem>
          <para>deadlock failures;</para>
         </listitem>
        </itemizedlist>
        See <xref linkend="failures-and-retries"/> for more information.
       </para>
________________________________________________________-->
       <para>
        在每个事务和聚合日志中报告失败，以及在主要和每个脚本报告中按以下类型分组：
        <itemizedlist>
         <listitem>
          <para>序列化失败；</para>
         </listitem>
         <listitem>
          <para>死锁失败；</para>
         </listitem>
        </itemizedlist>
        更多信息请参见<xref linkend="failures-and-retries"/>。
       </para>
<!-- pgdoc-cn_end sig_en=baade95633a751dbf1dd0d43554482fc -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--log-prefix=<replaceable>prefix</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=b3f1a226aee299ae11dcfbe5b2a8d329 sig_cn_org=7f36057ec52b563099219113887fd044 source=15.7 
       <para>
        Set the filename prefix for the log files created by
        <option>-&minus;log</option>.  The default is <literal>pgbench_log</literal>.
       </para>
________________________________________________________-->
       <para>
        设置由<option>--log</option>创建的日志文件的文件名前缀。默认值为<literal>pgbench_log</literal>。
       </para>
<!-- pgdoc-cn_end sig_en=b3f1a226aee299ae11dcfbe5b2a8d329 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--max-tries=<replaceable>number_of_tries</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=832b190a670508b4b6eae2c9ba29e16c sig_cn_org=e189ad5b9ab430d010687144df55b633 source=15.7 
       <para>
        Enable retries for transactions with serialization/deadlock errors and
        set the maximum number of these tries. This option can be combined with
        the <option>-&minus;latency-limit</option> option which limits the total time
        of all transaction tries; moreover, you cannot use an unlimited number
        of tries (<literal>-&minus;max-tries=0</literal>) without
        <option>-&minus;latency-limit</option> or <option>-&minus;time</option>.
        The default value is 1 and transactions with serialization/deadlock
        errors are not retried. See <xref linkend="failures-and-retries"/>
        for more information about retrying such transactions.
       </para>
________________________________________________________-->
       <para>
        启用对出现串行化/死锁错误的事务进行重试，并设置最大重试次数。此选项可与
        <option>--latency-limit</option>选项结合使用，该选项限制所有事务尝试的总时间；
        此外，您不能在没有
        <option>--latency-limit</option>或<option>--time</option>的情况下使用无限次数
        的尝试（<literal>--max-tries=0</literal>）。
        默认值为1，出现串行化/死锁错误的事务不会重试。有关重试此类事务的更多信息，请参见
        <xref linkend="failures-and-retries"/>。
       </para>
<!-- pgdoc-cn_end sig_en=832b190a670508b4b6eae2c9ba29e16c -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--progress-timestamp</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=7b933a94fe348fa975b95b2be64f32df sig_cn_org=86fbe87def61df6c110d15093e8af9c2 source=15.7 
       <para>
        When showing progress (option <option>-P</option>), use a timestamp
        (Unix epoch) instead of the number of seconds since the
        beginning of the run.  The unit is in seconds, with millisecond
        precision after the dot.
        This helps compare logs generated by various tools.
       </para>
________________________________________________________-->
       <para>
        当显示进度（选项<option>-P</option>）时，使用时间戳（Unix纪元）而不是从运行开始以来的秒数。
        单位为秒，小数点后精确到毫秒。
        这有助于比较各种工具生成的日志。
       </para>
<!-- pgdoc-cn_end sig_en=7b933a94fe348fa975b95b2be64f32df -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--random-seed=</option><replaceable>seed</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=48375915ba4b8b5ec12812a7873b3f01 sig_cn_org=74033ab41fdd0f6a587ba81b080dfe6a source=15.7 
       <para>
        Set random generator seed.  Seeds the system random number generator,
        which then produces a sequence of initial generator states, one for
        each thread.
        Values for <replaceable>seed</replaceable> may be:
        <literal>time</literal> (the default, the seed is based on the current time),
        <literal>rand</literal> (use a strong random source, failing if none
        is available), or an unsigned decimal integer value.
        The random generator is invoked explicitly from a pgbench script
        (<literal>random...</literal> functions) or implicitly (for instance option
        <option>-&minus;rate</option> uses it to schedule transactions).
        When explicitly set, the value used for seeding is shown on the terminal.
        Any value allowed for <replaceable>seed</replaceable> may also be
        provided through the environment variable
        <literal>PGBENCH_RANDOM_SEED</literal>.
        To ensure that the provided seed impacts all possible uses, put this option
        first or use the environment variable.
      </para>
________________________________________________________-->
       <para>
        设置随机生成器种子。为系统随机数生成器设置种子，然后生成一系列初始生成器状态，每个线程一个。
        <replaceable>seed</replaceable>的值可以是:
        <literal>time</literal>（默认值，种子基于当前时间），
        <literal>rand</literal>（使用强随机源，如果没有可用的则失败），或者无符号十进制整数值。
        随机生成器可以在pgbench脚本中显式调用（<literal>random...</literal>函数）或隐式调用（例如选项
        <option>--rate</option>用于调度事务）。
        当显式设置时，用于种子的值将显示在终端上。
        任何允许的<replaceable>seed</replaceable>值也可以通过环境变量
        <literal>PGBENCH_RANDOM_SEED</literal>提供。
        为确保提供的种子影响所有可能的用途，将此选项放在第一位或使用环境变量。
      </para>
<!-- pgdoc-cn_end sig_en=48375915ba4b8b5ec12812a7873b3f01 -->
<!-- pgdoc-cn_start sig_en=b5c59f497e3a07cf8dbad690e8f22ce0 sig_cn_org=1878f908a8186eb1e720141837399e28 source=15.7 
      <para>
        Setting the seed explicitly allows to reproduce a <command>pgbench</command>
        run exactly, as far as random numbers are concerned.
        As the random state is managed per thread, this means the exact same
        <command>pgbench</command> run for an identical invocation if there is one
        client per thread and there are no external or data dependencies.
        From a statistical viewpoint reproducing runs exactly is a bad idea because
        it can hide the performance variability or improve performance unduly,
        e.g., by hitting the same pages as a previous run.
        However, it may also be of great help for debugging, for instance
        re-running a tricky case which leads to an error.
        Use wisely.
       </para>
________________________________________________________-->
      <para>
        明确设置种子允许精确复制<command>pgbench</command>运行，就随机数而言。
        由于每个线程管理随机状态，这意味着对于相同的调用，如果每个线程有一个客户端且没有外部或数据依赖，
        则<command>pgbench</command>运行完全相同。
        从统计角度来看，精确复制运行是一个坏主意，因为它可能隐藏性能变化或不当地提高性能，
        例如，通过命中与先前运行相同的页面。
        但是，这也可能对调试非常有帮助，例如重新运行导致错误的棘手案例。
        明智使用。
       </para>
<!-- pgdoc-cn_end sig_en=b5c59f497e3a07cf8dbad690e8f22ce0 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--sampling-rate=<replaceable>rate</replaceable></option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=42511af91ebec92a006f8dadb86d5c2e sig_cn_org=ed567931113acb4f250d6baa0cbf9256 source=15.7 
       <para>
        Sampling rate, used when writing data into the log, to reduce the
        amount of log generated. If this option is given, only the specified
        fraction of transactions are logged. 1.0 means all transactions will
        be logged, 0.05 means only 5% of the transactions will be logged.
       </para>
________________________________________________________-->
       <para>
        采样率，在写入数据到日志时使用，以减少生成的日志量。如果给定此选项，
        则只记录指定比例的事务。1.0表示将记录所有事务，0.05表示只记录5%的事务。
       </para>
<!-- pgdoc-cn_end sig_en=42511af91ebec92a006f8dadb86d5c2e -->
<!-- pgdoc-cn_start sig_en=7446b18864a9fce4511abab450859034 sig_cn_org=51e875c7c84f68fe43648e02ad9e990a source=15.7 
       <para>
        Remember to take the sampling rate into account when processing the
        log file. For example, when computing TPS values, you need to multiply
        the numbers accordingly (e.g., with 0.01 sample rate, you'll only get
        1/100 of the actual TPS).
       </para>
________________________________________________________-->
       <para>
        处理日志文件时，请记住考虑采样率。例如，在计算TPS值时，您需要相应地乘以数字（例如，使用0.01的采样率，您只会得到实际TPS的1/100）。
       </para>
<!-- pgdoc-cn_end sig_en=7446b18864a9fce4511abab450859034 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--show-script=</option><replaceable>scriptname</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=0e0dcb1cd188aecc7fb46949394019b3 sig_cn_org=c0ae7dfcfc08decd213d0c8c2aff798a source=15.7 
       <para>
        Show the actual code of builtin script <replaceable>scriptname</replaceable>
        on stderr, and exit immediately.
       </para>
________________________________________________________-->
       <para>
        显示内置脚本<replaceable>scriptname</replaceable>的实际代码在stderr上，并立即退出。
       </para>
<!-- pgdoc-cn_end sig_en=0e0dcb1cd188aecc7fb46949394019b3 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--verbose-errors</option></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=b8e772aad38070da35d1cd2dcb881a28 sig_cn_org=15edc2f723e99b79bcb177101719c00b source=15.7 
       <para>
        Print messages about all errors and failures (errors without retrying)
        including which limit for retries was exceeded and how far it was
        exceeded for the serialization/deadlock failures. (Note that in this
        case the output can be significantly increased.).
        See <xref linkend="failures-and-retries"/> for more information.
       </para>
________________________________________________________-->
       <para>
        打印有关所有错误和失败的消息（错误不重试），包括超过重试限制以及序列化/死锁失败超出了多少的信息。
        （请注意，在这种情况下，输出可能会显著增加。）。
        有关更多信息，请参见<xref linkend="failures-and-retries"/>。
       </para>
<!-- pgdoc-cn_end sig_en=b8e772aad38070da35d1cd2dcb881a28 -->
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect2>

 <refsect2 id="pgbench-common-options">
<!-- pgdoc-cn_start sig_en=19699ddb85d35f9daaad4ad32d31818f sig_cn_org=None source=14.1 
  <title>Common Options</title>
________________________________________________________-->
  <title>普通选项</title>
<!-- pgdoc-cn_end sig_en=19699ddb85d35f9daaad4ad32d31818f -->

<!-- pgdoc-cn_start sig_en=e45b4b149eadb345f5e3b8e4dcf380b7 sig_cn_org=None source=14.1 
   <para>
    <application>pgbench</application> also accepts the following common command-line
    arguments for connection parameters:

    <variablelist>

     <varlistentry>
      <term><option>-h</option> <replaceable>hostname</replaceable></term>
      <term><option>-&minus;host=</option><replaceable>hostname</replaceable></term>
      <listitem>
       <para>
        The database server's host name
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p</option> <replaceable>port</replaceable></term>
      <term><option>-&minus;port=</option><replaceable>port</replaceable></term>
      <listitem>
       <para>
        The database server's port number
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U</option> <replaceable>login</replaceable></term>
      <term><option>-&minus;username=</option><replaceable>login</replaceable></term>
      <listitem>
       <para>
        The user name to connect as
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>-&minus;version</option></term>
      <listitem>
       <para>
        Print the <application>pgbench</application> version and exit.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>-&minus;help</option></term>
      <listitem>
       <para>
        Show help about <application>pgbench</application> command line
        arguments, and exit.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
________________________________________________________-->
   <para>
    <application>pgbench</application> 还接受以下用于连接参数的常见命令行参数：

    <variablelist>

     <varlistentry>
      <term><option>-h</option> <replaceable>hostname</replaceable></term>
      <term><option>--host=</option><replaceable>hostname</replaceable></term>
      <listitem>
       <para>
        数据库服务器的主机名
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p</option> <replaceable>port</replaceable></term>
      <term><option>--port=</option><replaceable>port</replaceable></term>
      <listitem>
       <para>
        数据库服务器的端口号
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U</option> <replaceable>login</replaceable></term>
      <term><option>--username=</option><replaceable>login</replaceable></term>
      <listitem>
       <para>
        要作为哪个用户连接
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
       <para>
        打印<application>pgbench</application>版本并退出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
       <para>
        显示有关<application>pgbench</application>命令行参数的信息，并且退出。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
<!-- pgdoc-cn_end sig_en=e45b4b149eadb345f5e3b8e4dcf380b7 -->

 </refsect2>
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=2768cc2ef38e43b3ef0849d330c57e21 sig_cn_org=None source=14.1 
  <title>Exit Status</title>
________________________________________________________-->
  <title>Exit Status</title>
<!-- pgdoc-cn_end sig_en=2768cc2ef38e43b3ef0849d330c57e21 -->

<!-- pgdoc-cn_start sig_en=93269a6def6c6dfe3df23396456e8dab sig_cn_org=6ac6f0f05233248552427406ddce8b3f source=15.7 
  <para>
   A successful run will exit with status 0.  Exit status 1 indicates static
   problems such as invalid command-line options or internal errors which
   are supposed to never occur.  Early errors that occur when starting
   benchmark such as initial connection failures also exit with status 1.
   Errors during the run such as database errors or problems in the script
   will result in exit status 2. In the latter case,
   <application>pgbench</application> will print partial results.
  </para>
________________________________________________________-->
  <para>
   一个成功的运行将以状态0退出。状态1表示静态问题，如无效的命令行选项或内部错误，这些错误应该永远不会发生。
   在启动基准测试时发生的早期错误，如初始连接失败，也会以状态1退出。
   运行过程中出现的错误，如数据库错误或脚本中的问题，将导致退出状态2。在后一种情况下，
   <application>pgbench</application>将打印部分结果。
</para>
<!-- pgdoc-cn_end sig_en=93269a6def6c6dfe3df23396456e8dab -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=3b1cdb4e9f7c411322dc1c76ca7f31f3 sig_cn_org=None source=14.1 
  <title>Environment</title>
________________________________________________________-->
  <title>环境</title>
<!-- pgdoc-cn_end sig_en=3b1cdb4e9f7c411322dc1c76ca7f31f3 -->

  <variablelist>
   <varlistentry>
    <term><envar>PGDATABASE</envar></term>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGPORT</envar></term>
    <term><envar>PGUSER</envar></term>

    <listitem>
<!-- pgdoc-cn_start sig_en=f412b137fb925529b7e8d7608ee14ab0 sig_cn_org=None source=14.1 
     <para>
      Default connection parameters.
     </para>
________________________________________________________-->
     <para>
      默认连接参数。
     </para>
<!-- pgdoc-cn_end sig_en=f412b137fb925529b7e8d7608ee14ab0 -->
    </listitem>
   </varlistentry>
  </variablelist>

<!-- pgdoc-cn_start sig_en=df87a49e7afda6b9e5b4e0213a1ba7c3 sig_cn_org=None source=14.1 
  <para>
   This utility, like most other <productname>PostgreSQL</productname> utilities,
   uses the environment variables supported by <application>libpq</application>
   (see <xref linkend="libpq-envars"/>).
  </para>
________________________________________________________-->
  <para>
   此实用程序与大多数其他 <productname>PostgreSQL</productname> 实用程序一样，使用 <application>libpq</application> 支持的环境变量（请参阅 <xref linkend="libpq-envars"/>）。
  </para>
<!-- pgdoc-cn_end sig_en=df87a49e7afda6b9e5b4e0213a1ba7c3 -->

<!-- pgdoc-cn_start sig_en=72e83e1224b576d8f1aff7fc7c381f83 sig_cn_org=None source=14.1 
  <para>
   The environment variable <envar>PG_COLOR</envar> specifies whether to use
   color in diagnostic messages. Possible values are
   <literal>always</literal>, <literal>auto</literal> and
   <literal>never</literal>.
  </para>
________________________________________________________-->
  <para>
   环境变量 <envar>PG_COLOR</envar> 指定是否在诊断消息中使用颜色。 可能的值是<literal>always</literal>、<literal>auto</literal> 和
   <literal>never</literal>.
  </para>
<!-- pgdoc-cn_end sig_en=72e83e1224b576d8f1aff7fc7c381f83 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

 <refsect2 id="transactions-and-scripts" xreflabel="What Is the &quot;Transaction&quot; Actually Performed in pgbench?">
<!-- pgdoc-cn_start sig_en=b5adb14c7f57176b65293a6b8787cd8c sig_cn_org=None source=14.1 
  <title>What Is the <quote>Transaction</quote> Actually Performed in <application>pgbench</application>?</title>
________________________________________________________-->
  <title>在<application>pgbench</application>中实际执行的<quote>事务</quote>是什么？</title>
<!-- pgdoc-cn_end sig_en=b5adb14c7f57176b65293a6b8787cd8c -->

<!-- pgdoc-cn_start sig_en=b69eb29b3b9a045ec390f31dc79a9ac2 sig_cn_org=None source=14.1 
  <para>
   <application>pgbench</application> executes test scripts chosen randomly
   from a specified list.
   The scripts may include built-in scripts specified with <option>-b</option>
   and user-provided scripts specified with <option>-f</option>.
   Each script may be given a relative weight specified after an
   <literal>@</literal> so as to change its selection probability.
   The default weight is <literal>1</literal>.
   Scripts with a weight of <literal>0</literal> are ignored.
 </para>
________________________________________________________-->
  <para>
   <application>pgbench</application>执行从指定列表中随机选中的测试脚本。
   这个脚本包括带有<option>-b</option>指定的内建脚本和带有<option>-f</option>指定的用户提供的自定义脚本。
   每一个脚本可以在其后用<literal>@</literal>指定一个相对权重，这样可以更改该脚本的选择概率。
   默认权重是<literal>1</literal>。权重为<literal>0</literal>的脚本会被忽略。
 </para>
<!-- pgdoc-cn_end sig_en=b69eb29b3b9a045ec390f31dc79a9ac2 -->

<!-- pgdoc-cn_start sig_en=212898f980b764f0d2a0ba23d01d4a6f sig_cn_org=None source=14.1 
  <para>
   The default built-in transaction script (also invoked with <option>-b tpcb-like</option>)
   issues seven commands per transaction over randomly chosen <literal>aid</literal>,
   <literal>tid</literal>, <literal>bid</literal> and <literal>delta</literal>.
   The scenario is inspired by the TPC-B benchmark, but is not actually TPC-B,
   hence the name.
  </para>
________________________________________________________-->
  <para>
   默认的内建事务脚本（也会被<option>-b tpcb-like</option>调用）会在每个事务上发出七个从<literal>aid</literal>、<literal>tid</literal>、<literal>bid</literal>和<literal>delta</literal>中随机选择的命令。该场景来自于 TPC-B 基准，但并不是真正的 TPC-B，只是名字像而已。
  </para>
<!-- pgdoc-cn_end sig_en=212898f980b764f0d2a0ba23d01d4a6f -->

  <orderedlist>
   <listitem><para><literal>BEGIN;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</literal></para></listitem>
   <listitem><para><literal>SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</literal></para></listitem>
   <listitem><para><literal>INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</literal></para></listitem>
   <listitem><para><literal>END;</literal></para></listitem>
  </orderedlist>

<!-- pgdoc-cn_start sig_en=7ad88025c0cffddec08a4dc1de17941b sig_cn_org=None source=14.1 
  <para>
   If you select the <literal>simple-update</literal> built-in (also <option>-N</option>),
   steps 4 and 5 aren't included in the transaction.
   This will avoid update contention on these tables, but
   it makes the test case even less like TPC-B.
  </para>
________________________________________________________-->
  <para>
   如果选择<literal>simple-update</literal>内建脚本（还有<option>-N</option>），第 4 和 5 步不会被包括在事务中。这将避免更新那些表中的内容，但是它会让该测试用例更不像 TPC-B。
  </para>
<!-- pgdoc-cn_end sig_en=7ad88025c0cffddec08a4dc1de17941b -->

<!-- pgdoc-cn_start sig_en=bf40d3626b9c36df0608e6dd140802f9 sig_cn_org=None source=14.1 
  <para>
   If you select the <literal>select-only</literal> built-in (also <option>-S</option>),
   only the <command>SELECT</command> is issued.
  </para>
________________________________________________________-->
  <para>
   如果选择<literal>select-only</literal>内建脚本（还有<option>-S</option>），只会发出<command>SELECT</command>。
  </para>
<!-- pgdoc-cn_end sig_en=bf40d3626b9c36df0608e6dd140802f9 -->
 </refsect2>

 <refsect2>
<!-- pgdoc-cn_start sig_en=c2058f8c11aca37b41b0e95daa4a5b67 sig_cn_org=None source=14.1 
  <title>Custom Scripts</title>
________________________________________________________-->
  <title>自定义脚本</title>
<!-- pgdoc-cn_end sig_en=c2058f8c11aca37b41b0e95daa4a5b67 -->

<!-- pgdoc-cn_start sig_en=f5b240f38624c74d5e66e967ef159795 sig_cn_org=None source=14.1 
  <para>
   <application>pgbench</application> has support for running custom
   benchmark scenarios by replacing the default transaction script
   (described above) with a transaction script read from a file
   (<option>-f</option> option).  In this case a <quote>transaction</quote>
   counts as one execution of a script file.
  </para>
________________________________________________________-->
  <para>
   <application>pgbench</application>支持通过从一个文件中（<option>-f</option>选项）读取事务脚本替换默认的事务脚本（如上文所述）来运行自定义的基准场景。在这种情况中，一个<quote>事务</quote>就是一个脚本文件的一次执行。
  </para>
<!-- pgdoc-cn_end sig_en=f5b240f38624c74d5e66e967ef159795 -->

<!-- pgdoc-cn_start sig_en=e9a69065eb752d217bde9bc6ffbbbbbf sig_cn_org=None source=14.1 
  <para>
   A script file contains one or more SQL commands terminated by
   semicolons.  Empty lines and lines beginning with
   <literal>-&minus;</literal> are ignored.  Script files can also contain
   <quote>meta commands</quote>, which are interpreted by <application>pgbench</application>
   itself, as described below.
  </para>
________________________________________________________-->
  <para>
   脚本文件包含一个或者多个被分号终结的 SQL 命令。空行以及以<literal>--</literal>开始的行会被忽略。脚本文件也可以包含<quote>元命令</quote>，它会由<application>pgbench</application>自身解释，详见下文。
  </para>
<!-- pgdoc-cn_end sig_en=e9a69065eb752d217bde9bc6ffbbbbbf -->

  <note>
<!-- pgdoc-cn_start sig_en=a2e18abf016e995a7494176bef25cd64 sig_cn_org=None source=14.1 
   <para>
    Before <productname>PostgreSQL</productname> 9.6, SQL commands in script files
    were terminated by newlines, and so they could not be continued across
    lines.  Now a semicolon is <emphasis>required</emphasis> to separate consecutive
    SQL commands (though an SQL command does not need one if it is followed
    by a meta command).  If you need to create a script file that works with
    both old and new versions of <application>pgbench</application>, be sure to write
    each SQL command on a single line ending with a semicolon.
   </para>
________________________________________________________-->
   <para>
    在<productname>PostgreSQL</productname> 9.6 之前，脚本文件中的 SQL 命令被新行终结，因此命令不能跨行。现在<emphasis>需要</emphasis>分号来分隔连续的 SQL 命令（如果 SQL 命令后面跟着一个元命令则不需要一个分号）。如果需要创建一个能在新旧版本<application>pgbench</application>下工作的脚本文件，要确保把每个 SQL 命令写在一个由分号终结的行中。
   </para>
<!-- pgdoc-cn_end sig_en=a2e18abf016e995a7494176bef25cd64 -->
<!-- pgdoc-cn_start sig_en=396d97e84742c2334b95567b3241bc21 sig_cn_org=f66c297d88588633a9a195a0bb87e1a5 source=15.7 
   <para>
    It is assumed that pgbench scripts do not contain incomplete blocks of SQL
    transactions. If at runtime the client reaches the end of the script without
    completing the last transaction block, it will be aborted.
   </para>
________________________________________________________-->
   <para>
    假设pgbench脚本不包含不完整的SQL事务块。如果在运行时，客户端在未完成最后一个事务块的情况下到达脚本的末尾，它将被中止。
   </para>
<!-- pgdoc-cn_end sig_en=396d97e84742c2334b95567b3241bc21 -->
  </note>

<!-- pgdoc-cn_start sig_en=d11e25d12cea8769f6c96a7d5733ba2d sig_cn_org=None source=14.1 
  <para>
   There is a simple variable-substitution facility for script files.
   Variable names must consist of letters (including non-Latin letters),
   digits, and underscores, with the first character not being a digit.
   Variables can be set by the command-line <option>-D</option> option,
   explained above, or by the meta commands explained below.
   In addition to any variables preset by <option>-D</option> command-line options,
   there are a few variables that are preset automatically, listed in
   <xref linkend="pgbench-automatic-variables"/>. A value specified for these
   variables using <option>-D</option> takes precedence over the automatic presets.
   Once set, a variable's
   value can be inserted into an SQL command by writing
   <literal>:</literal><replaceable>variablename</replaceable>.  When running more than
   one client session, each session has its own set of variables.
   <application>pgbench</application> supports up to 255 variable uses in one
   statement.
  </para>
________________________________________________________-->
  <para>
   对脚本文件有一种简单的变量替换功能。变量名必须由字母（包括非拉丁字母）、数字以及下划线构成，并且首个字符不能是数字。
   如上所述，变量可以用命令行的 <option>-D</option>选项设置，或者按下文所说的使用元命令设置。
   除了用<option>-D</option>命令行选项预先设置的任何变量之外，还有一些被自动预先设置的变量，它们被列在<xref linkend="pgbench-automatic-variables"/>中。
   一个用<option>-D</option>为这些变量值指定的值会优先于自动的预设值。
   一旦被设置，可以在 SQL 命令中写<literal>:</literal><replaceable>variablename</replaceable>来插入一个变量的值。
   当运行多于一个客户端会话时，每一个会话拥有它自己的变量集合。
   <application>pgbench</application>在一个语句中支持使用多达255个变量。
  </para>
<!-- pgdoc-cn_end sig_en=d11e25d12cea8769f6c96a7d5733ba2d -->

   <table id="pgbench-automatic-variables">
<!-- pgdoc-cn_start sig_en=28cef2e6098659a494c622d96d6dc10b sig_cn_org=None source=14.1 
    <title>pgbench Automatic Variables</title>
________________________________________________________-->
    <title>pgbench 自动变量</title>
<!-- pgdoc-cn_end sig_en=28cef2e6098659a494c622d96d6dc10b -->
    <tgroup cols="2">
     <colspec colname="col1" colwidth="1*"/>
     <colspec colname="col2" colwidth="2*"/>
     <thead>
<!-- pgdoc-cn_start sig_en=d3e8da91e877604e8f108b60c1bce3ec sig_cn_org=None source=14.1 
      <row>
       <entry>Variable</entry>
       <entry>Description</entry>
      </row>
________________________________________________________-->
      <row>
       <entry>变量</entry>
       <entry>简介</entry>
      </row>
<!-- pgdoc-cn_end sig_en=d3e8da91e877604e8f108b60c1bce3ec -->
     </thead>

     <tbody>
<!-- pgdoc-cn_start sig_en=8373ac114370e0f64bc684094bba4db4 sig_cn_org=None source=14.1 
      <row>
       <entry> <literal>client_id</literal> </entry>
       <entry>unique number identifying the client session (starts from zero)</entry>
      </row>
________________________________________________________-->
      <row>
       <entry> <literal>client_id</literal> </entry>
       <entry>标识客户端会话的唯一编号（从零开始）</entry>
      </row>
<!-- pgdoc-cn_end sig_en=8373ac114370e0f64bc684094bba4db4 -->

<!-- pgdoc-cn_start sig_en=3c5172863c9d26899e7b55f1f37f7881 sig_cn_org=None source=14.1 
      <row>
       <entry> <literal>default_seed</literal> </entry>
       <entry>seed used in hash and pseudorandom permutation functions by default</entry>
      </row>
________________________________________________________-->
      <row>
       <entry> <literal>default_seed</literal> </entry>
       <entry>默认在哈希和伪随机置换函数中使用的种子</entry>
      </row>
<!-- pgdoc-cn_end sig_en=3c5172863c9d26899e7b55f1f37f7881 -->

<!-- pgdoc-cn_start sig_en=ba6303ca6185f82cf7caa13500c783ae sig_cn_org=None source=14.1 
      <row>
       <entry> <literal>random_seed</literal> </entry>
       <entry>random generator seed (unless overwritten with <option>-D</option>)</entry>
      </row>
________________________________________________________-->
      <row>
       <entry> <literal>random_seed</literal> </entry>
       <entry>随机数生成器种子（除非用<option>-D</option>重载）</entry>
      </row>
<!-- pgdoc-cn_end sig_en=ba6303ca6185f82cf7caa13500c783ae -->

<!-- pgdoc-cn_start sig_en=abf356b735cc76daf914eb6ccafa49a6 sig_cn_org=None source=14.1 
      <row>
       <entry> <literal>scale</literal> </entry>
       <entry>current scale factor</entry>
      </row>
________________________________________________________-->
      <row>
       <entry> <literal>scale</literal> </entry>
       <entry>当前的缩放因子</entry>
      </row>
<!-- pgdoc-cn_end sig_en=abf356b735cc76daf914eb6ccafa49a6 -->
     </tbody>
    </tgroup>
   </table>

<!-- pgdoc-cn_start sig_en=2b3bf37956c6da1f5ce00b1e35c5d9cb sig_cn_org=None source=14.1 
  <para>
   Script file meta commands begin with a backslash (<literal>\</literal>) and
   normally extend to the end of the line, although they can be continued
   to additional lines by writing backslash-return.
   Arguments to a meta command are separated by white space.
   These meta commands are supported:
  </para>
________________________________________________________-->
  <para>
   脚本文件元命令以反斜线（<literal>\</literal>）开始并且通常延伸到行的末尾，不过它们也能够通过写一个反斜线回车继续到额外行。一个元命令和它的参数用空白分隔。支持的元命令是：
  </para>
<!-- pgdoc-cn_end sig_en=2b3bf37956c6da1f5ce00b1e35c5d9cb -->

  <variablelist>
   <varlistentry id='pgbench-metacommand-gset'>
    <term>
     <literal>\gset [<replaceable>prefix</replaceable>]</literal>
     <literal>\aset [<replaceable>prefix</replaceable>]</literal>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=53017071e27da04ad43e2bbbbeb39ffe sig_cn_org=None source=14.1 
     <para>
      These commands may be used to end SQL queries, taking the place of the
      terminating semicolon (<literal>;</literal>).
     </para>
________________________________________________________-->
     <para>
      这些命令可以用于结束 SQL 查询，代替终止分号 (<literal>;</literal>)。
     </para>
<!-- pgdoc-cn_end sig_en=53017071e27da04ad43e2bbbbeb39ffe -->

<!-- pgdoc-cn_start sig_en=05bcbb6ba54031ea9e9eacc98206766f sig_cn_org=None source=14.1 
     <para>
      When the <literal>\gset</literal> command is used, the preceding SQL query is
      expected to return one row, the columns of which are stored into variables
      named after column names, and prefixed with <replaceable>prefix</replaceable>
      if provided.
     </para>
________________________________________________________-->
     <para>
      当使用<literal>\gset</literal>命令时，前面的 SQL 查询预期返回一行，存储变量名的列在列名后面，如果已经提供的话，则以<replaceable>prefix</replaceable>作为前缀。
     </para>
<!-- pgdoc-cn_end sig_en=05bcbb6ba54031ea9e9eacc98206766f -->

<!-- pgdoc-cn_start sig_en=9d731255934a3de45623d5cd8b7ee797 sig_cn_org=None source=14.1 
     <para>
      When the <literal>\aset</literal> command is used, all combined SQL queries
      (separated by <literal>\;</literal>) have their columns stored into variables
      named after column names, and prefixed with <replaceable>prefix</replaceable>
      if provided. If a query returns no row, no assignment is made and the variable
      can be tested for existence to detect this. If a query returns more than one
      row, the last value is kept.
     </para>
________________________________________________________-->
     <para>
      使用<literal>\aset</literal>命令时，所有组合的SQL查询（由<literal>\;</literal>分隔）将其列存储到以列名命名的变量中，如果提供，则以<replaceable>前缀</replaceable>作为前缀。如果查询不返回任何行，则不进行赋值，并且可以测试变量是否存在以检测这一点。如果查询返回多行，则保留最后一个值。
     </para>
<!-- pgdoc-cn_end sig_en=9d731255934a3de45623d5cd8b7ee797 -->

<!-- pgdoc-cn_start sig_en=35b8bc94f6ff198212593175d8118b70 sig_cn_org=None source=14.1 
     <para>
      <literal>\gset</literal> and <literal>\aset</literal> cannot be used in
      pipeline mode, since the query results are not yet available by the time
      the commands would need them.
     </para>
________________________________________________________-->
     <para>
      <literal>\gset</literal> 和 <literal>\aset</literal> 不能用在管道模式，因为在命令需要它们的时候，查询结果还不可用。
     </para>
<!-- pgdoc-cn_end sig_en=35b8bc94f6ff198212593175d8118b70 -->

<!-- pgdoc-cn_start sig_en=5ac8e2b8e11bc3cadd096cb07cbe9869 sig_cn_org=None source=14.1 
     <para>
      The following example puts the final account balance from the first query
      into variable <replaceable>abalance</replaceable>, and fills variables
      <replaceable>p_two</replaceable> and <replaceable>p_three</replaceable>
      with integers from the third query.
      The result of the second query is discarded.
      The result of the two last combined queries are stored in variables
      <replaceable>four</replaceable> and <replaceable>five</replaceable>.
<programlisting>
UPDATE pgbench_accounts
  SET abalance = abalance + :delta
  WHERE aid = :aid
  RETURNING abalance \gset
-&minus; compound of two queries
SELECT 1 \;
SELECT 2 AS two, 3 AS three \gset p_
SELECT 4 AS four \; SELECT 5 AS five \aset
</programlisting></para>
________________________________________________________-->
     <para>
      下面的示例将第一个查询中的最终帐户余额放入变量<replaceable>abalance</replaceable>，
      并且用第三个查询中的整数填充变量<replaceable>p_two</replaceable>和<replaceable>p_three</replaceable>。
      第二个查询的结果将被丢弃。
      最后两个组合查询的结果存储在变量<replaceable>four</replaceable> 和 <replaceable>five</replaceable> 中。
<programlisting>
UPDATE pgbench_accounts
  SET abalance = abalance + :delta
  WHERE aid = :aid
  RETURNING abalance \gset
-- compound of two queries
SELECT 1 \;
SELECT 2 AS two, 3 AS three \gset p_
SELECT 4 AS four \; SELECT 5 AS five \aset
</programlisting></para>
<!-- pgdoc-cn_end sig_en=5ac8e2b8e11bc3cadd096cb07cbe9869 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>\if</literal> <replaceable class="parameter">expression</replaceable></term>
    <term><literal>\elif</literal> <replaceable class="parameter">expression</replaceable></term>
    <term><literal>\else</literal></term>
    <term><literal>\endif</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=da91ced420f24502bb4d1bf566ccde78 sig_cn_org=None source=14.1 
     <para>
      This group of commands implements nestable conditional blocks,
      similarly to <literal>psql</literal>'s <xref linkend="psql-metacommand-if"/>.
      Conditional expressions are identical to those with <literal>\set</literal>,
      with non-zero values interpreted as true.
     </para>
________________________________________________________-->
     <para>
      这一组命令实现了可嵌套的条件块，类似于<literal>psql</literal>的<xref linkend="psql-metacommand-if"/>。条件表达式与<literal>\set</literal>的相同，非零值会被解释为真。
     </para>
<!-- pgdoc-cn_end sig_en=da91ced420f24502bb4d1bf566ccde78 -->
    </listitem>
   </varlistentry>

   <varlistentry id='pgbench-metacommand-set'>
    <term>
     <literal>\set <replaceable>varname</replaceable> <replaceable>expression</replaceable></literal>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=10bdb5309088064f784a5cb560cf3973 sig_cn_org=None source=14.1 
     <para>
      Sets variable <replaceable>varname</replaceable> to a value calculated
      from <replaceable>expression</replaceable>.
      The expression may contain the <literal>NULL</literal> constant,
      Boolean constants <literal>TRUE</literal> and <literal>FALSE</literal>,
      integer constants such as <literal>5432</literal>,
      double constants such as <literal>3.14159</literal>,
      references to variables <literal>:</literal><replaceable>variablename</replaceable>,
      <link linkend="pgbench-builtin-operators">operators</link>
      with their usual SQL precedence and associativity,
      <link linkend="pgbench-builtin-functions">function calls</link>,
      SQL <link linkend="functions-case"><token>CASE</token> generic conditional
      expressions</link> and parentheses.
     </para>
________________________________________________________-->
     <para>
      设置变量<replaceable>varname</replaceable>为一个从<replaceable>expression</replaceable>计算出的值。该表达式可以包含<literal>NULL</literal>常量、布尔常量<literal>TRUE</literal>和<literal>FALSE</literal>、<literal>5432</literal>这样的整数常量、<literal>3.14159</literal>这样的double常量、对变量的引用<literal>:</literal><replaceable>variablename</replaceable>、
      <link linkend="pgbench-builtin-operators">操作符</link>（保持它们通常的SQL优先级和结合性）、<link linkend="pgbench-builtin-functions">函数调用</link>、
      SQL <link linkend="functions-case"><token>CASE</token>一般条件表达式</link>以及括号。
     </para>
<!-- pgdoc-cn_end sig_en=10bdb5309088064f784a5cb560cf3973 -->

<!-- pgdoc-cn_start sig_en=2c307f7d869132b6c8efee47fd3cc7a8 sig_cn_org=None source=14.1 
     <para>
      Functions and most operators return <literal>NULL</literal> on
      <literal>NULL</literal> input.
     </para>
________________________________________________________-->
     <para>
      函数和大部分操作符在<literal>NULL</literal>输入上会返回<literal>NULL</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=2c307f7d869132b6c8efee47fd3cc7a8 -->

<!-- pgdoc-cn_start sig_en=cb478a8ce3337ce59fdc07280c17f4cf sig_cn_org=None source=14.1 
     <para>
      For conditional purposes, non zero numerical values are
      <literal>TRUE</literal>, zero numerical values and <literal>NULL</literal>
      are <literal>FALSE</literal>.
     </para>
________________________________________________________-->
     <para>
      对于条件目的，非零数字值是<literal>TRUE</literal>，数字零值以及<literal>NULL</literal>是<literal>FALSE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=cb478a8ce3337ce59fdc07280c17f4cf -->

<!-- pgdoc-cn_start sig_en=3596df3e37fe20b9f3a87a1cb56077cb sig_cn_org=None source=14.1 
     <para>
      Too large or small integer and double constants, as well as
      integer arithmetic operators (<literal>+</literal>,
      <literal>-</literal>, <literal>*</literal> and <literal>/</literal>)
      raise errors on overflows.
     </para>
________________________________________________________-->
     <para>
      太大或太小的整数和双常量，以及整数算术运算符（<literal>+</literal>,<literal>-</literal>, <literal>*</literal> 和 <literal>/</literal>）会引发溢出错误。
     </para>
<!-- pgdoc-cn_end sig_en=3596df3e37fe20b9f3a87a1cb56077cb -->

<!-- pgdoc-cn_start sig_en=6130960a213cf7b77203d5616d9ea697 sig_cn_org=None source=14.1 
     <para>
      When no final <token>ELSE</token> clause is provided to a
      <token>CASE</token>, the default value is <literal>NULL</literal>.
     </para>
________________________________________________________-->
     <para>
      在没有为<token>CASE</token>提供最终的<token>ELSE</token>子句时，默认值是<literal>NULL</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=6130960a213cf7b77203d5616d9ea697 -->

<!-- pgdoc-cn_start sig_en=44d05cdf6cb54fff9e76a7532d20f30e sig_cn_org=None source=14.1 
     <para>
      Examples:
<programlisting>
\set ntellers 10 * :scale
\set aid (1021 * random(1, 100000 * :scale)) % \
           (100000 * :scale) + 1
\set divx CASE WHEN :x &lt;&gt; 0 THEN :y/:x ELSE NULL END
</programlisting></para>
________________________________________________________-->
     <para>
      示例：
<programlisting>
\set ntellers 10 * :scale
\set aid (1021 * random(1, 100000 * :scale)) % \
           (100000 * :scale) + 1
\set divx CASE WHEN :x &lt;&gt; 0 THEN :y/:x ELSE NULL END
</programlisting></para>
<!-- pgdoc-cn_end sig_en=44d05cdf6cb54fff9e76a7532d20f30e -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\sleep <replaceable>number</replaceable> [ us | ms | s ]</literal>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=bf9d64e3ea1374db1a29b23796bbcda0 sig_cn_org=None source=14.1 
     <para>
      Causes script execution to sleep for the specified duration in
      microseconds (<literal>us</literal>), milliseconds (<literal>ms</literal>) or seconds
      (<literal>s</literal>).  If the unit is omitted then seconds are the default.
      <replaceable>number</replaceable> can be either an integer constant or a
      <literal>:</literal><replaceable>variablename</replaceable> reference to a variable
      having an integer value.
     </para>
________________________________________________________-->
     <para>
      导致脚本执行休眠指定的时间，时间的单位可以是微妙（<literal>us</literal>）、毫秒（<literal>ms</literal>）或者秒（<literal>s</literal>）。如果单位被忽略，则秒是默认值。<replaceable>number</replaceable>要么是一个整数常量，要么是一个引用了具有整数值的变量的<literal>:</literal><replaceable>variablename</replaceable>。
     </para>
<!-- pgdoc-cn_end sig_en=bf9d64e3ea1374db1a29b23796bbcda0 -->

<!-- pgdoc-cn_start sig_en=17d6b20a75d1bb2d730b4a5af3a2841b sig_cn_org=None source=14.1 
     <para>
      Example:
<programlisting>
\sleep 10 ms
</programlisting></para>
________________________________________________________-->
     <para>
      例子：
<programlisting>
\sleep 10 ms
</programlisting></para>
<!-- pgdoc-cn_end sig_en=17d6b20a75d1bb2d730b4a5af3a2841b -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\setshell <replaceable>varname</replaceable> <replaceable>command</replaceable> [ <replaceable>argument</replaceable> ... ]</literal>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=c1c3f263f37b7023127a51a8727d7701 sig_cn_org=None source=14.1 
     <para>
      Sets variable <replaceable>varname</replaceable> to the result of the shell command
      <replaceable>command</replaceable> with the given <replaceable>argument</replaceable>(s).
      The command must return an integer value through its standard output.
     </para>
________________________________________________________-->
     <para>
      用给定的<replaceable>argument</replaceable>设置变量<replaceable>varname</replaceable>为 shell 命令<replaceable>command</replaceable>的结果。该命令必须通过它的标准输出返回一个整数值。
     </para>
<!-- pgdoc-cn_end sig_en=c1c3f263f37b7023127a51a8727d7701 -->

<!-- pgdoc-cn_start sig_en=487d64b89bdec2a19462aa40ec4ec31d sig_cn_org=None source=14.1 
     <para>
      <replaceable>command</replaceable> and each <replaceable>argument</replaceable> can be either
      a text constant or a <literal>:</literal><replaceable>variablename</replaceable> reference
      to a variable. If you want to use an <replaceable>argument</replaceable> starting
      with a colon, write an additional colon at the beginning of
      <replaceable>argument</replaceable>.
     </para>
________________________________________________________-->
     <para>
      <replaceable>command</replaceable>和每个<replaceable>argument</replaceable>要么是一个文本常量，要么是一个引用了一个变量的<literal>:</literal><replaceable>variablename</replaceable>。如果你想要使用以冒号开始的<replaceable>argument</replaceable>，在<replaceable>argument</replaceable>的开头写一个额外的冒号。
     </para>
<!-- pgdoc-cn_end sig_en=487d64b89bdec2a19462aa40ec4ec31d -->

<!-- pgdoc-cn_start sig_en=50c18e50ae39c502e6a7227ec08e3d39 sig_cn_org=None source=14.1 
     <para>
      Example:
<programlisting>
\setshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
________________________________________________________-->
     <para>
      例子：
<programlisting>
\setshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
<!-- pgdoc-cn_end sig_en=50c18e50ae39c502e6a7227ec08e3d39 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\shell <replaceable>command</replaceable> [ <replaceable>argument</replaceable> ... ]</literal>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=3a01c1e01fbfb0a19a6c8a911598f133 sig_cn_org=None source=14.1 
     <para>
      Same as <literal>\setshell</literal>, but the result of the command
      is discarded.
     </para>
________________________________________________________-->
     <para>
      与<literal>\setshell</literal>相同，但是结果被抛弃。
     </para>
<!-- pgdoc-cn_end sig_en=3a01c1e01fbfb0a19a6c8a911598f133 -->

<!-- pgdoc-cn_start sig_en=3f5d415401eb204e8bc9884169ab54d6 sig_cn_org=None source=14.1 
     <para>
      Example:
<programlisting>
\shell command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
________________________________________________________-->
     <para>
      例子：
<programlisting>
\shell command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
<!-- pgdoc-cn_end sig_en=3f5d415401eb204e8bc9884169ab54d6 -->
    </listitem>
   </varlistentry>

   <varlistentry id='pgbench-metacommand-pipeline'>
    <term><literal>\startpipeline</literal></term>
    <term><literal>\endpipeline</literal></term>

    <listitem>
<!-- pgdoc-cn_start sig_en=b6e3d1111d3fe7a3b83e731abd1caeef sig_cn_org=None source=14.1 
      <para>
        These commands delimit the start and end of a pipeline of SQL
        statements.  In pipeline mode, statements are sent to the server
        without waiting for the results of previous statements.  See
        <xref linkend="libpq-pipeline-mode"/> for more details.
        Pipeline mode requires the use of extended query protocol.
     </para>
________________________________________________________-->
      <para>
        这些命令界定SQL语句的管道的起始和结束。
        在管道模式，语句发送给服务器，而不用等待前一个语句的结果。
        详情参见<xref linkend="libpq-pipeline-mode"/>。
        管道模式需要用到扩展查询协议。
     </para>
<!-- pgdoc-cn_end sig_en=b6e3d1111d3fe7a3b83e731abd1caeef -->
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect2>

 <refsect2 id="pgbench-builtin-operators">
<!-- pgdoc-cn_start sig_en=c149bc90e0315a1dbd7343b7345d2afb sig_cn_org=None source=14.1 
  <title>Built-in Operators</title>
________________________________________________________-->
  <title>内建操作符</title>
<!-- pgdoc-cn_end sig_en=c149bc90e0315a1dbd7343b7345d2afb -->

<!-- pgdoc-cn_start sig_en=1e6b2c6384958d325227550028ebaced sig_cn_org=None source=14.1 
  <para>
   The arithmetic, bitwise, comparison and logical operators listed in
   <xref linkend="pgbench-operators"/> are built into <application>pgbench</application>
   and may be used in expressions appearing in
   <link linkend="pgbench-metacommand-set"><literal>\set</literal></link>.
   The operators are listed in increasing precedence order.
   Except as noted, operators taking two numeric inputs will produce
   a double value if either input is double, otherwise they produce
   an integer result.
  </para>
________________________________________________________-->
  <para>
   <xref linkend="pgbench-operators"/>中列举的算数、按位、比较以及逻辑操作符都被编译到了<application>pgbench</application>中并且可以被用于<link linkend="pgbench-metacommand-set"><literal>\set</literal></link>中出现的表达式中。
   运算符以升序排列。 除非另有说明，如果任一输入为双精度，则采用两个数字输入的运算符将产生双精度值，否则产生整数结果。
  </para>
<!-- pgdoc-cn_end sig_en=1e6b2c6384958d325227550028ebaced -->

   <table id="pgbench-operators">
<!-- pgdoc-cn_start sig_en=7cf53980f8b5c5b3f14b356e4eb30730 sig_cn_org=None source=14.1 
    <title>pgbench Operators</title>
________________________________________________________-->
    <title>pgbench操作符</title>
<!-- pgdoc-cn_end sig_en=7cf53980f8b5c5b3f14b356e4eb30730 -->
    <tgroup cols="1">
     <thead>
<!-- pgdoc-cn_start sig_en=fb35e599e1a11d09e6f5b9cc5fc7368a sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Operator
       </para>
       <para>
        Description
       </para>
       <para>
        Example(s)
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        操作符
       </para>
       <para>
        简介
       </para>
       <para>
        例子
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=fb35e599e1a11d09e6f5b9cc5fc7368a -->
     </thead>

     <tbody>
<!-- pgdoc-cn_start sig_en=6630547ea291b64f33f3ea748b276976 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>OR</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Logical OR
       </para>
       <para>
        <literal>5 or 0</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>OR</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        逻辑或
       </para>
       <para>
        <literal>5 or 0</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=6630547ea291b64f33f3ea748b276976 -->

<!-- pgdoc-cn_start sig_en=c215233e601f39b1fc7c648bd7f62e09 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>AND</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Logical AND
       </para>
       <para>
        <literal>3 and 0</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>AND</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        逻辑与
       </para>
       <para>
        <literal>3 and 0</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=c215233e601f39b1fc7c648bd7f62e09 -->

<!-- pgdoc-cn_start sig_en=c0e083e611913bb3fe7103dbdf4abbf5 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>NOT</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Logical NOT
       </para>
       <para>
        <literal>not false</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>NOT</literal> <replaceable>boolean</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        逻辑非
       </para>
       <para>
        <literal>not false</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=c0e083e611913bb3fe7103dbdf4abbf5 -->

<!-- pgdoc-cn_start sig_en=3ca850a2e3a6ab85d598c2bcd349369d sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>IS [NOT] (NULL|TRUE|FALSE)</literal>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Boolean value tests
       </para>
       <para>
        <literal>1 is null</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>boolean</replaceable> <literal>IS [NOT] (NULL|TRUE|FALSE)</literal>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        布尔值测试
       </para>
       <para>
        <literal>1 is null</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=3ca850a2e3a6ab85d598c2bcd349369d -->

<!-- pgdoc-cn_start sig_en=a073bfcfb59ed4ac859e3f0fa6174d3d sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>value</replaceable> <literal>ISNULL|NOTNULL</literal>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Nullness tests
       </para>
       <para>
        <literal>1 notnull</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>value</replaceable> <literal>ISNULL|NOTNULL</literal>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        空测试
       </para>
       <para>
        <literal>1 notnull</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=a073bfcfb59ed4ac859e3f0fa6174d3d -->

<!-- pgdoc-cn_start sig_en=c24c84fa3c003896c28f39cc373c0b49 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Equal
       </para>
       <para>
        <literal>5 = 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        等于
       </para>
       <para>
        <literal>5 = 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=c24c84fa3c003896c28f39cc373c0b49 -->

<!-- pgdoc-cn_start sig_en=5943a1fe48b965b32d593f6756fd88d9 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;&gt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Not equal
       </para>
       <para>
        <literal>5 &lt;&gt; 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;&gt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        不等于
       </para>
       <para>
        <literal>5 &lt;&gt; 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=5943a1fe48b965b32d593f6756fd88d9 -->

<!-- pgdoc-cn_start sig_en=e1cb18726625492a6812d51727aef82e sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>!=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Not equal
       </para>
       <para>
        <literal>5 != 5</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>!=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        不等于
       </para>
       <para>
        <literal>5 != 5</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=e1cb18726625492a6812d51727aef82e -->

<!-- pgdoc-cn_start sig_en=3f9559a81427d241449c4f576c371ff1 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Less than
       </para>
       <para>
        <literal>5 &lt; 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        小于
       </para>
       <para>
        <literal>5 &lt; 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=3f9559a81427d241449c4f576c371ff1 -->

<!-- pgdoc-cn_start sig_en=d10f9bd0b3d4ec7ecd8a2f1814eeff85 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Less than or equal to
       </para>
       <para>
        <literal>5 &lt;= 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&lt;=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        小于等于
       </para>
       <para>
        <literal>5 &lt;= 4</literal>
        <returnvalue>FALSE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=d10f9bd0b3d4ec7ecd8a2f1814eeff85 -->

<!-- pgdoc-cn_start sig_en=2d27f98f39c74122b30ac54f55a8cb28 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&gt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Greater than
       </para>
       <para>
        <literal>5 &gt; 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&gt;</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        大于
       </para>
       <para>
        <literal>5 &gt; 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=2d27f98f39c74122b30ac54f55a8cb28 -->

<!-- pgdoc-cn_start sig_en=90ff02115c73b23b04ea4a1b11c73dde sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&gt;=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        Greater than or equal to
       </para>
       <para>
        <literal>5 &gt;= 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>&gt;=</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>boolean</replaceable></returnvalue>
       </para>
       <para>
        大于等于
       </para>
       <para>
        <literal>5 &gt;= 4</literal>
        <returnvalue>TRUE</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=90ff02115c73b23b04ea4a1b11c73dde -->

<!-- pgdoc-cn_start sig_en=22b98ef28d40e1a9ec0b27667d0df738 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>|</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        Bitwise OR
       </para>
       <para>
        <literal>1 | 2</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>|</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        按位或
       </para>
       <para>
        <literal>1 | 2</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=22b98ef28d40e1a9ec0b27667d0df738 -->

<!-- pgdoc-cn_start sig_en=da2e109ed110a059a80f1e92aa274b29 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>#</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        Bitwise XOR
       </para>
       <para>
        <literal>1 # 3</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>#</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        按位异或
       </para>
       <para>
        <literal>1 # 3</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=da2e109ed110a059a80f1e92aa274b29 -->

<!-- pgdoc-cn_start sig_en=8122c1d3f854fc40b002e570134cd9ce sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&amp;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        Bitwise AND
       </para>
       <para>
        <literal>1 &amp; 3</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&amp;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        按位与
       </para>
       <para>
        <literal>1 &amp; 3</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=8122c1d3f854fc40b002e570134cd9ce -->

<!-- pgdoc-cn_start sig_en=76073bf9ff7cf58e74ca2ae6c5f59f1a sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>~</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        Bitwise NOT
       </para>
       <para>
        <literal>~ 1</literal>
        <returnvalue>-2</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>~</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        按位非
       </para>
       <para>
        <literal>~ 1</literal>
        <returnvalue>-2</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=76073bf9ff7cf58e74ca2ae6c5f59f1a -->

<!-- pgdoc-cn_start sig_en=ea76f9c3cbd635dacd77fb11db1ad6f3 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&lt;&lt;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        Bitwise shift left
       </para>
       <para>
        <literal>1 &lt;&lt; 2</literal>
        <returnvalue>4</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&lt;&lt;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        按位左移
       </para>
       <para>
        <literal>1 &lt;&lt; 2</literal>
        <returnvalue>4</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=ea76f9c3cbd635dacd77fb11db1ad6f3 -->

<!-- pgdoc-cn_start sig_en=53e0b11e478ac94e2418455b080187cc sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&gt;&gt;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        Bitwise shift right
       </para>
       <para>
        <literal>8 &gt;&gt; 2</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>&gt;&gt;</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        按位右移
       </para>
       <para>
        <literal>8 &gt;&gt; 2</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=53e0b11e478ac94e2418455b080187cc -->

<!-- pgdoc-cn_start sig_en=6e4ae1513eee566c4953e16f4440e742 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>+</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        Addition
       </para>
       <para>
        <literal>5 + 4</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>+</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        加
       </para>
       <para>
        <literal>5 + 4</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=6e4ae1513eee566c4953e16f4440e742 -->

<!-- pgdoc-cn_start sig_en=c6974f4af78dfe25766fce465c7af1b7 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>-</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        Subtraction
       </para>
       <para>
        <literal>3 - 2.0</literal>
        <returnvalue>1.0</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>-</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        减
       </para>
       <para>
        <literal>3 - 2.0</literal>
        <returnvalue>1.0</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=c6974f4af78dfe25766fce465c7af1b7 -->

<!-- pgdoc-cn_start sig_en=06017f0f4251f88eaa0507b348df603c sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>*</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        Multiplication
       </para>
       <para>
        <literal>5 * 4</literal>
        <returnvalue>20</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>*</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        乘
       </para>
       <para>
        <literal>5 * 4</literal>
        <returnvalue>20</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=06017f0f4251f88eaa0507b348df603c -->

<!-- pgdoc-cn_start sig_en=6f62c14ddc8bd7bfcb46d112d4531c36 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>/</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        Division (truncates the result towards zero if both inputs are integers)
       </para>
       <para>
        <literal>5 / 3</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>number</replaceable> <literal>/</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        除法（如果两个输入都是整数，则将结果截断为零）
       </para>
       <para>
        <literal>5 / 3</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=6f62c14ddc8bd7bfcb46d112d4531c36 -->

<!-- pgdoc-cn_start sig_en=797ff37dc550badc5cb6d6eb47929460 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>%</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        Modulo (remainder)
       </para>
       <para>
        <literal>3 % 2</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <replaceable>integer</replaceable> <literal>%</literal> <replaceable>integer</replaceable>
        <returnvalue><replaceable>integer</replaceable></returnvalue>
       </para>
       <para>
        模（余数）
       </para>
       <para>
        <literal>3 % 2</literal>
        <returnvalue>1</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=797ff37dc550badc5cb6d6eb47929460 -->

<!-- pgdoc-cn_start sig_en=087918d89423245630b0354ed4bc5f42 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>-</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        Negation
       </para>
       <para>
        <literal>- 2.0</literal>
        <returnvalue>-2.0</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <literal>-</literal> <replaceable>number</replaceable>
        <returnvalue><replaceable>number</replaceable></returnvalue>
       </para>
       <para>
        取反
       </para>
       <para>
        <literal>- 2.0</literal>
        <returnvalue>-2.0</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=087918d89423245630b0354ed4bc5f42 -->
     </tbody>
    </tgroup>
   </table>
 </refsect2>

 <refsect2 id="pgbench-builtin-functions">
<!-- pgdoc-cn_start sig_en=0f76776d20886b294cfcf3afc09faf5c sig_cn_org=None source=14.1 
  <title>Built-In Functions</title>
________________________________________________________-->
  <title>内建函数</title>
<!-- pgdoc-cn_end sig_en=0f76776d20886b294cfcf3afc09faf5c -->

<!-- pgdoc-cn_start sig_en=e595ad7f1bce4c77cec115def9ee2938 sig_cn_org=None source=14.1 
  <para>
   The functions listed in <xref linkend="pgbench-functions"/> are built
   into <application>pgbench</application> and may be used in expressions appearing in
   <link linkend="pgbench-metacommand-set"><literal>\set</literal></link>.
  </para>
________________________________________________________-->
  <para>
   <xref linkend="pgbench-functions"/>中列出的函数被编译在<application>pgbench</application>中，并且可能被用在出现于<link linkend="pgbench-metacommand-set"><literal>\set</literal></link>的表达式中。
  </para>
<!-- pgdoc-cn_end sig_en=e595ad7f1bce4c77cec115def9ee2938 -->

   <!-- list pgbench functions in alphabetical order -->
   <table id="pgbench-functions">
<!-- pgdoc-cn_start sig_en=7e926a58f1f94d255d77fdf3af6c3629 sig_cn_org=None source=14.1 
    <title>pgbench Functions</title>
________________________________________________________-->
    <title>pgbench 函数</title>
<!-- pgdoc-cn_end sig_en=7e926a58f1f94d255d77fdf3af6c3629 -->
    <tgroup cols="1">
     <thead>
<!-- pgdoc-cn_start sig_en=aea31b510d403ec475cd76fb26ed5e1f sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Function
       </para>
       <para>
        Description
       </para>
       <para>
        Example(s)
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        函数
       </para>
       <para>
        简介
       </para>
       <para>
        例子
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=aea31b510d403ec475cd76fb26ed5e1f -->
     </thead>

     <tbody>
<!-- pgdoc-cn_start sig_en=07fe6fe5abed9a9967eb096d4b821ee7 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>abs</function> ( <replaceable>number</replaceable> )
        <returnvalue></returnvalue> same type as input
       </para>
       <para>
        Absolute value
       </para>
       <para>
        <literal>abs(-17)</literal>
        <returnvalue>17</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>abs</function> ( <replaceable>number</replaceable> )
        <returnvalue></returnvalue> 与输入类型相同
       </para>
       <para>
        绝对值
       </para>
       <para>
        <literal>abs(-17)</literal>
        <returnvalue>17</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=07fe6fe5abed9a9967eb096d4b821ee7 -->

<!-- pgdoc-cn_start sig_en=259205eb13e8af8e08e474d92310e44b sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>debug</function> ( <replaceable>number</replaceable> )
        <returnvalue></returnvalue> same type as input
       </para>
       <para>
        Prints the argument to <systemitem>stderr</systemitem>,
        and returns the argument.
       </para>
       <para>
        <literal>debug(5432.1)</literal>
        <returnvalue>5432.1</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>debug</function> ( <replaceable>number</replaceable> )
        <returnvalue></returnvalue> 与输入类型相同
       </para>
       <para>
        将参数打印到<systemitem>stderr</systemitem>，并返回参数。
       </para>
       <para>
        <literal>debug(5432.1)</literal>
        <returnvalue>5432.1</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=259205eb13e8af8e08e474d92310e44b -->

<!-- pgdoc-cn_start sig_en=752ef0d726d70402cc823c5bf63510a4 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>double</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        Casts to double.
       </para>
       <para>
        <literal>double(5432)</literal>
        <returnvalue>5432.0</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>double</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        造型成double。
       </para>
       <para>
        <literal>double(5432)</literal>
        <returnvalue>5432.0</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=752ef0d726d70402cc823c5bf63510a4 -->

<!-- pgdoc-cn_start sig_en=61017c2270360527360f675bdd61e835 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>exp</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        Exponential (<literal>e</literal> raised to the given power)
       </para>
       <para>
        <literal>exp(1.0)</literal>
        <returnvalue>2.718281828459045</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>exp</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        指数（<literal>e</literal> 给定幂）
       </para>
       <para>
        <literal>exp(1.0)</literal>
        <returnvalue>2.718281828459045</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=61017c2270360527360f675bdd61e835 -->

<!-- pgdoc-cn_start sig_en=f074cf3ea6a9e8855df3b277e48736b6 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>greatest</function> ( <replaceable>number</replaceable> <optional>, <literal>...</literal> </optional> )
        <returnvalue></returnvalue> <type>double</type> if any argument is double, else <type>integer</type>
       </para>
       <para>
        Selects the largest value among the arguments.
       </para>
       <para>
        <literal>greatest(5, 4, 3, 2)</literal>
        <returnvalue>5</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>greatest</function> ( <replaceable>number</replaceable> <optional>, <literal>...</literal> </optional> )
        <returnvalue></returnvalue> <type>double</type> 如果任何参数是双精度的，否则 <type>integer</type>
       </para>
       <para>
        选择参数中的最大值。
       </para>
       <para>
        <literal>greatest(5, 4, 3, 2)</literal>
        <returnvalue>5</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=f074cf3ea6a9e8855df3b277e48736b6 -->

<!-- pgdoc-cn_start sig_en=2999298a09e49bb2ffb9cae71cbf87d7 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        This is an alias for <function>hash_murmur2</function>.
       </para>
       <para>
        <literal>hash(10, 5432)</literal>
        <returnvalue>-5817877081768721676</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        这是 <function>hash_murmur2</function> 的别名。
       </para>
       <para>
        <literal>hash(10, 5432)</literal>
        <returnvalue>-5817877081768721676</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=2999298a09e49bb2ffb9cae71cbf87d7 -->

<!-- pgdoc-cn_start sig_en=97489ded390697262f1f3c94ae8b3477 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash_fnv1a</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Computes <ulink url="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">FNV-1a hash</ulink>.
       </para>
       <para>
        <literal>hash_fnv1a(10, 5432)</literal>
        <returnvalue>-7793829335365542153</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash_fnv1a</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        计算 <ulink url="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">FNV-1a hash</ulink>。
       </para>
       <para>
        <literal>hash_fnv1a(10, 5432)</literal>
        <returnvalue>-7793829335365542153</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=97489ded390697262f1f3c94ae8b3477 -->

<!-- pgdoc-cn_start sig_en=5fa87e0822a9e8284cf2dfac7d79a840 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash_murmur2</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Computes <ulink url="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash2 hash</ulink>.
       </para>
       <para>
        <literal>hash_murmur2(10, 5432)</literal>
        <returnvalue>-5817877081768721676</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>hash_murmur2</function> ( <parameter>value</parameter> <optional>, <parameter>seed</parameter> </optional> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        计算 <ulink url="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash2 hash</ulink>.
       </para>
       <para>
        <literal>hash_murmur2(10, 5432)</literal>
        <returnvalue>-5817877081768721676</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=5fa87e0822a9e8284cf2dfac7d79a840 -->

<!-- pgdoc-cn_start sig_en=a7ac7887e743faefd18d53d791e4344c sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>int</function> ( <replaceable>number</replaceable> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Casts to integer.
       </para>
       <para>
        <literal>int(5.4 + 3.8)</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>int</function> ( <replaceable>number</replaceable> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        造型成int。
       </para>
       <para>
        <literal>int(5.4 + 3.8)</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=a7ac7887e743faefd18d53d791e4344c -->

<!-- pgdoc-cn_start sig_en=fdbcedd7e7cd2f4f6b7d4161c28f665b sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>least</function> ( <replaceable>number</replaceable> <optional>, <literal>...</literal> </optional> )
        <returnvalue></returnvalue> <type>double</type> if any argument is double, else <type>integer</type>
       </para>
       <para>
        Selects the smallest value among the arguments.
       </para>
       <para>
        <literal>least(5, 4, 3, 2.1)</literal>
        <returnvalue>2.1</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>least</function> ( <replaceable>number</replaceable> <optional>, <literal>...</literal> </optional> )
        <returnvalue></returnvalue> <type>double</type> 如果任何参数是双精度的，否则 <type>integer</type>
       </para>
       <para>
        选择参数中的最小值。
       </para>
       <para>
        <literal>least(5, 4, 3, 2.1)</literal>
        <returnvalue>2.1</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=fdbcedd7e7cd2f4f6b7d4161c28f665b -->

<!-- pgdoc-cn_start sig_en=79e9f4d2e74d87da90c71063dfb5946f sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>ln</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        Natural logarithm
       </para>
       <para>
        <literal>ln(2.718281828459045)</literal>
        <returnvalue>1.0</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>ln</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        自然对数
       </para>
       <para>
        <literal>ln(2.718281828459045)</literal>
        <returnvalue>1.0</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=79e9f4d2e74d87da90c71063dfb5946f -->

<!-- pgdoc-cn_start sig_en=3bacaf60268a79e9f7f1ad3bf37e4aed sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<function>mod</function> ( <replaceable>integer</replaceable>, <replaceable>integer</replaceable> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Modulo (remainder)
       </para>
       <para>
        <literal>mod(54, 32)</literal>
        <returnvalue>22</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
<function>mod</function> ( <replaceable>integer</replaceable>, <replaceable>integer</replaceable> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        模（余数）
       </para>
       <para>
        <literal>mod(54, 32)</literal>
        <returnvalue>22</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=3bacaf60268a79e9f7f1ad3bf37e4aed -->

<!-- pgdoc-cn_start sig_en=123171804dc0bd378c6f400a3dda7d91 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>permute</function> ( <parameter>i</parameter>, <parameter>size</parameter> [, <parameter>seed</parameter> ] )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Permuted value of <parameter>i</parameter>, in the range
        <literal>[0, size)</literal>.  This is the new position of
        <parameter>i</parameter> (modulo <parameter>size</parameter>) in a
        pseudorandom permutation of the integers <literal>0...size-1</literal>,
        parameterized by <parameter>seed</parameter>, see below.
       </para>
       <para>
        <literal>permute(0, 4)</literal>
        <returnvalue>an integer between 0 and 3</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>permute</function> ( <parameter>i</parameter>, <parameter>size</parameter> [, <parameter>seed</parameter> ] )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        <parameter>i</parameter>的排列值，在范围<literal>[0, size)</literal>之间。
        这是<parameter>i</parameter>(模数 <parameter>size</parameter>)在整数<literal>0...size-1</literal>的伪随机排列中的新位置，由<parameter>seed</parameter>参数化，如下所示。
       </para>
       <para>
        <literal>permute(0, 4)</literal>
        <returnvalue>an integer between 0 and 3</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=123171804dc0bd378c6f400a3dda7d91 -->

<!-- pgdoc-cn_start sig_en=2bd8d255a00e7d3680d26a7f4b2b232c sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pi</function> ()
        <returnvalue>double</returnvalue>
       </para>
       <para>
        Approximate value of <phrase role="symbol_font">&pi;</phrase>
       </para>
       <para>
        <literal>pi()</literal>
        <returnvalue>3.14159265358979323846</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pi</function> ()
        <returnvalue>double</returnvalue>
       </para>
       <para>
        <phrase role="symbol_font">&pi;</phrase>的近似值
       </para>
       <para>
        <literal>pi()</literal>
        <returnvalue>3.14159265358979323846</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=2bd8d255a00e7d3680d26a7f4b2b232c -->

<!-- pgdoc-cn_start sig_en=a03bda307bd671f0532e9a89a1e6d65f sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pow</function> ( <parameter>x</parameter>, <parameter>y</parameter> )
        <returnvalue>double</returnvalue>
       </para>
       <para role="func_signature">
        <function>power</function> ( <parameter>x</parameter>, <parameter>y</parameter> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        <parameter>x</parameter> raised to the power of <parameter>y</parameter>
       </para>
       <para>
        <literal>pow(2.0, 10)</literal>
        <returnvalue>1024.0</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>pow</function> ( <parameter>x</parameter>, <parameter>y</parameter> )
        <returnvalue>double</returnvalue>
       </para>
       <para role="func_signature">
        <function>power</function> ( <parameter>x</parameter>, <parameter>y</parameter> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        <parameter>x</parameter> 的 <parameter>y</parameter> 次幂
       </para>
       <para>
        <literal>pow(2.0, 10)</literal>
        <returnvalue>1024.0</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=a03bda307bd671f0532e9a89a1e6d65f -->

<!-- pgdoc-cn_start sig_en=67312b4f8ba1b6266941ebabbebef330 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random</function> ( <parameter>lb</parameter>, <parameter>ub</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Computes a uniformly-distributed random integer in <literal>[lb,
        ub]</literal>.
       </para>
       <para>
        <literal>random(1, 10)</literal>
        <returnvalue>an integer between 1 and 10</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random</function> ( <parameter>lb</parameter>, <parameter>ub</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        计算<literal>[lb, ub]</literal>中的均匀分布随机整数。
       </para>
       <para>
        <literal>random(1, 10)</literal>
        <returnvalue>介于1和10之间的整数</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=67312b4f8ba1b6266941ebabbebef330 -->

<!-- pgdoc-cn_start sig_en=1a9f8c9b8e3bb9f0c063e7a24c4019a5 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_exponential</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Computes an exponentially-distributed random integer in <literal>[lb,
        ub]</literal>, see below.
       </para>
       <para>
        <literal>random_exponential(1, 10, 3.0)</literal>
        <returnvalue>an integer between 1 and 10</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_exponential</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        计算<literal>[lb, ub]</literal>中的指数分布随机整数，如下所示。
       </para>
       <para>
        <literal>random_exponential(1, 10, 3.0)</literal>
        <returnvalue>介于1和10之间的整数</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=1a9f8c9b8e3bb9f0c063e7a24c4019a5 -->

<!-- pgdoc-cn_start sig_en=361806a9687ae6e6339f875def01f86f sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_gaussian</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Computes a Gaussian-distributed random integer in <literal>[lb,
        ub]</literal>, see below.
       </para>
       <para>
        <literal>random_gaussian(1, 10, 2.5)</literal>
        <returnvalue>an integer between 1 and 10</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_gaussian</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        计算<literal>[lb, ub]</literal>中的高斯分布随机整数，如下所示。
       </para>
       <para>
        <literal>random_gaussian(1, 10, 2.5)</literal>
        <returnvalue>介于1和10之间的整数</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=361806a9687ae6e6339f875def01f86f -->

<!-- pgdoc-cn_start sig_en=edfe4f6d08f66253005217f8f33cb0f5 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_zipfian</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Computes a Zipfian-distributed random integer in <literal>[lb,
        ub]</literal>, see below.
       </para>
       <para>
        <literal>random_zipfian(1, 10, 1.5)</literal>
        <returnvalue>an integer between 1 and 10</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>random_zipfian</function> ( <parameter>lb</parameter>, <parameter>ub</parameter>, <parameter>parameter</parameter> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        计算<literal>[lb, ub]</literal>中的Zipfian分布随机整数，如下所示。
       </para>
       <para>
        <literal>random_zipfian(1, 10, 1.5)</literal>
        <returnvalue>介于1和10之间的整数</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=edfe4f6d08f66253005217f8f33cb0f5 -->

<!-- pgdoc-cn_start sig_en=7061342e3d2022734e7b0169f50b0a24 sig_cn_org=None source=14.1 
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>sqrt</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        Square root
       </para>
       <para>
        <literal>sqrt(2.0)</literal>
        <returnvalue>1.414213562</returnvalue>
       </para></entry>
      </row>
________________________________________________________-->
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>sqrt</function> ( <replaceable>number</replaceable> )
        <returnvalue>double</returnvalue>
       </para>
       <para>
        平方根
       </para>
       <para>
        <literal>sqrt(2.0)</literal>
        <returnvalue>1.414213562</returnvalue>
       </para></entry>
      </row>
<!-- pgdoc-cn_end sig_en=7061342e3d2022734e7b0169f50b0a24 -->
     </tbody>
    </tgroup>
   </table>

<!-- pgdoc-cn_start sig_en=9a5b2a51781322e46ebbcbc0734210cc sig_cn_org=None source=14.1 
   <para>
    The <literal>random</literal> function generates values using a uniform
    distribution, that is all the values are drawn within the specified
    range with equal probability. The <literal>random_exponential</literal>,
    <literal>random_gaussian</literal> and <literal>random_zipfian</literal>
    functions require an additional double parameter which determines the precise
    shape of the distribution.
   </para>
________________________________________________________-->
   <para>
    <literal>random</literal>函数使用均匀分布生成值，即所有的值都以相等的概率从指定的范围中抽出。<literal>random_exponential</literal>、<literal>random_gaussian</literal>以及<literal>random_zipfian</literal>函数要求一个额外的 double 参数，它决定分布的精确形状。
   </para>
<!-- pgdoc-cn_end sig_en=9a5b2a51781322e46ebbcbc0734210cc -->

   <itemizedlist>
    <listitem>
<!-- pgdoc-cn_start sig_en=a0831b76c841a2b459addbdd9f0537b0 sig_cn_org=None source=14.1 
     <para>
      For an exponential distribution, <replaceable>parameter</replaceable>
      controls the distribution by truncating a quickly-decreasing
      exponential distribution at <replaceable>parameter</replaceable>, and then
      projecting onto integers between the bounds.
      To be precise, with
<literallayout>
f(x) = exp(-parameter * (x - min) / (max - min + 1)) / (1 - exp(-parameter))
</literallayout>
      Then value <replaceable>i</replaceable> between <replaceable>min</replaceable> and
      <replaceable>max</replaceable> inclusive is drawn with probability:
      <literal>f(i) - f(i + 1)</literal>.
     </para>
________________________________________________________-->
     <para>
      对于指数分布，<replaceable>parameter</replaceable>通过在<replaceable>parameter</replaceable>处截断一个快速下降的指数分布来控制分布，然后投影到边界之间的整数上。确切地来说，
<literallayout>
f(x) = exp(-parameter * (x - min) / (max - min + 1)) / (1 - exp(-parameter))
</literallayout>
      然后<replaceable>min</replaceable>和<replaceable>max</replaceable>之间（包括两者）的值<replaceable>i</replaceable>会被以概率<literal>f(i) - f(i + 1)</literal>抽出。
     </para>
<!-- pgdoc-cn_end sig_en=a0831b76c841a2b459addbdd9f0537b0 -->

<!-- pgdoc-cn_start sig_en=911e4ffe173c7f40004aff56f615e573 sig_cn_org=None source=14.1 
     <para>
      Intuitively, the larger the <replaceable>parameter</replaceable>, the more
      frequently values close to <replaceable>min</replaceable> are accessed, and the
      less frequently values close to <replaceable>max</replaceable> are accessed.
      The closer to 0 <replaceable>parameter</replaceable> is, the flatter (more
      uniform) the access distribution.
      A crude approximation of the distribution is that the most frequent 1%
      values in the range, close to <replaceable>min</replaceable>, are drawn
      <replaceable>parameter</replaceable>% of the time.
      The <replaceable>parameter</replaceable> value must be strictly positive.
     </para>
________________________________________________________-->
     <para>
      直观上，<replaceable>parameter</replaceable>越大，接近<replaceable>min</replaceable>的值会被越频繁地访问，并且接近<replaceable>max</replaceable>的值会被越少访问。<replaceable>parameter</replaceable>越接近 0，访问分布会越平坦（更均匀）。该分布的粗近似值是范围中当时被抽取 <replaceable>parameter</replaceable>% 次接近<replaceable>min</replaceable>的最频繁的 1% 值。<replaceable>parameter</replaceable>值必须严格为正。
     </para>
<!-- pgdoc-cn_end sig_en=911e4ffe173c7f40004aff56f615e573 -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=4db9573143c3555bb72f32d4118123c7 sig_cn_org=None source=14.1 
     <para>
      For a Gaussian distribution, the interval is mapped onto a standard
      normal distribution (the classical bell-shaped Gaussian curve) truncated
      at <literal>-parameter</literal> on the left and <literal>+parameter</literal>
      on the right.
      Values in the middle of the interval are more likely to be drawn.
      To be precise, if <literal>PHI(x)</literal> is the cumulative distribution
      function of the standard normal distribution, with mean <literal>mu</literal>
      defined as <literal>(max + min) / 2.0</literal>, with
<literallayout>
f(x) = PHI(2.0 * parameter * (x - mu) / (max - min + 1)) /
       (2.0 * PHI(parameter) - 1)
</literallayout>
      then value <replaceable>i</replaceable> between <replaceable>min</replaceable> and
      <replaceable>max</replaceable> inclusive is drawn with probability:
      <literal>f(i + 0.5) - f(i - 0.5)</literal>.
      Intuitively, the larger the <replaceable>parameter</replaceable>, the more
      frequently values close to the middle of the interval are drawn, and the
      less frequently values close to the <replaceable>min</replaceable> and
      <replaceable>max</replaceable> bounds. About 67% of values are drawn from the
      middle <literal>1.0 / parameter</literal>, that is a relative
      <literal>0.5 / parameter</literal> around the mean, and 95% in the middle
      <literal>2.0 / parameter</literal>, that is a relative
      <literal>1.0 / parameter</literal> around the mean; for instance, if
      <replaceable>parameter</replaceable> is 4.0, 67% of values are drawn from the
      middle quarter (1.0 / 4.0) of the interval (i.e., from
      <literal>3.0 / 8.0</literal> to <literal>5.0 / 8.0</literal>) and 95% from
      the middle half (<literal>2.0 / 4.0</literal>) of the interval (second and third
      quartiles). The minimum allowed <replaceable>parameter</replaceable>
      value is 2.0.
     </para>
________________________________________________________-->
     <para>
      对于高斯分布，区间被映射到一个在左边<literal>-parameter</literal>和右边<literal>+parameter</literal>截断的标准正态分布（经典钟型高斯曲线）。区间中间的值更可能被抽到。准确地说，如果<literal>PHI(x)</literal>是标准正态分布的累计分布函数，均值<literal>mu</literal>定义为<literal>(max + min) / 2.0</literal>，有
<literallayout>
f(x) = PHI(2.0 * parameter * (x - mu) / (max - min + 1)) /
       (2.0 * PHI(parameter) - 1)
</literallayout>
      则<replaceable>min</replaceable>和<replaceable>max</replaceable>（包括两者）之间的值<replaceable>i</replaceable>被抽出的概率是：<literal>f(i + 0.5) - f(i - 0.5)</literal>。直观上，<replaceable>parameter</replaceable>越大，靠近区间终端的值会被越频繁地抽出，并且靠近上下界两端的值会被更少抽出。大约 67% 的值会被从中间<literal>1.0 / parameter</literal>的地方抽出，即均值周围<literal>0.5 / parameter</literal>的地方。并且 95% 的值会被从中间<literal>2.0 / parameter</literal>的地方抽出，即均值周围<literal>1.0 / parameter</literal>的地方。例如，如果<replaceable>parameter</replaceable>是 4.0，67% 的值会被从该区间的中间四分之一（1.0 / 4.0）抽出（即从<literal>3.0 / 8.0</literal>到<literal>5.0 / 8.0</literal>）。并且 95% 的值会从该区间的中间一半（<literal>2.0 / 4.0</literal>）抽出（第二和第三四分位）。最小允许的<replaceable>parameter</replaceable>值为 2.0。
     </para>
<!-- pgdoc-cn_end sig_en=4db9573143c3555bb72f32d4118123c7 -->
    </listitem>
    <listitem>
<!-- pgdoc-cn_start sig_en=061ff60ba68a1fad379947881756dda5 sig_cn_org=None source=14.1 
     <para>
      <literal>random_zipfian</literal> generates a bounded Zipfian
      distribution.
      <replaceable>parameter</replaceable> defines how skewed the distribution
      is. The larger the <replaceable>parameter</replaceable>, the more
      frequently values closer to the beginning of the interval are drawn.
      The distribution is such that, assuming the range starts from 1,
      the ratio of the probability of drawing <replaceable>k</replaceable>
      versus drawing <replaceable>k+1</replaceable> is
      <literal>((<replaceable>k</replaceable>+1)/<replaceable>k</replaceable>)**<replaceable>parameter</replaceable></literal>.
      For example, <literal>random_zipfian(1, ..., 2.5)</literal> produces
      the value <literal>1</literal> about <literal>(2/1)**2.5 =
      5.66</literal> times more frequently than <literal>2</literal>, which
      itself is produced <literal>(3/2)**2.5 = 2.76</literal> times more
      frequently than <literal>3</literal>, and so on.
     </para>
________________________________________________________-->
     <para>
      <literal>random_zipfian</literal>生成一个有界的Zipfian分布。
      <replaceable>parameter</replaceable>定义该分布有多么倾斜。<replaceable>parameter</replaceable>越大，绘制越接近间隔开头的值越频繁。
      分布是这样的，假设范围从1开始，绘制<replaceable>k</replaceable>与绘制<replaceable>k+1</replaceable>的概率之比为
     <literal>((<replaceable>k</replaceable>+1)/<replaceable>k</replaceable>)**<replaceable>parameter</replaceable></literal>。
     例如，<literal>random_zipfian(1, ..., 2.5)</literal>生成值<literal>1</literal>大约<literal>(2/1)**2.5 =
      5.66</literal>次，比<literal> 2 </literal>更频繁，它本身被产生<literal>(3/2)**2.5 = 2.76</literal>次，
      比<literal>3</literal>更频繁，依此类推。
     </para>
<!-- pgdoc-cn_end sig_en=061ff60ba68a1fad379947881756dda5 -->
<!-- pgdoc-cn_start sig_en=e4adcb7967c465a5c53ba0aa10cbd6cd sig_cn_org=None source=14.1 
     <para>
      <application>pgbench</application>'s implementation is based on
      "Non-Uniform Random Variate Generation", Luc Devroye, p. 550-551,
      Springer 1986.  Due to limitations of that algorithm,
      the <replaceable>parameter</replaceable> value is restricted to
      the range [1.001, 1000].
     </para>
________________________________________________________-->
     <para>
      <application>pgbench</application>的实现是基于"Non-Uniform Random Variate Generation", Luc Devroye, p. 550-551,Springer 1986。
      由于该算法的限制，<replaceable>parameter</replaceable>值限制范围为[1.001, 1000]。
     </para>
<!-- pgdoc-cn_end sig_en=e4adcb7967c465a5c53ba0aa10cbd6cd -->
    </listitem>
   </itemizedlist>

   <note>
<!-- pgdoc-cn_start sig_en=9c45f5fb0852ec9378e6307975aa00db sig_cn_org=None source=14.1 
    <para>
      When designing a benchmark which selects rows non-uniformly, be aware
      that the rows chosen may be correlated with other data such as IDs from
      a sequence or the physical row ordering, which may skew performance
      measurements.
    </para>
________________________________________________________-->
    <para>
      在设计不一致选择行的基准时，要注意行的选择可能与其他数据相关，例如来自序列的IDs或物理行排序，这可能会影响性能度量。
    </para>
<!-- pgdoc-cn_end sig_en=9c45f5fb0852ec9378e6307975aa00db -->
<!-- pgdoc-cn_start sig_en=99bf9150a62b6c53583bf5771b9ac736 sig_cn_org=None source=14.1 
    <para>
      To avoid this, you may wish to use the <function>permute</function>
      function, or some other additional step with similar effect, to shuffle
      the selected rows and remove such correlations.
    </para>
________________________________________________________-->
    <para>
      为了避免这个，您可能希望使用<function>permute</function>函数，或其他具有类似效果的额外步骤，来打乱选定的行并移除此类相关性。
    </para>
<!-- pgdoc-cn_end sig_en=99bf9150a62b6c53583bf5771b9ac736 -->
   </note>

<!-- pgdoc-cn_start sig_en=c3f3238d2c95ce86f2b4fa248c2c22b3 sig_cn_org=None source=14.1 
  <para>
    Hash functions <literal>hash</literal>, <literal>hash_murmur2</literal> and
    <literal>hash_fnv1a</literal> accept an input value and an optional seed parameter.
    In case the seed isn't provided the value of <literal>:default_seed</literal>
    is used, which is initialized randomly unless set by the command-line
    <literal>-D</literal> option.
  </para>
________________________________________________________-->
  <para>
    哈希函数<literal>hash</literal>、<literal>hash_murmur2</literal>以及<literal>hash_fnv1a</literal>接受一个输入值和一个可选的种子参数。
    在没有提供种子的情况下，会使用<literal>:default_seed</literal>的值，该变量会被随机地初始化，除非用命令行的<literal>-D</literal> 选项重载。
  </para>
<!-- pgdoc-cn_end sig_en=c3f3238d2c95ce86f2b4fa248c2c22b3 -->

<!-- pgdoc-cn_start sig_en=4363a97ca42a2876ed0c84357a923f10 sig_cn_org=None source=14.1 
  <para>
    <literal>permute</literal> accepts an input value, a size, and an optional
    seed parameter.  It generates a pseudorandom permutation of integers in
    the range <literal>[0, size)</literal>, and returns the index of the input
    value in the permuted values.  The permutation chosen is parameterized by
    the seed, which defaults to <literal>:default_seed</literal>, if not
    specified.  Unlike the hash functions, <literal>permute</literal> ensures
    that there are no collisions or holes in the output values.  Input values
    outside the interval are interpreted modulo the size.  The function raises
    an error if the size is not positive.  <function>permute</function> can be
    used to scatter the distribution of non-uniform random functions such as
    <literal>random_zipfian</literal> or <literal>random_exponential</literal>
    so that values drawn more often are not trivially correlated.  For
    instance, the following <application>pgbench</application> script
    simulates a possible real world workload typical for social media and
    blogging platforms where a few accounts generate excessive load:

<programlisting>
\set size 1000000
\set r random_zipfian(1, :size, 1.07)
\set k 1 + permute(:r, :size)
</programlisting>

    In some cases several distinct distributions are needed which don't correlate
    with each other and this is when the optional seed parameter comes in handy:

<programlisting>
\set k1 1 + permute(:r, :size, :default_seed + 123)
\set k2 1 + permute(:r, :size, :default_seed + 321)
</programlisting>

    A similar behavior can also be approximated with <function>hash</function>:

<programlisting>
\set size 1000000
\set r random_zipfian(1, 100 * :size, 1.07)
\set k 1 + abs(hash(:r)) % :size
</programlisting>

    However, since <function>hash</function> generates collisions, some values
    will not be reachable and others will be more frequent than expected from
    the original distribution.
  </para>
________________________________________________________-->
  <para>
    <literal>permute</literal>接受一个输入值，大小，和一个可选种子参数。
    它生成范围在<literal>[0, size)</literal>的整数的伪随机排列，并返回排列值中的输入值的索引。
    排列选择由种子参数化，默认为<literal>:default_seed</literal>，如果没有指定。
    与hash函数不同，<literal>permute</literal>确保输出值中没有冲突或空洞。
    在间隔之外的输入值以其大小为模进行解释。
    如果大小不是正的，则该函数会抛出一个错误。
    <function>permute</function>可用于分散不一致随机函数的分布，如 <literal>random_zipfian</literal> 或 <literal>random_exponential</literal> ，以便更经常获取的值不是琐碎相关的。
    例如，下面的<application>pgbench</application>脚本模拟了社交媒体和博客平台可能存在的实际工作负载，其中一些账户产生了大量的负载:

<programlisting>
\set size 1000000
\set r random_zipfian(1, :size, 1.07)
\set k 1 + permute(:r, :size)
</programlisting>

    在一些情况中需要几个不同的分布，它们彼此之间不相关并且可选的随机数参数在此时就能派上用场：

<programlisting>
\set k1 1 + permute(:r, :size, :default_seed + 123)
\set k2 1 + permute(:r, :size, :default_seed + 321)
</programlisting>

    类似的行为也可以接近于<function>hash</function>:

<programlisting>
\set size 1000000
\set r random_zipfian(1, 100 * :size, 1.07)
\set k 1 + abs(hash(:r)) % :size
</programlisting>

    然而，由于<function>hash</function>生成冲突，有些值将无法达成，而另一些值将比原始分布中的预期更频繁。
  </para>
<!-- pgdoc-cn_end sig_en=4363a97ca42a2876ed0c84357a923f10 -->

<!-- pgdoc-cn_start sig_en=2cf5c289cd8e526fd4594d1efd52478f sig_cn_org=None source=14.1 
  <para>
   As an example, the full definition of the built-in TPC-B-like
   transaction is:

<programlisting>
\set aid random(1, 100000 * :scale)
\set bid random(1, 1 * :scale)
\set tid random(1, 10 * :scale)
\set delta random(-5000, 5000)
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
END;
</programlisting>

   This script allows each iteration of the transaction to reference
   different, randomly-chosen rows.  (This example also shows why it's
   important for each client session to have its own variables &mdash;
   otherwise they'd not be independently touching different rows.)
  </para>
________________________________________________________-->
  <para>
   作为一个例子，内建的类 TPC-B 事务的全部定义是：

<programlisting>
\set aid random(1, 100000 * :scale)
\set bid random(1, 1 * :scale)
\set tid random(1, 10 * :scale)
\set delta random(-5000, 5000)
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
END;
</programlisting>

   这个脚本允许该事务的每一次迭代能够引用不同的、被随机选择的行（这个例子也展示了为什么让每一个客户端会话有其自己的变量很重要 &mdash; 否则它们不会独立地接触不同的行）。
  </para>
<!-- pgdoc-cn_end sig_en=2cf5c289cd8e526fd4594d1efd52478f -->

 </refsect2>

 <refsect2>
<!-- pgdoc-cn_start sig_en=e9d295ddd565be559ae2680cd606b0dd sig_cn_org=None source=14.1 
  <title>Per-Transaction Logging</title>
________________________________________________________-->
  <title>对每个事务做日志</title>
<!-- pgdoc-cn_end sig_en=e9d295ddd565be559ae2680cd606b0dd -->

<!-- pgdoc-cn_start sig_en=7da3372934cacbcd3c44f5707206aac1 sig_cn_org=None source=14.1 
  <para>
   With the <option>-l</option> option (but without
   the <option>-&minus;aggregate-interval</option> option),
   <application>pgbench</application> writes information about each transaction
   to a log file.  The log file will be named
   <filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable></filename>,
   where <replaceable>prefix</replaceable> defaults to <literal>pgbench_log</literal>, and
   <replaceable>nnn</replaceable> is the PID of the
   <application>pgbench</application> process.
   The prefix can be changed by using the <option>-&minus;log-prefix</option> option.
   If the <option>-j</option> option is 2 or higher, so that there are multiple
   worker threads, each will have its own log file. The first worker will
   use the same name for its log file as in the standard single worker case.
   The additional log files for the other workers will be named
   <filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable>.<replaceable>mmm</replaceable></filename>,
   where <replaceable>mmm</replaceable> is a sequential number for each worker starting
   with 1.
  </para>
________________________________________________________-->
  <para>
   通过<option>-l</option>选项（但是没有<option>--aggregate-interval</option>选项），<application>pgbench</application>把关于每个事务的信息写入到一个日志文件。该日志文件将被命名为<filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable></filename>，其中<replaceable>prefix</replaceable>默认为<literal>pgbench_log</literal>，而<replaceable>nnn</replaceable>是<application>pgbench</application>进程的PID。前缀可以用<option>--log-prefix</option>选项更改。如果<option>-j</option>选项是2或者更高（有多个工作者线程），那么每一个工作者线程将会有它自己的日志文件。第一个工作者的日志文件的命名将和标准的单工作者情况相同。其他工作者的额外日志文件将被命名为<filename><replaceable>prefix</replaceable>.<replaceable>nnn</replaceable>.<replaceable>mmm</replaceable></filename>，其中<replaceable>mmm</replaceable>是每个工作者的一个序列号，这种序列号从1开始编。
  </para>
<!-- pgdoc-cn_end sig_en=7da3372934cacbcd3c44f5707206aac1 -->

<!-- pgdoc-cn_start sig_en=1f4905f3d22e6ea4f7d4f4fad4848472 sig_cn_org=9817e5402587839a78136355b3134e68 source=15.7 
  <para>
   Each line in a log file describes one transaction.
   It contains the following space-separated fields:

   <variablelist>
    <varlistentry>
     <term><replaceable>client_id</replaceable></term>
     <listitem>
      <para>
       identifies the client session that ran the transaction
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>transaction_no</replaceable></term>
     <listitem>
      <para>
       counts how many transactions have been run by that session
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>time</replaceable></term>
     <listitem>
      <para>
       transaction's elapsed time, in microseconds
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>script_no</replaceable></term>
     <listitem>
      <para>
       identifies the script file that was used for the transaction
       (useful when multiple scripts are specified
       with <option>-f</option> or <option>-b</option>)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>time_epoch</replaceable></term>
     <listitem>
      <para>
       transaction's completion time, as a Unix-epoch time stamp
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>time_us</replaceable></term>
     <listitem>
      <para>
       fractional-second part of transaction's completion time, in
       microseconds
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>schedule_lag</replaceable></term>
     <listitem>
      <para>
       transaction start delay, that is the difference between the
       transaction's scheduled start time and the time it actually
       started, in microseconds
       (present only if <option>-&minus;rate</option> is specified)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>retries</replaceable></term>
     <listitem>
      <para>
       count of retries after serialization or deadlock errors during the
       transaction
       (present only if <option>-&minus;max-tries</option> is not equal to one)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
________________________________________________________-->
  <para>
   每行日志文件描述一个事务。
   它包含以下以空格分隔的字段：

   <variablelist>
    <varlistentry>
     <term><replaceable>client_id</replaceable></term>
     <listitem>
      <para>
       标识运行事务的客户端会话
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>transaction_no</replaceable></term>
     <listitem>
      <para>
       计算该会话已运行的事务数量
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>time</replaceable></term>
     <listitem>
      <para>
       事务的经过时间，以微秒为单位
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>script_no</replaceable></term>
     <listitem>
      <para>
       标识用于事务的脚本文件
       (当使用多个脚本指定时有用
       使用 <option>-f</option> 或 <option>-b</option>)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>time_epoch</replaceable></term>
     <listitem>
      <para>
       事务的完成时间，作为Unix纪元时间戳
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>time_us</replaceable></term>
     <listitem>
      <para>
       事务完成时间的小数秒部分，以微秒为单位
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>schedule_lag</replaceable></term>
     <listitem>
      <para>
       事务开始延迟，即事务计划开始时间与实际开始时间之间的差异，以微秒为单位
       (仅在指定 <option>--rate</option> 时存在)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>retries</replaceable></term>
     <listitem>
      <para>
       在事务期间发生序列化或死锁错误后的重试次数
       (仅当 <option>--max-tries</option> 不等于一时存在)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
<!-- pgdoc-cn_end sig_en=1f4905f3d22e6ea4f7d4f4fad4848472 -->

<!-- pgdoc-cn_start sig_en=4e8d1be977ba9288dd3c262514fd6901 sig_cn_org=03719a663ca2432f35ddb2fc129fb134 source=15.7 
  <para>
   When both <option>-&minus;rate</option> and <option>-&minus;latency-limit</option> are used,
   the <replaceable>time</replaceable> for a skipped transaction will be reported as
   <literal>skipped</literal>.
   If the transaction ends with a failure, its <replaceable>time</replaceable>
   will be reported as <literal>failed</literal>. If you use the
   <option>-&minus;failures-detailed</option> option, the
   <replaceable>time</replaceable> of the failed transaction will be reported as
   <literal>serialization</literal> or
   <literal>deadlock</literal> depending on the type of failure (see
   <xref linkend="failures-and-retries"/> for more information).
  </para>
________________________________________________________-->
  <para>
   当同时使用<option>--rate</option>和<option>--latency-limit</option>时，
   跳过事务的<replaceable>时间</replaceable>将被报告为<literal>skipped</literal>。
   如果事务以失败结束，其<replaceable>时间</replaceable>将被报告为<literal>failed</literal>。
   如果您使用<option>--failures-detailed</option>选项，失败事务的<replaceable>时间</replaceable>将被报告为<literal>serialization</literal>或<literal>deadlock</literal>，具体取决于失败类型（有关更多信息，请参见<xref linkend="failures-and-retries"/>）。
</para>
<!-- pgdoc-cn_end sig_en=4e8d1be977ba9288dd3c262514fd6901 -->

<!-- pgdoc-cn_start sig_en=701535040f24c549b4964e11a7299c76 sig_cn_org=None source=14.1 
  <para>
   Here is a snippet of a log file generated in a single-client run:
<screen>
0 199 2241 0 1175850568 995598
0 200 2465 0 1175850568 998079
0 201 2513 0 1175850569 608
0 202 2038 0 1175850569 2663
</screen>

   Another example with <literal>-&minus;rate=100</literal>
   and <literal>-&minus;latency-limit=5</literal> (note the additional
   <replaceable>schedule_lag</replaceable> column):
<screen>
0 81 4621 0 1412881037 912698 3005
0 82 6173 0 1412881037 914578 4304
0 83 skipped 0 1412881037 914578 5217
0 83 skipped 0 1412881037 914578 5099
0 83 4722 0 1412881037 916203 3108
0 84 4142 0 1412881037 918023 2333
0 85 2465 0 1412881037 919759 740
</screen>
   In this example, transaction 82 was late, because its latency (6.173 ms) was
   over the 5 ms limit. The next two transactions were skipped, because they
   were already late before they were even started.
  </para>
________________________________________________________-->
  <para>
   这里是在单个客户端运行中生成的一个日志文件的片段：
<screen>
0 199 2241 0 1175850568 995598
0 200 2465 0 1175850568 998079
0 201 2513 0 1175850569 608
0 202 2038 0 1175850569 2663
</screen>
   
   另一个例子使用的是<literal>--rate=100</literal>以及<literal>--latency-limit=5</literal>（注意额外的
   <replaceable>schedule_lag</replaceable>列）：
<screen>
0 81 4621 0 1412881037 912698 3005
0 82 6173 0 1412881037 914578 4304
0 83 skipped 0 1412881037 914578 5217
0 83 skipped 0 1412881037 914578 5099
0 83 4722 0 1412881037 916203 3108
0 84 4142 0 1412881037 918023 2333
0 85 2465 0 1412881037 919759 740
</screen>
   在这个例子中，事务 82 迟到了，因为它的延迟（6.173 ms）超过了 
   5 ms 限制。接下来的两个事务被跳过，因为它们在开始之前就已经迟到了。
  </para>
<!-- pgdoc-cn_end sig_en=701535040f24c549b4964e11a7299c76 -->

<!-- pgdoc-cn_start sig_en=79d4e3daa77809b1aec5f96bb05d6fe5 sig_cn_org=f10b40310711b7c61e0dfc8254193bd8 source=15.7 
  <para>
   The following example shows a snippet of a log file with failures and
   retries, with the maximum number of tries set to 10 (note the additional
   <replaceable>retries</replaceable> column):
<screen>
3 0 47423 0 1499414498 34501 3
3 1 8333 0 1499414498 42848 0
3 2 8358 0 1499414498 51219 0
4 0 72345 0 1499414498 59433 6
1 3 41718 0 1499414498 67879 4
1 4 8416 0 1499414498 76311 0
3 3 33235 0 1499414498 84469 3
0 0 failed 0 1499414498 84905 9
2 0 failed 0 1499414498 86248 9
3 4 8307 0 1499414498 92788 0
</screen>
  </para>
________________________________________________________-->
  <para>
   以下示例显示了一个带有失败和重试的日志文件片段，最大尝试次数设置为10（请注意额外的<replaceable>retries</replaceable>列）：
<screen>
3 0 47423 0 1499414498 34501 3
3 1 8333 0 1499414498 42848 0
3 2 8358 0 1499414498 51219 0
4 0 72345 0 1499414498 59433 6
1 3 41718 0 1499414498 67879 4
1 4 8416 0 1499414498 76311 0
3 3 33235 0 1499414498 84469 3
0 0 failed 0 1499414498 84905 9
2 0 failed 0 1499414498 86248 9
3 4 8307 0 1499414498 92788 0
</screen>
  </para>
<!-- pgdoc-cn_end sig_en=79d4e3daa77809b1aec5f96bb05d6fe5 -->

<!-- pgdoc-cn_start sig_en=275939eb4fa20c51631716ad63a283c7 sig_cn_org=51cd9da5abb5f086030566d29bb127d4 source=15.7 
  <para>
   If the <option>-&minus;failures-detailed</option> option is used, the type of
   failure is reported in the <replaceable>time</replaceable> like this:
<screen>
3 0 47423 0 1499414498 34501 3
3 1 8333 0 1499414498 42848 0
3 2 8358 0 1499414498 51219 0
4 0 72345 0 1499414498 59433 6
1 3 41718 0 1499414498 67879 4
1 4 8416 0 1499414498 76311 0
3 3 33235 0 1499414498 84469 3
0 0 serialization 0 1499414498 84905 9
2 0 serialization 0 1499414498 86248 9
3 4 8307 0 1499414498 92788 0
</screen>
  </para>
________________________________________________________-->
  <para>
   如果使用<option>--failures-detailed</option>选项，失败的类型将在<replaceable>time</replaceable>中报告，如下所示：
<screen>
3 0 47423 0 1499414498 34501 3
3 1 8333 0 1499414498 42848 0
3 2 8358 0 1499414498 51219 0
4 0 72345 0 1499414498 59433 6
1 3 41718 0 1499414498 67879 4
1 4 8416 0 1499414498 76311 0
3 3 33235 0 1499414498 84469 3
0 0 serialization 0 1499414498 84905 9
2 0 serialization 0 1499414498 86248 9
3 4 8307 0 1499414498 92788 0
</screen>
  </para>
<!-- pgdoc-cn_end sig_en=275939eb4fa20c51631716ad63a283c7 -->

<!-- pgdoc-cn_start sig_en=0d6aeafeacc07df1e2853b007fc7b96e sig_cn_org=None source=14.1 
  <para>
   When running a long test on hardware that can handle a lot of transactions,
   the log files can become very large.  The <option>-&minus;sampling-rate</option> option
   can be used to log only a random sample of transactions.
  </para>
________________________________________________________-->
  <para>
   在能够处理大量事务的硬件上运行一次长时间的测试时，日志文件可能变得非常大。<option>--sampling-rate</option>选项能被用来只记录事务的一个随机采样。
  </para>
<!-- pgdoc-cn_end sig_en=0d6aeafeacc07df1e2853b007fc7b96e -->
 </refsect2>

 <refsect2>
<!-- pgdoc-cn_start sig_en=45cdbb2584bb6467d69883af8b5aeb23 sig_cn_org=None source=14.1 
  <title>Aggregated Logging</title>
________________________________________________________-->
  <title>聚合的日志记录</title>
<!-- pgdoc-cn_end sig_en=45cdbb2584bb6467d69883af8b5aeb23 -->

<!-- pgdoc-cn_start sig_en=225e673417cd54f6937006d1adcf0591 sig_cn_org=57ba1342eaa87dcb9c12fba1b372b070 source=15.7 
  <para>
   With the <option>-&minus;aggregate-interval</option> option, a different
   format is used for the log files.  Each log line describes one
   aggregation interval.  It contains the following space-separated
   fields:

   <variablelist>
    <varlistentry>
________________________________________________________-->
  <para>
   使用<option>--aggregate-interval</option>选项，日志文件使用不同的格式。每个日志行描述一个聚合间隔。它包含以下以空格分隔的字段：

   <variablelist>
    <varlistentry>
<!-- pgdoc-cn_end sig_en=225e673417cd54f6937006d1adcf0591 -->
     <term><replaceable>interval_start</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=ec95cbc8afc2727698b876936399704f sig_cn_org=3435cc3e248efbb40e16efab61d9e83c source=15.7 
      <para>
       start time of the interval, as a Unix-epoch time stamp
      </para>
________________________________________________________-->
      <para>
       开始时间间隔，作为Unix纪元时间戳
      </para>
<!-- pgdoc-cn_end sig_en=ec95cbc8afc2727698b876936399704f -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>num_transactions</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=85b2ab22e7e0be5582ca2bf463bc7dc3 sig_cn_org=cccba854260d22ee0d188e365ff27429 source=15.7 
      <para>
       number of transactions within the interval
      </para>
________________________________________________________-->
      <para>
       在该时间段内的交易数量
      </para>
<!-- pgdoc-cn_end sig_en=85b2ab22e7e0be5582ca2bf463bc7dc3 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>sum_latency</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=ab016d946ddf42fdb312421adbf5cc7e sig_cn_org=157ccda0b86f6a22efd3bddf6244a743 source=15.7 
      <para>
       sum of transaction latencies
      </para>
________________________________________________________-->
      <para>
       事务延迟的总和
      </para>
<!-- pgdoc-cn_end sig_en=ab016d946ddf42fdb312421adbf5cc7e -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>sum_latency_2</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=e7bed90abbd904b8925daa2ef6331ed2 sig_cn_org=f580f630462a4e81d34eaeb50bcb22f2 source=15.7 
      <para>
       sum of squares of transaction latencies
      </para>
________________________________________________________-->
      <para>
       事务延迟的平方和
      </para>
<!-- pgdoc-cn_end sig_en=e7bed90abbd904b8925daa2ef6331ed2 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>min_latency</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=70ec9e387f167173210e5b429764330b sig_cn_org=6a209c3fcf03d7ee3afb56207d649b96 source=15.7 
      <para>
       minimum transaction latency
      </para>
________________________________________________________-->
      <para>
       最小事务延迟
      </para>
<!-- pgdoc-cn_end sig_en=70ec9e387f167173210e5b429764330b -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>max_latency</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=eeac96245a5386375c5f158e6d6f7e7e sig_cn_org=51daaf0fb9357d4b7ff719dd5b334659 source=15.7 
      <para>
       maximum transaction latency
      </para>
________________________________________________________-->
      <para>
       最大事务延迟
      </para>
<!-- pgdoc-cn_end sig_en=eeac96245a5386375c5f158e6d6f7e7e -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>sum_lag</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=5e000170ec792ee5ca0e672e25c854f7 sig_cn_org=41b16bdc71e92eee7b813e0cffff8635 source=15.7 
      <para>
       sum of transaction start delays
       (zero unless <option>-&minus;rate</option> is specified)
      </para>
________________________________________________________-->
      <para>
       交易开始延迟的总和
       (除非指定了<option>--rate</option>)
      </para>
<!-- pgdoc-cn_end sig_en=5e000170ec792ee5ca0e672e25c854f7 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>sum_lag_2</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=7ce7a65b91a482f1beac8b352a24a5b1 sig_cn_org=9ce3e94da8f929d0cdbf933ab47deae3 source=15.7 
      <para>
       sum of squares of transaction start delays
       (zero unless <option>-&minus;rate</option> is specified)
      </para>
________________________________________________________-->
      <para>
       交易开始延迟的平方和（除非指定了<option>--rate</option>）
      </para>
<!-- pgdoc-cn_end sig_en=7ce7a65b91a482f1beac8b352a24a5b1 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>min_lag</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=4231c6e55fdae48931351629aadf113f sig_cn_org=d82793ef2d578b674804642f5e6e1698 source=15.7 
      <para>
       minimum transaction start delay
       (zero unless <option>-&minus;rate</option> is specified)
      </para>
________________________________________________________-->
      <para>
       最小交易开始延迟
       (除非指定了<option>--rate</option>)
      </para>
<!-- pgdoc-cn_end sig_en=4231c6e55fdae48931351629aadf113f -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>max_lag</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=e6dd1d8164e373a50f1a7bfcac72ed25 sig_cn_org=f23ac59e83497988623ad53dd16a1a9b source=15.7 
      <para>
       maximum transaction start delay
       (zero unless <option>-&minus;rate</option> is specified)
      </para>
________________________________________________________-->
      <para>
       最大交易开始延迟
       (除非指定了<option>--rate</option>)
      </para>
<!-- pgdoc-cn_end sig_en=e6dd1d8164e373a50f1a7bfcac72ed25 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>skipped</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=b7287ab82cd53b70f5ec7fbf57d3731f sig_cn_org=6d06e0a09d6bf0869defc0757d99fdbc source=15.7 
      <para>
       number of transactions skipped because they would have started too late
       (zero unless <option>-&minus;rate</option>
       and <option>-&minus;latency-limit</option> are specified)
      </para>
________________________________________________________-->
      <para>
       由于它们将会开始得太晚而被跳过的事务数量
       （除非指定了<option>--rate</option>和<option>--latency-limit</option>）
      </para>
<!-- pgdoc-cn_end sig_en=b7287ab82cd53b70f5ec7fbf57d3731f -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>retried</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=366b1e67e93c0116138321dfa81850c4 sig_cn_org=c984fdaf63249277d3195058a04f5d4a source=15.7 
      <para>
       number of retried transactions
       (zero unless <option>-&minus;max-tries</option> is not equal to one)
      </para>
________________________________________________________-->
      <para>
       重试事务的次数
       (除非<option>--max-tries</option>不等于一)
      </para>
<!-- pgdoc-cn_end sig_en=366b1e67e93c0116138321dfa81850c4 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>retries</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=98080174373b8d53bfed2a5459ca8996 sig_cn_org=b2faa654b350dd5c7868ef611a7b4278 source=15.7 
      <para>
       number of retries after serialization or deadlock errors
       (zero unless <option>-&minus;max-tries</option> is not equal to one)
      </para>
________________________________________________________-->
      <para>
       在序列化或死锁错误后的重试次数（除非<option>--max-tries</option>不等于一）
      </para>
<!-- pgdoc-cn_end sig_en=98080174373b8d53bfed2a5459ca8996 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>serialization_failures</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=9a58f8d7d88a9294ba10fdc136dfbaa6 sig_cn_org=92a2eadabfec72c43caf1c7bd931dbdc source=15.7 
      <para>
       number of transactions that got a serialization error and were not
       retried afterwards
       (zero unless <option>-&minus;failures-detailed</option> is specified)
      </para>
________________________________________________________-->
      <para>
       未重试的发生序列化错误的事务数量
       （除非指定了<option>--failures-detailed</option>）
      </para>
<!-- pgdoc-cn_end sig_en=9a58f8d7d88a9294ba10fdc136dfbaa6 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>deadlock_failures</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=da08f00a599f68d0e083fb416cca65ef sig_cn_org=a5de9d688b7d34350fde6c5450933c1d source=15.7 
      <para>
       number of transactions that got a deadlock error and were not
       retried afterwards
       (zero unless <option>-&minus;failures-detailed</option> is specified)
      </para>
________________________________________________________-->
      <para>
       未重试的死锁错误事务数量
       （除非指定了<option>--failures-detailed</option>）
      </para>
<!-- pgdoc-cn_end sig_en=da08f00a599f68d0e083fb416cca65ef -->
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

<!-- pgdoc-cn_start sig_en=1719b1eee3568d7d513ff3e4e1c6d031 sig_cn_org=f80b2f2030c1b65e113209ef1e239eba source=15.7 
  <para>
   Here is some example output generated with these options:
<screen>
<userinput>pgbench -&minus;aggregate-interval=10 -&minus;time=20 -&minus;client=10 -&minus;log -&minus;rate=1000 -&minus;latency-limit=10 -&minus;failures-detailed -&minus;max-tries=10 test</userinput>

1650260552 5178 26171317 177284491527 1136 44462 2647617 7321113867 0 9866 64 7564 28340 4148 0
1650260562 4808 25573984 220121792172 1171 62083 3037380 9666800914 0 9998 598 7392 26621 4527 0
</screen>
  </para>
________________________________________________________-->
  <para>
   这里是使用这些选项生成的一些示例输出：
<screen>
<userinput>pgbench --aggregate-interval=10 --time=20 --client=10 --log --rate=1000 --latency-limit=10 --failures-detailed --max-tries=10 test</userinput>

1650260552 5178 26171317 177284491527 1136 44462 2647617 7321113867 0 9866 64 7564 28340 4148 0
1650260562 4808 25573984 220121792172 1171 62083 3037380 9666800914 0 9998 598 7392 26621 4527 0
</screen>
  </para>
<!-- pgdoc-cn_end sig_en=1719b1eee3568d7d513ff3e4e1c6d031 -->

<!-- pgdoc-cn_start sig_en=13ccdff52bbec1ed75cc5b400acd7085 sig_cn_org=8b69d8d590cb8f0fd297da27ccc92c97 source=15.7 
  <para>
   Notice that while the plain (unaggregated) log format shows which script
   was used for each transaction, the aggregated format does not. Therefore if
   you need per-script data, you need to aggregate the data on your own.
  </para>
________________________________________________________-->
  <para>
   请注意，虽然普通（未聚合）日志格式显示了每个事务使用的脚本，但聚合格式却没有。
   因此，如果您需要按脚本的数据，您需要自行聚合数据。
</para>
<!-- pgdoc-cn_end sig_en=13ccdff52bbec1ed75cc5b400acd7085 -->

 </refsect2>

 <refsect2>
<!-- pgdoc-cn_start sig_en=d765ab566035b2ed813e48a062ba75e1 sig_cn_org=46d0c6c375793c93e6813881f458084c source=15.7 
  <title>Per-Statement Report</title>
________________________________________________________-->
  <title>每个语句的报告</title>
<!-- pgdoc-cn_end sig_en=d765ab566035b2ed813e48a062ba75e1 -->

<!-- pgdoc-cn_start sig_en=7a3e02f058d07c2cf23d91404c56fd17 sig_cn_org=ff51cff0b51ae6e68447168c93a821ee source=15.7 
  <para>
   With the <option>-r</option> option, <application>pgbench</application>
   collects the following statistics for each statement:
   <itemizedlist>
     <listitem>
       <para>
         <literal>latency</literal> &mdash; elapsed transaction time for each
         statement. <application>pgbench</application> reports an average value
         of all successful runs of the statement.
       </para>
     </listitem>
     <listitem>
       <para>
         The number of failures in this statement. See
         <xref linkend="failures-and-retries"/> for more information.
       </para>
     </listitem>
     <listitem>
       <para>
         The number of retries after a serialization or a deadlock error in this
         statement. See <xref linkend="failures-and-retries"/> for more information.
       </para>
     </listitem>
   </itemizedlist>
  </para>
________________________________________________________-->
  <para>
   使用<option>-r</option>选项，<application>pgbench</application>为每个语句收集以下统计信息：
   <itemizedlist>
     <listitem>
       <para>
         <literal>延迟</literal> &mdash; 每个语句的经过时间。<application>pgbench</application>报告该语句所有成功运行的平均值。
       </para>
     </listitem>
     <listitem>
       <para>
         该语句中的失败次数。更多信息请参见<xref linkend="failures-and-retries"/>。
       </para>
     </listitem>
     <listitem>
       <para>
         该语句在序列化或死锁错误后的重试次数。更多信息请参见<xref linkend="failures-and-retries"/>。
       </para>
     </listitem>
   </itemizedlist>
</para>
<!-- pgdoc-cn_end sig_en=7a3e02f058d07c2cf23d91404c56fd17 -->

<!-- pgdoc-cn_start sig_en=0e281192267b30e822848e5ced496efc sig_cn_org=a407d02a49b376fe84c231fbf8bc8817 source=15.7 
  <para>
   The report displays retry statistics only if the <option>-&minus;max-tries</option>
   option is not equal to 1.
  </para>
________________________________________________________-->
  <para>
   报告仅在<option>--max-tries</option>选项不等于1时显示重试统计信息。
</para>
<!-- pgdoc-cn_end sig_en=0e281192267b30e822848e5ced496efc -->

<!-- pgdoc-cn_start sig_en=143dc0b3732acbffb6285717c8c720d6 sig_cn_org=570fd4ac0471f897aa76b1c3df62d988 source=15.7 
  <para>
   All values are computed for each statement executed by every client and are
   reported after the benchmark has finished.
  </para>
________________________________________________________-->
  <para>
   所有数值都是为每个客户端执行的每个语句计算的，并在基准测试完成后报告。
  </para>
<!-- pgdoc-cn_end sig_en=143dc0b3732acbffb6285717c8c720d6 -->

<!-- pgdoc-cn_start sig_en=fb92ecda6615a06b7339d4f9a6fb4d65 sig_cn_org=0309d1f41228d99391f96d51b3e5c555 source=15.7 
  <para>
   For the default script, the output will look similar to this:
<screen>
starting vacuum...end.
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
maximum number of tries: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
number of failed transactions: 0 (0.000%)
number of transactions above the 50.0 ms latency limit: 1311/10000 (13.110 %)
latency average = 28.488 ms
latency stddev = 21.009 ms
initial connection time = 69.068 ms
tps = 346.224794 (without initial connection time)
statement latencies in milliseconds and failures:
   0.012  0  \set aid random(1, 100000 * :scale)
   0.002  0  \set bid random(1, 1 * :scale)
   0.002  0  \set tid random(1, 10 * :scale)
   0.002  0  \set delta random(-5000, 5000)
   0.319  0  BEGIN;
   0.834  0  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
   0.641  0  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
  11.126  0  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
  12.961  0  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
   0.634  0  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
   1.957  0  END;
</screen>

   Another example of output for the default script using serializable default
   transaction isolation level (<command>PGOPTIONS='-c
   default_transaction_isolation=serializable' pgbench ...</command>):
<screen>
starting vacuum...end.
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
maximum number of tries: 10
number of transactions per client: 1000
number of transactions actually processed: 6317/10000
number of failed transactions: 3683 (36.830%)
number of transactions retried: 7667 (76.670%)
total number of retries: 45339
number of transactions above the 50.0 ms latency limit: 106/6317 (1.678 %)
latency average = 17.016 ms
latency stddev = 13.283 ms
initial connection time = 45.017 ms
tps = 186.792667 (without initial connection time)
statement latencies in milliseconds, failures and retries:
  0.006     0      0  \set aid random(1, 100000 * :scale)
  0.001     0      0  \set bid random(1, 1 * :scale)
  0.001     0      0  \set tid random(1, 10 * :scale)
  0.001     0      0  \set delta random(-5000, 5000)
  0.385     0      0  BEGIN;
  0.773     0      1  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
  0.624     0      0  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
  1.098   320   3762  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
  0.582  3363  41576  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
  0.465     0      0  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
  1.933     0      0  END;
</screen></para>
________________________________________________________-->
  <para>
   对于默认脚本，输出将类似于以下内容:
<screen>
starting vacuum...end.
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
maximum number of tries: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
number of failed transactions: 0 (0.000%)
number of transactions above the 50.0 ms latency limit: 1311/10000 (13.110 %)
latency average = 28.488 ms
latency stddev = 21.009 ms
initial connection time = 69.068 ms
tps = 346.224794 (without initial connection time)
statement latencies in milliseconds and failures:
   0.012  0  \set aid random(1, 100000 * :scale)
   0.002  0  \set bid random(1, 1 * :scale)
   0.002  0  \set tid random(1, 10 * :scale)
   0.002  0  \set delta random(-5000, 5000)
   0.319  0  BEGIN;
   0.834  0  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
   0.641  0  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
  11.126  0  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
  12.961  0  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
   0.634  0  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
   1.957  0  END;
</screen>

   使用可序列化默认事务隔离级别的默认脚本的另一个输出示例
   (<command>PGOPTIONS='-c default_transaction_isolation=serializable' pgbench ...</command>):
<screen>
starting vacuum...end.
transaction type: &lt;builtin: TPC-B (sort of)&gt;
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
maximum number of tries: 10
number of transactions per client: 1000
number of transactions actually processed: 6317/10000
number of failed transactions: 3683 (36.830%)
number of transactions retried: 7667 (76.670%)
total number of retries: 45339
number of transactions above the 50.0 ms latency limit: 106/6317 (1.678 %)
latency average = 17.016 ms
latency stddev = 13.283 ms
initial connection time = 45.017 ms
tps = 186.792667 (without initial connection time)
statement latencies in milliseconds, failures and retries:
  0.006     0      0  \set aid random(1, 100000 * :scale)
  0.001     0      0  \set bid random(1, 1 * :scale)
  0.001     0      0  \set tid random(1, 10 * :scale)
  0.001     0      0  \set delta random(-5000, 5000)
  0.385     0      0  BEGIN;
  0.773     0      1  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
  0.624     0      0  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
  1.098   320   3762  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
  0.582  3363  41576  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
  0.465     0      0  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
  1.933     0      0  END;
</screen>
</para>
<!-- pgdoc-cn_end sig_en=fb92ecda6615a06b7339d4f9a6fb4d65 -->

<!-- pgdoc-cn_start sig_en=c9e23f46f55e5bc45d621d1f92357dac sig_cn_org=2b34504f39212d242de3524a9343d1b7 source=15.7 
  <para>
   If multiple script files are specified, all statistics are reported
   separately for each script file.
  </para>
________________________________________________________-->
  <para>
   如果指定了多个脚本文件，则将为每个脚本文件单独报告所有统计信息。
</para>
<!-- pgdoc-cn_end sig_en=c9e23f46f55e5bc45d621d1f92357dac -->

<!-- pgdoc-cn_start sig_en=590c9b57d4d5fbb284096884f7e383f6 sig_cn_org=None source=14.1 
  <para>
   Note that collecting the additional timing information needed for
   per-statement latency computation adds some overhead.  This will slow
   average execution speed and lower the computed TPS.  The amount
   of slowdown varies significantly depending on platform and hardware.
   Comparing average TPS values with and without latency reporting enabled
   is a good way to measure if the timing overhead is significant.
  </para>
________________________________________________________-->
  <para>
   注意为每个语句的延迟计算收集额外的时间信息会增加一些负荷。这将拖慢平均执行速度并且降低计算出的 TPS。降低的总量会很显著地依赖于平台和硬件。对比使用和不适用延迟报告时的平均 TPS 值是评估时间开销是否明显的好方法。
  </para>
<!-- pgdoc-cn_end sig_en=590c9b57d4d5fbb284096884f7e383f6 -->
 </refsect2>

 <refsect2 id="failures-and-retries" xreflabel="Failures and Serialization/Deadlock Retries">
<!-- pgdoc-cn_start sig_en=70716f3616f112645f9432d030f1cef6 sig_cn_org=564758c2bfa3b23c3ee896d8d28621d2 source=15.7 
  <title>Failures and Serialization/Deadlock Retries</title>
________________________________________________________-->
  <title>失败和序列化/死锁重试</title>
<!-- pgdoc-cn_end sig_en=70716f3616f112645f9432d030f1cef6 -->

<!-- pgdoc-cn_start sig_en=1bbcbd15622391ea4bc370049b1c9bda sig_cn_org=91d31e3b960c81d6b0e859271ec14222 source=15.7 
  <para>
   When executing <application>pgbench</application>, there are three main types
   of errors:
   <itemizedlist>
     <listitem>
       <para>
         Errors of the main program. They are the most serious and always result
         in an immediate exit from <application>pgbench</application> with the
         corresponding error message. They include:
         <itemizedlist>
           <listitem>
             <para>
               errors at the beginning of <application>pgbench</application>
               (e.g. an invalid option value);
             </para>
           </listitem>
           <listitem>
             <para>
               errors in the initialization mode (e.g. the query to create
               tables for built-in scripts fails);
             </para>
           </listitem>
           <listitem>
             <para>
               errors before starting threads (e.g. could not connect to the
               database server, syntax error in the meta command, thread
               creation failure);
             </para>
           </listitem>
           <listitem>
             <para>
               internal <application>pgbench</application> errors (which are
               supposed to never occur...).
             </para>
           </listitem>
         </itemizedlist></para>
     </listitem>
     <listitem>
       <para>
         Errors when the thread manages its clients (e.g. the client could not
         start a connection to the database server / the socket for connecting
         the client to the database server has become invalid). In such cases
         all clients of this thread stop while other threads continue to work.
       </para>
     </listitem>
     <listitem>
       <para>
         Direct client errors. They lead to immediate exit from
         <application>pgbench</application> with the corresponding error message
         only in the case of an internal <application>pgbench</application>
         error (which are supposed to never occur...). Otherwise in the worst
         case they only lead to the abortion of the failed client while other
         clients continue their run (but some client errors are handled without
         an abortion of the client and reported separately, see below). Later in
         this section it is assumed that the discussed errors are only the
         direct client errors and they are not internal
         <application>pgbench</application> errors.
       </para>
     </listitem>
   </itemizedlist>
  </para>
________________________________________________________-->
  <para>
   在执行<application>pgbench</application>时，有三种主要类型的错误：
   <itemizedlist>
     <listitem>
       <para>
         主程序的错误。它们是最严重的，总是导致立即退出<application>pgbench</application>，
		 并显示相应的错误消息。它们包括：
         <itemizedlist>
           <listitem>
             <para>
               在<application>pgbench</application>开始时的错误（例如，无效的选项值）;
             </para>
           </listitem>
           <listitem>
             <para>
               在初始化模式中的错误（例如，用于创建内置脚本的表的查询失败）;
             </para>
           </listitem>
           <listitem>
             <para>
               在启动线程之前的错误（例如，无法连接到数据库服务器，元命令中的语法错误，线程创建失败）;
             </para>
           </listitem>
           <listitem>
             <para>
               内部<application>pgbench</application>错误（理论上不应发生...）。
             </para>
           </listitem>
         </itemizedlist></para>
     </listitem>
     <listitem>
       <para>
         线程管理其客户端时的错误（例如，客户端无法启动与数据库服务器的连接/用于将客户端连接到数据库服务器的套接字已失效）。
		 在这种情况下，此线程的所有客户端都停止工作，而其他线程继续工作。
       </para>
     </listitem>
     <listitem>
       <para>
         直接客户端错误。它们只在内部<application>pgbench</application>错误的情况下导致
		 立即退出<application>pgbench</application>并显示相应的错误消息（理论上不应发生...）。
		 否则，在最坏的情况下，它们只会导致失败客户端的中止，而其他客户端继续运行
		 （但某些客户端错误会在不中止客户端的情况下处理并单独报告，见下文）。在本节的后面，
		 假定讨论的错误只是直接客户端错误，而不是内部<application>pgbench</application>错误。
       </para>
     </listitem>
   </itemizedlist>
</para>
<!-- pgdoc-cn_end sig_en=1bbcbd15622391ea4bc370049b1c9bda -->

<!-- pgdoc-cn_start sig_en=98fd479cea65752a0748b7e2fdd28c0c sig_cn_org=cca08d209f963df98e9903aba7aac1ad source=15.7 
  <para>
   A client's run is aborted in case of a serious error; for example, the
   connection with the database server was lost or the end of script was reached
   without completing the last transaction. In addition, if execution of an SQL
   or meta command fails for reasons other than serialization or deadlock errors,
   the client is aborted. Otherwise, if an SQL command fails with serialization or
   deadlock errors, the client is not aborted. In such cases, the current
   transaction is rolled back, which also includes setting the client variables
   as they were before the run of this transaction (it is assumed that one
   transaction script contains only one transaction; see
   <xref linkend="transactions-and-scripts"/> for more information).
   Transactions with serialization or deadlock errors are repeated after
   rollbacks until they complete successfully or reach the maximum
   number of tries (specified by the <option>-&minus;max-tries</option> option) / the maximum
   time of retries (specified by the <option>-&minus;latency-limit</option> option) / the end
   of benchmark (specified by the <option>-&minus;time</option> option). If
   the last trial run fails, this transaction will be reported as failed but
   the client is not aborted and continues to work.
  </para>
________________________________________________________-->
  <para>
   客户端在发生严重错误时会中止运行；例如，与数据库服务器的连接丢失或脚本结束而未完成最后一个事务。
   另外，如果执行SQL或元命令失败，原因不是串行化或死锁错误，客户端会中止。
   否则，如果SQL命令因为串行化或死锁错误而失败，客户端不会中止。
   在这种情况下，当前事务会回滚，也包括将客户端变量设置为此事务运行之前的状态
   （假设一个事务脚本只包含一个事务；详见<xref linkend="transactions-and-scripts"/>了解更多信息）。
   发生串行化或死锁错误的事务会在回滚后重试，直到成功完成或达到最大尝试次数
   （由<option>--max-tries</option>选项指定）/最大重试时间（由<option>--latency-limit</option>选项指定）
   /基准测试结束（由<option>--time</option>选项指定）。如果最后一次尝试运行失败，
   此事务将被报告为失败，但客户端不会中止并继续工作。
</para>
<!-- pgdoc-cn_end sig_en=98fd479cea65752a0748b7e2fdd28c0c -->

  <note>
<!-- pgdoc-cn_start sig_en=c8fa59325bbc79dc132996edd79a839e sig_cn_org=27f427e586f5c96b6f6e41996150b716 source=15.7 
   <para>
    Without specifying the <option>-&minus;max-tries</option> option, a transaction will
    never be retried after a serialization or deadlock error because its default
    value is 1. Use an unlimited number of tries (<literal>-&minus;max-tries=0</literal>)
    and the <option>-&minus;latency-limit</option> option to limit only the maximum time
    of tries. You can also use the <option>-&minus;time</option> option to limit the
    benchmark duration under an unlimited number of tries.
   </para>
________________________________________________________-->
   <para>
    不指定<option>--max-tries</option>选项的情况下，事务在发生序列化或死锁错误后将不会重试，因为其默认值为1。
    使用无限次尝试（<literal>--max-tries=0</literal>）和<option>--latency-limit</option>选项仅限制尝试的最大时间。
    您还可以使用<option>--time</option>选项在无限次尝试的情况下限制基准测试持续时间。
</para>
<!-- pgdoc-cn_end sig_en=c8fa59325bbc79dc132996edd79a839e -->
<!-- pgdoc-cn_start sig_en=b258bedf0c83d0e58d4d6b6292e60493 sig_cn_org=c6a9aa0977a629d7c40a943668522582 source=15.7 
   <para>
    Be careful when repeating scripts that contain multiple transactions: the
    script is always retried completely, so successful transactions can be
    performed several times.
   </para>
________________________________________________________-->
   <para>
    在重复包含多个事务的脚本时要小心：脚本总是完全重试，因此成功的事务可能会执行多次。
   </para>
<!-- pgdoc-cn_end sig_en=b258bedf0c83d0e58d4d6b6292e60493 -->
<!-- pgdoc-cn_start sig_en=f50c8b2b07f5efcd672d7841196bc153 sig_cn_org=e7b149da673e29e7af32d94f940ade6f source=15.7 
   <para>
    Be careful when repeating transactions with shell commands. Unlike the
    results of SQL commands, the results of shell commands are not rolled back,
    except for the variable value of the <command>\setshell</command> command.
   </para>
________________________________________________________-->
   <para>
    使用shell命令重复事务时要小心。与SQL命令的结果不同，shell命令的结果不会回滚，
    除非是<command>\setshell</command>命令的变量值。
   </para>
<!-- pgdoc-cn_end sig_en=f50c8b2b07f5efcd672d7841196bc153 -->
  </note>

<!-- pgdoc-cn_start sig_en=db232f953eb0cebd6d5b2b497c8ba3a7 sig_cn_org=b79dbe6636d4d12ace9304a53a2868f2 source=15.7 
  <para>
   The latency of a successful transaction includes the entire time of
   transaction execution with rollbacks and retries. The latency is measured
   only for successful transactions and commands but not for failed transactions
   or commands.
  </para>
________________________________________________________-->
  <para>
   成功事务的延迟包括事务执行的整个时间，包括回滚和重试。延迟仅针对成功的事务和命令进行测量，而不针对失败的事务或命令。
  </para>
<!-- pgdoc-cn_end sig_en=db232f953eb0cebd6d5b2b497c8ba3a7 -->

<!-- pgdoc-cn_start sig_en=2e570276daaed180f0bf703c13c64c9f sig_cn_org=53ee5361838178832b7aaf9b9465c76d source=15.7 
  <para>
   The main report contains the number of failed transactions. If the
   <option>-&minus;max-tries</option> option is not equal to 1, the main report also
   contains statistics related to retries: the total number of retried
   transactions and total number of retries. The per-script report inherits all
   these fields from the main report. The per-statement report displays retry
   statistics only if the <option>-&minus;max-tries</option> option is not equal to 1.
  </para>
________________________________________________________-->
  <para>
   主报告包含失败交易的数量。如果<option>--max-tries</option>选项不等于1，
   主报告还包含与重试相关的统计信息：重试交易的总数和重试次数。每个脚本报告都从主报告继承所有这些字段。
   每个语句报告仅在<option>--max-tries</option>选项不等于1时显示重试统计信息。
</para>
<!-- pgdoc-cn_end sig_en=2e570276daaed180f0bf703c13c64c9f -->

<!-- pgdoc-cn_start sig_en=8f643473a6abfeea56083bcd49e4a7cc sig_cn_org=3b61e5134dc761a70315ad246383a08b source=15.7 
  <para>
   If you want to group failures by basic types in per-transaction and
   aggregation logs, as well as in the main and per-script reports, use the
   <option>-&minus;failures-detailed</option> option. If you also want to distinguish
   all errors and failures (errors without retrying) by type including which
   limit for retries was exceeded and how much it was exceeded by for the
   serialization/deadlock failures, use the <option>-&minus;verbose-errors</option>
   option.
  </para>
________________________________________________________-->
  <para>
   如果您想在每个事务和聚合日志中按基本类型对失败进行分组，以及在主要和每个脚本报告中使用
   <option>--failures-detailed</option>选项。如果您还想通过类型区分所有错误和失败（不重试的错误），
   包括超出重试限制以及序列化/死锁失败的超出量，使用<option>--verbose-errors</option>选项。
</para>
<!-- pgdoc-cn_end sig_en=8f643473a6abfeea56083bcd49e4a7cc -->
 </refsect2>

 <refsect2>
<!-- pgdoc-cn_start sig_en=d5b551824a918e41e8595dd9123ccbdc sig_cn_org=None source=14.1 
  <title>Good Practices</title>
________________________________________________________-->
  <title>良好的做法</title>
<!-- pgdoc-cn_end sig_en=d5b551824a918e41e8595dd9123ccbdc -->

<!-- pgdoc-cn_start sig_en=796f43008d6194c54e011f485e5b4f54 sig_cn_org=None source=14.1 
  <para>
   It is very easy to use <application>pgbench</application> to produce completely
   meaningless numbers.  Here are some guidelines to help you get useful
   results.
  </para>
________________________________________________________-->
  <para>
   很容易使用<application>pgbench</application>产生完全没有意义的数字。这里有一些指导可以帮你得到有用的结果。
  </para>
<!-- pgdoc-cn_end sig_en=796f43008d6194c54e011f485e5b4f54 -->

<!-- pgdoc-cn_start sig_en=87a4c6a4db5de9325797844305f4dbbf sig_cn_org=None source=14.1 
  <para>
   In the first place, <emphasis>never</emphasis> believe any test that runs
   for only a few seconds.  Use the <option>-t</option> or <option>-T</option> option
   to make the run last at least a few minutes, so as to average out noise.
   In some cases you could need hours to get numbers that are reproducible.
   It's a good idea to try the test run a few times, to find out if your
   numbers are reproducible or not.
  </para>
________________________________________________________-->
  <para>
   排在第一位的是，<emphasis>永远不要</emphasis>相信任何只运行了几秒的测试。使用<option>-t</option>或<option>-T</option>选项让运行持续至少几分钟，这样可以用平均值去掉噪声。在一些情况中，你可能需要数小时来得到能重现的数字。多运行几次测试是一个好主意，这样可以看看你的数字是不是可以重现。
  </para>
<!-- pgdoc-cn_end sig_en=87a4c6a4db5de9325797844305f4dbbf -->

<!-- pgdoc-cn_start sig_en=ed76fadb13d82daf99ac5e05aba392e8 sig_cn_org=None source=14.1 
  <para>
   For the default TPC-B-like test scenario, the initialization scale factor
   (<option>-s</option>) should be at least as large as the largest number of
   clients you intend to test (<option>-c</option>); else you'll mostly be
   measuring update contention.  There are only <option>-s</option> rows in
   the <structname>pgbench_branches</structname> table, and every transaction wants to
   update one of them, so <option>-c</option> values in excess of <option>-s</option>
   will undoubtedly result in lots of transactions blocked waiting for
   other transactions.
  </para>
________________________________________________________-->
  <para>
   对于默认的类 TPC-B 测试场景，初始化的比例因子（<option>-s</option>）应该至少和你想要测试的最大客户端数量一样大（<option>-c</option>），否则你将主要在度量更新争夺。在<structname>pgbench_branches</structname>表中只有<option>-s</option>行，并且每个事务都想更新其中之一，因此<option>-c</option>值超过<option>-s</option>将毫无疑问地导致大量事务被阻塞来等待其他事务。
  </para>
<!-- pgdoc-cn_end sig_en=ed76fadb13d82daf99ac5e05aba392e8 -->

<!-- pgdoc-cn_start sig_en=656b3522bad9413d716259fa6c24e86a sig_cn_org=None source=14.1 
  <para>
   The default test scenario is also quite sensitive to how long it's been
   since the tables were initialized: accumulation of dead rows and dead space
   in the tables changes the results.  To understand the results you must keep
   track of the total number of updates and when vacuuming happens.  If
   autovacuum is enabled it can result in unpredictable changes in measured
   performance.
  </para>
________________________________________________________-->
  <para>
   默认的测试场景也对表被初始化了多久非常敏感：表中死亡行和死亡空间的累积会改变结果。要理解结果，你必须跟踪更新的总数以及何时发生清理。如果开启了自动清理，它可能会在度量的性能上产生不可预估的改变。
  </para>
<!-- pgdoc-cn_end sig_en=656b3522bad9413d716259fa6c24e86a -->

<!-- pgdoc-cn_start sig_en=01a1ae830008426e4e22859698235d5f sig_cn_org=None source=14.1 
  <para>
   A limitation of <application>pgbench</application> is that it can itself become
   the bottleneck when trying to test a large number of client sessions.
   This can be alleviated by running <application>pgbench</application> on a different
   machine from the database server, although low network latency will be
   essential.  It might even be useful to run several <application>pgbench</application>
   instances concurrently, on several client machines, against the same
   database server.
  </para>
________________________________________________________-->
  <para>
   <application>pgbench</application>的一个限制是在尝试测试大量客户端会话时，它自身可能成为瓶颈。这可以通过在数据库服务器之外的一台机器上运行<application>pgbench</application>来缓解，不过必须是具有低网络延迟的机器。甚至可以在多个客户端机器上针对同一个数据库服务器并发地运行多个<application>pgbench</application>实例。
  </para>
<!-- pgdoc-cn_end sig_en=01a1ae830008426e4e22859698235d5f -->
 </refsect2>
 <refsect2>
<!-- pgdoc-cn_start sig_en=c4f18396591d7bddfd8956518da6052b sig_cn_org=None source=14.1 
  <title>Security</title>
________________________________________________________-->
  <title>安全性</title>
<!-- pgdoc-cn_end sig_en=c4f18396591d7bddfd8956518da6052b -->

<!-- pgdoc-cn_start sig_en=5f67bf8f0d5b9578c36111d952635faa sig_cn_org=None source=14.1 
  <para>
    If untrusted users have access to a database that has not adopted a
    <link linkend="ddl-schemas-patterns">secure schema usage pattern</link>,
    do not run <application>pgbench</application> in that
    database.  <application>pgbench</application> uses unqualified names and
    does not manipulate the search path.
  </para>
________________________________________________________-->
  <para>
    如果不可信用户能够访问没有采用<link linkend="ddl-schemas-patterns">安全方案使用模式</link>的数据库，不要在那个数据库中运行<application>pgbench</application>。<application>pgbench</application>使用非限定名称并且不会操纵搜索路径。
  </para>
<!-- pgdoc-cn_end sig_en=5f67bf8f0d5b9578c36111d952635faa -->
 </refsect2>
 </refsect1>
</refentry>
