<!--
doc/src/sgml/ref/select_into.sgml
PostgreSQL documentation
-->

<refentry id="sql-selectinto">
<!-- pgdoc-cn_start sig_en=71c6a2a82cff3bff29a8c5dbdc7e7ea2 sig_cn_org=None source=14.1 
 <indexterm zone="sql-selectinto">
  <primary>SELECT INTO</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-selectinto">
  <primary>SELECT INTO</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=71c6a2a82cff3bff29a8c5dbdc7e7ea2 -->

 <refmeta>
  <refentrytitle>SELECT INTO</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=dc8e318e3692ef871954d7d17aa2a371 sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>SELECT INTO</refname>
  <refpurpose>define a new table from the results of a query</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>SELECT INTO</refname>
  <refpurpose>从一个查询的结果定义一个新表</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=dc8e318e3692ef871954d7d17aa2a371 -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=78f72c6c1127440591b5d22eb83227c1 sig_cn_org=None source=14.1 
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
SELECT [ ALL | DISTINCT [ ON ( <replaceable class="parameter">expression</replaceable> [, ...] ) ] ]
    * | <replaceable class="parameter">expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...]
    INTO [ TEMPORARY | TEMP | UNLOGGED ] [ TABLE ] <replaceable class="parameter">new_table</replaceable>
    [ FROM <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> ]
    [ GROUP BY <replaceable class="parameter">expression</replaceable> [, ...] ]
    [ HAVING <replaceable class="parameter">condition</replaceable> ]
    [ WINDOW <replaceable class="parameter">window_name</replaceable> AS ( <replaceable class="parameter">window_definition</replaceable> ) [, ...] ]
    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] <replaceable class="parameter">select</replaceable> ]
    [ ORDER BY <replaceable class="parameter">expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [ NULLS { FIRST | LAST } ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
    [ FOR { UPDATE | SHARE } [ OF <replaceable class="parameter">table_name</replaceable> [, ...] ] [ NOWAIT ] [...] ]
</synopsis>
________________________________________________________-->
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
SELECT [ ALL | DISTINCT [ ON ( <replaceable class="parameter">expression</replaceable> [, ...] ) ] ]
    * | <replaceable class="parameter">expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...]
    INTO [ TEMPORARY | TEMP | UNLOGGED ] [ TABLE ] <replaceable class="parameter">new_table</replaceable>
    [ FROM <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> ]
    [ GROUP BY <replaceable class="parameter">expression</replaceable> [, ...] ]
    [ HAVING <replaceable class="parameter">condition</replaceable> ]
    [ WINDOW <replaceable class="parameter">window_name</replaceable> AS ( <replaceable class="parameter">window_definition</replaceable> ) [, ...] ]
    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] <replaceable class="parameter">select</replaceable> ]
    [ ORDER BY <replaceable class="parameter">expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [ NULLS { FIRST | LAST } ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
    [ FOR { UPDATE | SHARE } [ OF <replaceable class="parameter">table_name</replaceable> [, ...] ] [ NOWAIT ] [...] ]
</synopsis>
<!-- pgdoc-cn_end sig_en=78f72c6c1127440591b5d22eb83227c1 -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=276b4b5b09f271cd302eaa5a3548392b sig_cn_org=None source=14.1 
  <para>
   <command>SELECT INTO</command> creates a new table and fills it
   with data computed by a query.  The data is not returned to the
   client, as it is with a normal <command>SELECT</command>.  The new
   table's columns have the names and data types associated with the
   output columns of the <command>SELECT</command>.
  </para>
________________________________________________________-->
  <para>
   <command>SELECT INTO</command>创建一个新表并且用一个查询
   计算得到的数据填充它。这些数据不会像普通的
   <command>SELECT</command>那样被返回给客户端。新表的列具有
   和<command>SELECT</command>的输出列相关的名称和数据类型。
  </para>
<!-- pgdoc-cn_end sig_en=276b4b5b09f271cd302eaa5a3548392b -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

  <variablelist>
  <varlistentry>
<!-- pgdoc-cn_start sig_en=38f5f15c2286c0019a288ab70bbfb93e sig_cn_org=None source=14.1 
   <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
________________________________________________________-->
   <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
<!-- pgdoc-cn_end sig_en=38f5f15c2286c0019a288ab70bbfb93e -->
   <listitem>
<!-- pgdoc-cn_start sig_en=5dc5c32d12d030901d82ed5e29069089 sig_cn_org=None source=14.1 
    <para>
     If specified, the table is created as a temporary table.  Refer
     to <xref linkend="sql-createtable"/> for details.
    </para>
________________________________________________________-->
    <para>
     如果被指定，该表被创建为一个临时表。详见
     <xref linkend="sql-createtable"/>。
    </para>
<!-- pgdoc-cn_end sig_en=5dc5c32d12d030901d82ed5e29069089 -->
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><literal>UNLOGGED</literal></term>
   <listitem>
<!-- pgdoc-cn_start sig_en=2dc495e869bd2c504b04ca80bffe1763 sig_cn_org=None source=14.1 
    <para>
     If specified, the table is created as an unlogged table.  Refer
     to <xref linkend="sql-createtable"/> for details.
    </para>
________________________________________________________-->
    <para>
     如果被指定，该表被创建为一个不做日志的表。详见
     <xref linkend="sql-createtable"/>。
    </para>
<!-- pgdoc-cn_end sig_en=2dc495e869bd2c504b04ca80bffe1763 -->
   </listitem>
  </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_table</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=53bb0823460e7bb61174fdc991c87c9a sig_cn_org=None source=14.1 
     <para>
      The name (optionally schema-qualified) of the table to be created.
     </para>
________________________________________________________-->
     <para>
      要创建的表的名字（可以是模式限定的）。
     </para>
<!-- pgdoc-cn_end sig_en=53bb0823460e7bb61174fdc991c87c9a -->
    </listitem>
   </varlistentry>
  </variablelist>

<!-- pgdoc-cn_start sig_en=f6ac1ed20feddc83853397de37ad65bd sig_cn_org=None source=14.1 
  <para>
   All other parameters are described in detail under <xref
   linkend="sql-select"/>.
  </para>
________________________________________________________-->
  <para>
   所有其他参数在<xref
   linkend="sql-select"/>中有详细描述。
  </para>
<!-- pgdoc-cn_end sig_en=f6ac1ed20feddc83853397de37ad65bd -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=22d21d5a92e3374b4ae38329fa613770 sig_cn_org=None source=14.1 
  <para>
   <link linkend="sql-createtableas"><command>CREATE TABLE AS</command></link> is functionally similar to
   <command>SELECT INTO</command>.  <command>CREATE TABLE AS</command>
   is the recommended syntax, since this form of <command>SELECT
   INTO</command> is not available in <application>ECPG</application>
   or <application>PL/pgSQL</application>, because they interpret the
   <literal>INTO</literal> clause differently. Furthermore,
   <command>CREATE TABLE AS</command> offers a superset of the
   functionality provided by <command>SELECT INTO</command>.
  </para>
________________________________________________________-->
  <para>
   <link linkend="sql-createtableas"><command>CREATE TABLE AS</command></link>在功能上与
   <command>SELECT INTO</command>相似。<command>CREATE TABLE AS</command>
   是被推荐的语法，因为这种形式的<command>SELECT
   INTO</command>在<application>ECPG</application>
   或<application>PL/pgSQL</application>中不可用，因为它们对
   <literal>INTO</literal>子句的解释不同。此外，
   <command>CREATE TABLE AS</command>提供的功能是
   <command>SELECT INTO</command>的超集。
  </para>
<!-- pgdoc-cn_end sig_en=22d21d5a92e3374b4ae38329fa613770 -->

<!-- pgdoc-cn_start sig_en=302259824226fc01a30fa0ca6293c5c0 sig_cn_org=873c29470e07cf4e2883b0c2745cecfa source=15.7 
  <para>
   In contrast to <command>CREATE TABLE AS</command>, <command>SELECT
   INTO</command> does not allow specifying properties like a table's access
   method with <xref linkend="sql-createtable-method" /> or the table's
   tablespace with <xref linkend="sql-createtable-tablespace" />. Use
   <command>CREATE TABLE AS</command> if necessary.  Therefore, the default table
   access method is chosen for the new table. See <xref
   linkend="guc-default-table-access-method"/> for more information.
  </para>
________________________________________________________-->
  <para>
   与<command>CREATE TABLE AS</command>相比，<command>SELECT INTO</command>不允许使用<xref linkend="sql-createtable-method" />指定表的访问方法，
   也不允许使用<xref linkend="sql-createtable-tablespace" />指定表的表空间。如有必要，请使用<command>CREATE TABLE AS</command>。
   因此，新表将选择默认的表访问方法。有关更多信息，请参见<xref linkend="guc-default-table-access-method"/>。
</para>
<!-- pgdoc-cn_end sig_en=302259824226fc01a30fa0ca6293c5c0 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=8318c5e65154756e9fa35e41b8d20393 sig_cn_org=None source=14.1 
  <para>
   Create a new table <literal>films_recent</literal> consisting of only
   recent entries from the table <literal>films</literal>:

<programlisting>
SELECT * INTO films_recent FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting></para>
________________________________________________________-->
  <para>
   创建一个只由来自<literal>films</literal>的最近项构成的
   新表<literal>films_recent</literal>：

<programlisting>
SELECT * INTO films_recent FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting></para>
<!-- pgdoc-cn_end sig_en=8318c5e65154756e9fa35e41b8d20393 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=bab801147adbdc5fb5ef8e611e77a67d sig_cn_org=None source=14.1 
  <para>
   The SQL standard uses <command>SELECT INTO</command> to
   represent selecting values into scalar variables of a host program,
   rather than creating a new table.  This indeed is the usage found
   in <application>ECPG</application> (see <xref linkend="ecpg"/>) and
   <application>PL/pgSQL</application> (see <xref linkend="plpgsql"/>).
   The <productname>PostgreSQL</productname> usage of <command>SELECT
   INTO</command> to represent table creation is historical.  Some other SQL
   implementations also use <command>SELECT INTO</command> in this way (but
   most SQL implementations support <command>CREATE TABLE AS</command>
   instead).  Apart from such compatibility considerations, it is best to use
   <command>CREATE TABLE AS</command> for this purpose in new code.
  </para>
________________________________________________________-->
  <para>
   SQL 标准使用<command>SELECT INTO</command>表示把值选择到一个宿主程序的标量变量中，而不是创建一个新表。
   这实际上就是<application>ECPG</application>（见<xref linkend="ecpg"/>）和<application>PL/pgSQL</application>（见<xref linkend="plpgsql"/>）中的用法。
   <productname>PostgreSQL</productname>使用<command>SELECT INTO</command>的来表示表创建是有历史原因的。
   一些其它SQL实现也以此方式使用 <command>SELECT INTO</command>  (但是大多数SQL实现支持<command>CREATE TABLE AS</command>)。  
   除了这样的兼容性考虑之外，最好在新代码中使用<command>CREATE TABLE AS</command>。
  </para>
<!-- pgdoc-cn_end sig_en=bab801147adbdc5fb5ef8e611e77a67d -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>另见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-createtableas"/></member>
  </simplelist>
 </refsect1>
</refentry>
