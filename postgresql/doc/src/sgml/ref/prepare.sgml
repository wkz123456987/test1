<!--
doc/src/sgml/ref/prepare.sgml
PostgreSQL documentation
-->

<refentry id="sql-prepare">
<!-- pgdoc-cn_start sig_en=2d8cc8d60769aeac89a3ae576a086051 sig_cn_org=None source=14.1 
 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=2d8cc8d60769aeac89a3ae576a086051 -->

<!-- pgdoc-cn_start sig_en=9fa31e5df7d14e1a8733c105d64a7fec sig_cn_org=None source=14.1 
 <indexterm zone="sql-prepare">
  <primary>prepared statements</primary>
  <secondary>creating</secondary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-prepare">
  <primary>prepared statements</primary>
  <secondary>creating</secondary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=9fa31e5df7d14e1a8733c105d64a7fec -->

 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=7dbe0ec9a07fc7a22d860eb2bdef92a9 sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>prepare a statement for execution</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>预备一个语句用于执行</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=7dbe0ec9a07fc7a22d860eb2bdef92a9 -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=0d798e9a3fab2fb78d2be1c2add0a99f sig_cn_org=None source=14.1 
<synopsis>
PREPARE <replaceable class="parameter">name</replaceable> [ ( <replaceable class="parameter">data_type</replaceable> [, ...] ) ] AS <replaceable class="parameter">statement</replaceable>
</synopsis>
________________________________________________________-->
<synopsis>
PREPARE <replaceable class="parameter">name</replaceable> [ ( <replaceable class="parameter">data_type</replaceable> [, ...] ) ] AS <replaceable class="parameter">statement</replaceable>
</synopsis>
<!-- pgdoc-cn_end sig_en=0d798e9a3fab2fb78d2be1c2add0a99f -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=5eec1e695892f70de2f433ff5e69afff sig_cn_org=None source=14.1 
  <para>
   <command>PREPARE</command> creates a prepared statement. A prepared
   statement is a server-side object that can be used to optimize
   performance. When the <command>PREPARE</command> statement is
   executed, the specified statement is parsed, analyzed, and rewritten.
   When an <command>EXECUTE</command> command is subsequently
   issued, the prepared statement is planned and executed.  This division
   of labor avoids repetitive parse analysis work, while allowing
   the execution plan to depend on the specific parameter values supplied.
  </para>
________________________________________________________-->
  <para>
   <command>PREPARE</command>创建一个预备语句。预备语句是一种服务器端对象，它可以被用来优化性能。当<command>PREPARE</command>语句被执行时，指定的语句会被解析、分析并且重写。当后续发出一个<command>EXECUTE</command>命令时，该预备语句会被规划并且执行。这种工作的划分避免了重复性的解析分析工作，同时允许执行计划依赖所提供的特定参数值。
  </para>
<!-- pgdoc-cn_end sig_en=5eec1e695892f70de2f433ff5e69afff -->

<!-- pgdoc-cn_start sig_en=a3d4bd8b00a6852decc677f864ca8e40 sig_cn_org=None source=14.1 
  <para>
   Prepared statements can take parameters: values that are
   substituted into the statement when it is executed. When creating
   the prepared statement, refer to parameters by position, using
   <literal>$1</literal>, <literal>$2</literal>, etc. A corresponding list of
   parameter data types can optionally be specified. When a
   parameter's data type is not specified or is declared as
   <literal>unknown</literal>, the type is inferred from the context
   in which the parameter is first referenced (if possible). When executing the
   statement, specify the actual values for these parameters in the
   <command>EXECUTE</command> statement.  Refer to <xref
   linkend="sql-execute"/> for more
   information about that.
  </para>
________________________________________________________-->
  <para>
   预备语句可以接受参数：在执行时会被替换到语句中的值。在创建预备语句时，可以用位置引用参数，如<literal>$1</literal>、<literal>$2</literal>等。也可以选择性地指定参数数据类型的一个列表。当一个参数的数据类型没有被指定或者被声明为<literal>unknown</literal>时，其类型会从该参数第一次被引用的环境中推知（如果可能）。在执行该语句时，在<command>EXECUTE</command>语句中为这些参数指定实际值。更多有关于此的信息可参考<xref linkend="sql-execute"/>。
  </para>
<!-- pgdoc-cn_end sig_en=a3d4bd8b00a6852decc677f864ca8e40 -->

<!-- pgdoc-cn_start sig_en=904429ddfa443dd789be9d0e97107cac sig_cn_org=None source=14.1 
  <para>
   Prepared statements only last for the duration of the current
   database session. When the session ends, the prepared statement is
   forgotten, so it must be recreated before being used again. This
   also means that a single  prepared statement cannot be used by
   multiple simultaneous database clients; however, each client can create
   their own prepared statement to use.  Prepared statements can be
   manually cleaned up using the <link linkend="sql-deallocate"><command>DEALLOCATE</command></link> command.
  </para>
________________________________________________________-->
  <para>
   预备语句只在当前数据库会话期间存在。
   当会话结束时，预备语句会消失，因此在重新使用之前必须重新建立它。
   这也意味着一个预备语句不能被多个数据库客户端同时使用。
   不过，每一个客户端可以创建它们自己要使用的预备语句。
   预备语句可以用<link linkend="sql-deallocate"><command>DEALLOCATE</command></link>命令手工清除。
  </para>
<!-- pgdoc-cn_end sig_en=904429ddfa443dd789be9d0e97107cac -->

<!-- pgdoc-cn_start sig_en=4d3df38f21155ccde5b74096fc3fcd5e sig_cn_org=None source=14.1 
  <para>
   Prepared statements potentially have the largest performance advantage
   when a single session is being used to execute a large number of similar
   statements. The performance difference will be particularly
   significant if the statements are complex to plan or rewrite, e.g.,
   if the query involves a join of many tables or requires
   the application of several rules. If the statement is relatively simple
   to plan and rewrite but relatively expensive to execute, the
   performance advantage of prepared statements will be less noticeable.
  </para>
________________________________________________________-->
  <para>
   当一个会话要执行大量类似语句时，预备语句可能会有最大性能优势。如果该语句很复杂（难于规划或重写，例如查询涉及很多表的连接或者要求应用多条规则），性能差异将会特别明显。如果语句相对比较容易规划和重写，但是执行起来开销相对较大，那么预备语句的性能优势就不那么显著了。
  </para>
<!-- pgdoc-cn_end sig_en=4d3df38f21155ccde5b74096fc3fcd5e -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=9f586a030b28b014f850fae9e9bc3ee4 sig_cn_org=None source=14.1 
     <para>
      An arbitrary name given to this particular prepared
      statement. It must be unique within a single session and is
      subsequently used to execute or deallocate a previously prepared
      statement.
     </para>
________________________________________________________-->
     <para>
      给这个特定预备语句的任意名称。它在一个会话中必须唯一并且后续将被用来执行或者清除一个之前准备好的语句。
     </para>
<!-- pgdoc-cn_end sig_en=9f586a030b28b014f850fae9e9bc3ee4 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">data_type</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=c2274234b310e68363801006c5562cb3 sig_cn_org=None source=14.1 
     <para>
      The data type of a parameter to the prepared statement.  If the
      data type of a particular parameter is unspecified or is
      specified as <literal>unknown</literal>, it will be inferred
      from the context in which the parameter is first referenced. To refer to the
      parameters in the prepared statement itself, use
      <literal>$1</literal>, <literal>$2</literal>, etc.
     </para>
________________________________________________________-->
     <para>
      预备语句一个参数的数据类型。如果一个特定参数的数据类型没有被指定或者被指定为<literal>unknown</literal>，其类型将从该参数第一次被引用的环境中推得。要在预备语句本身中引用参数，可以使用
      <literal>$1</literal>、<literal>$2</literal>等。
     </para>
<!-- pgdoc-cn_end sig_en=c2274234b310e68363801006c5562cb3 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">statement</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=0618a38fa8c283c38c50ee869567d79c sig_cn_org=66bf606a7997da5e0fbff1ea6e20dde6 source=15.7 
     <para>
      Any <command>SELECT</command>, <command>INSERT</command>, <command>UPDATE</command>,
      <command>DELETE</command>, <command>MERGE</command>, or <command>VALUES</command>
      statement.
     </para>
________________________________________________________-->
     <para>
      任何<command>SELECT</command>，<command>INSERT</command>，<command>UPDATE</command>，
      <command>DELETE</command>，<command>MERGE</command>，或<command>VALUES</command>
      语句。
     </para>
<!-- pgdoc-cn_end sig_en=0618a38fa8c283c38c50ee869567d79c -->
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-prepare-notes">
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=3ef337e8998bbd0c5fac3983d5fafd9b sig_cn_org=None source=14.1 
  <para>
   A prepared statement can be executed with either a <firstterm>generic
   plan</firstterm> or a <firstterm>custom plan</firstterm>.  A generic
   plan is the same across all executions, while a custom plan is generated
   for a specific execution using the parameter values given in that call.
   Use of a generic plan avoids planning overhead, but in some situations
   a custom plan will be much more efficient to execute because the planner
   can make use of knowledge of the parameter values.  (Of course, if the
   prepared statement has no parameters, then this is moot and a generic
   plan is always used.)
  </para>
________________________________________________________-->
  <para>
   可以使用<firstterm>generic plan</firstterm>（通用计划）或<firstterm>custom plan</firstterm>（自定义计划）执行预备语句。通用计划在所有执行中都是相同的，而自定义计划是为特定一次执行使用调用中给出的参数值所生成的。使用通用计划可以避免规划开销，但在某些情况下，自定义计划的执行效率要高得多，因为规划器可以利用参数值的知识（当然，如果准备好的语句没有参数，则这是没有意义的，并且始终应使用通用计划）。
  </para>
<!-- pgdoc-cn_end sig_en=3ef337e8998bbd0c5fac3983d5fafd9b -->

<!-- pgdoc-cn_start sig_en=cf249c86f281b6b8c7716f0496c0534b sig_cn_org=None source=14.1 
  <para>
   By default (that is, when <xref linkend="guc-plan-cache_mode"/> is set
   to <literal>auto</literal>), the server will automatically choose
   whether to use a generic or custom plan for a prepared statement that
   has parameters.  The current rule for this is that the first five
   executions are done with custom plans and the average estimated cost of
   those plans is calculated.  Then a generic plan is created and its
   estimated cost is compared to the average custom-plan cost.  Subsequent
   executions use the generic plan if its cost is not so much higher than
   the average custom-plan cost as to make repeated replanning seem
   preferable.
  </para>
________________________________________________________-->
  <para>
   默认情况下（也就是当 <xref linkend="guc-plan-cache_mode"/> 设定为 <literal>auto</literal>时），对已经准备好的带有参数的语句，服务器将自动选择使用通用或自定义计划。当前的规则是，前五次执行都是使用自定义计划完成的，并且计算这些计划的平均估计代价。之后就会创建通用计划，并将其估计代价与自定义计划的平均代价相比较。如果相对于重复规划来说，通用计划的代价不比自定义计划的平均代价高太多，那么后续执行将倾向于使用通用计划。
  </para>
<!-- pgdoc-cn_end sig_en=cf249c86f281b6b8c7716f0496c0534b -->

<!-- pgdoc-cn_start sig_en=3ebe1fd2f165975b8d060c78ba097316 sig_cn_org=None source=14.1 
  <para>
   This heuristic can be overridden, forcing the server to use either
   generic or custom plans, by setting <varname>plan_cache_mode</varname>
   to <literal>force_generic_plan</literal>
   or <literal>force_custom_plan</literal> respectively.
   This setting is primarily useful if the generic plan's cost estimate
   is badly off for some reason, allowing it to be chosen even though
   its actual cost is much more than that of a custom plan.
  </para>
________________________________________________________-->
  <para>
   这种启发式方法可以被推翻，通过将<varname>plan_cache_mode</varname>分别设置为<literal>force_generic_plan</literal>或 <literal>force_custom_plan</literal>可以强迫服务器使用通用或自定义计划。这个设置主要用于当通用计划的代价估计由于某种原因不太好的情况，这允许在通用计划的实际代价远高于自定义计划的实际代价时也能选中通用计划。
  </para>
<!-- pgdoc-cn_end sig_en=3ebe1fd2f165975b8d060c78ba097316 -->

<!-- pgdoc-cn_start sig_en=feb774ee70d11036ba73536561f4d29b sig_cn_org=None source=14.1 
  <para>
   To examine the query plan <productname>PostgreSQL</productname> is using
   for a prepared statement, use <link linkend="sql-explain"><command>EXPLAIN</command></link>, for example
<programlisting>
EXPLAIN EXECUTE <replaceable>name</replaceable>(<replaceable>parameter_values</replaceable>);
</programlisting>
   If a generic plan is in use, it will contain parameter symbols
   <literal>$<replaceable>n</replaceable></literal>, while a custom plan
   will have the supplied parameter values substituted into it.
  </para>
________________________________________________________-->
  <para>
   要检查<productname>PostgreSQL</productname>为一个预备语句使用的查询计划，可以使用<link linkend="sql-explain"><command>EXPLAIN</command></link>，例如：
<programlisting>
EXPLAIN EXECUTE <replaceable>name</replaceable>(<replaceable>parameter_values</replaceable>);
</programlisting> 
   如果使用的是一个通用计划，它将包含参数符号<literal>$<replaceable>n</replaceable></literal>，而一个定制计划则会把提供的参数值替换进去。
  </para>
<!-- pgdoc-cn_end sig_en=feb774ee70d11036ba73536561f4d29b -->

<!-- pgdoc-cn_start sig_en=6b2dd0a489e81437ccfcf0128b98f9df sig_cn_org=None source=14.1 
  <para>
   For more information on query planning and the statistics collected
   by <productname>PostgreSQL</productname> for that purpose, see
   the <xref linkend="sql-analyze"/>
   documentation.
  </para>
________________________________________________________-->
  <para>
   更多关于查询规划以及<productname>PostgreSQL</productname>为此所收集的统计信息的内容，请见<xref linkend="sql-analyze"/>文档。
  </para>
<!-- pgdoc-cn_end sig_en=6b2dd0a489e81437ccfcf0128b98f9df -->

<!-- pgdoc-cn_start sig_en=9c0e10ee91bec3fe5a9acfac5c52513f sig_cn_org=None source=14.1 
  <para>
   Although the main point of a prepared statement is to avoid repeated parse
   analysis and planning of the statement, <productname>PostgreSQL</productname> will
   force re-analysis and re-planning of the statement before using it
   whenever database objects used in the statement have undergone
   definitional (DDL) changes or their planner statistics have
   been updated since the previous use of the prepared
   statement.  Also, if the value of <xref linkend="guc-search-path"/> changes
   from one use to the next, the statement will be re-parsed using the new
   <varname>search_path</varname>.  (This latter behavior is new as of
   <productname>PostgreSQL</productname> 9.3.)  These rules make use of a
   prepared statement semantically almost equivalent to re-submitting the
   same query text over and over, but with a performance benefit if no object
   definitions are changed, especially if the best plan remains the same
   across uses.  An example of a case where the semantic equivalence is not
   perfect is that if the statement refers to a table by an unqualified name,
   and then a new table of the same name is created in a schema appearing
   earlier in the <varname>search_path</varname>, no automatic re-parse will occur
   since no object used in the statement changed.  However, if some other
   change forces a re-parse, the new table will be referenced in subsequent
   uses.
  </para>
________________________________________________________-->
  <para>
   尽管预备语句的主要目的是为了避免重复对语句进行解析分析以及规划，但是只要上一次使用该预备语句后该语句中用到的数据库对象发生了定义性（DDL）改变或者它们的计划器的统计信息被更新 ，<productname>PostgreSQL</productname>将会对该语句强制进行重新分析和重新规划。
   还有，如果<xref linkend="guc-search-path"/>的值发生变化，也将使用新的<varname>search_path</varname>重新解析该语句（后一种行为是从<productname>PostgreSQL</productname> 9.3 开始加入的）。
   这些规则让预备语句的使用在语义上几乎等效于反复提交相同的查询文本，但是能在性能上获利（如果没有对象定义被改变，特别是如果最优计划保持不变时）。
   该语义等价性不完美的一个例子是：如果语句用一个未限定的名称引用某个表，并且之后在<varname>search_path</varname>中更靠前的模式中创建了一个新的同名表，则不会发生自动的重解析，因为该语句使用的对象没有被改变。
   不过，如果某些其他更改造成了重解析，后续使用中都会引用新表。
  </para>
<!-- pgdoc-cn_end sig_en=9c0e10ee91bec3fe5a9acfac5c52513f -->

<!-- pgdoc-cn_start sig_en=df6afe668e0310900e7bec283fe2f79c sig_cn_org=None source=14.1 
  <para>
   You can see all prepared statements available in the session by querying the
   <link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>
   system view.
  </para>
________________________________________________________-->
  <para>
   可以通过查询<link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>系统视图来看到会话中所有可用的预备语句。
  </para>
<!-- pgdoc-cn_end sig_en=df6afe668e0310900e7bec283fe2f79c -->
 </refsect1>

 <refsect1 id="sql-prepare-examples" xreflabel="Examples">
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>例子</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->
<!-- pgdoc-cn_start sig_en=8bd13d94d373912bd52bcbea8fba243a sig_cn_org=None source=14.1 
  <para>
   Create a prepared statement for an <command>INSERT</command>
   statement, and then execute it:
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>
________________________________________________________-->
  <para>
   为一个<command>INSERT</command>语句创建一个预备语句，然后执行它：
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=8bd13d94d373912bd52bcbea8fba243a -->

<!-- pgdoc-cn_start sig_en=314677072a262389f1b87d99c09ed0ea sig_cn_org=None source=14.1 
  <para>
   Create a prepared statement for a <command>SELECT</command>
   statement, and then execute it:
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   In this example, the data type of the second parameter is not specified,
   so it is inferred from the context in which <literal>$2</literal> is used.
  </para>
________________________________________________________-->
  <para>
   为一个<command>SELECT</command>语句创建一个预备语句，然后执行它：
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   在这个示例中，第二个参数的数据类型没有被指定，因此会从使用<literal>$2</literal>的环境中推知。
  </para>
<!-- pgdoc-cn_end sig_en=314677072a262389f1b87d99c09ed0ea -->
 </refsect1>
 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=94b1bd40a885e95866634b489e9bd427 sig_cn_org=None source=14.1 
  <para>
   The SQL standard includes a <command>PREPARE</command> statement,
   but it is only for use in embedded SQL. This version of the
   <command>PREPARE</command> statement also uses a somewhat different
   syntax.
  </para>
________________________________________________________-->
  <para>
   SQL标准包括一个<command>PREPARE</command>语句，但是它只用于嵌入式SQL。这个版本的<command>PREPARE</command>语句同时也使用了一种略有不同的语法。
  </para>
<!-- pgdoc-cn_end sig_en=94b1bd40a885e95866634b489e9bd427 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>另见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"/></member>
   <member><xref linkend="sql-execute"/></member>
  </simplelist>
 </refsect1>
</refentry>
