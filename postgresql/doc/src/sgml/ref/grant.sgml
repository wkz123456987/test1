<!--
doc/src/sgml/ref/grant.sgml
PostgreSQL documentation
-->

<refentry id="sql-grant">
<!-- pgdoc-cn_start sig_en=9dea121beac9bc4413aa1f5e08535147 sig_cn_org=None source=14.1 
 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=9dea121beac9bc4413aa1f5e08535147 -->

 <refmeta>
  <refentrytitle>GRANT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=0fcdace38d99617015979a5bee8bf287 sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>GRANT</refname>
  <refpurpose>define access privileges</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>GRANT</refname>
  <refpurpose>定义访问特权</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=0fcdace38d99617015979a5bee8bf287 -->

<!-- pgdoc-cn_start sig_en=e8321ac546c63d78e95c524533e328c9 sig_cn_org=e8321ac546c63d78e95c524533e328c9 source=15.7 
 <refsynopsisdiv>
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="parameter">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="parameter">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="parameter">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { { FUNCTION | PROCEDURE | ROUTINE } <replaceable>routine_name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) ] [, ...]
         | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="parameter">loid</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SET | ALTER SYSTEM } [, ... ] | ALL [ PRIVILEGES ] }
    ON PARAMETER <replaceable class="parameter">configuration_parameter</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT <replaceable class="parameter">role_name</replaceable> [, ...] TO <replaceable class="parameter">role_specification</replaceable> [, ...]
    [ WITH ADMIN OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

<phrase>where <replaceable class="parameter">role_specification</replaceable> can be:</phrase>

    [ GROUP ] <replaceable class="parameter">role_name</replaceable>
  | PUBLIC
  | CURRENT_ROLE
  | CURRENT_USER
  | SESSION_USER
</synopsis>
________________________________________________________-->
 <refsynopsisdiv>
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="parameter">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="parameter">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="parameter">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { { FUNCTION | PROCEDURE | ROUTINE } <replaceable>routine_name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) ] [, ...]
         | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="parameter">loid</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { SET | ALTER SYSTEM } [, ... ] | ALL [ PRIVILEGES ] }
    ON PARAMETER <replaceable class="parameter">configuration_parameter</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

GRANT <replaceable class="parameter">role_name</replaceable> [, ...] TO <replaceable class="parameter">role_specification</replaceable> [, ...]
    [ WITH ADMIN OPTION ]
    [ GRANTED BY <replaceable class="parameter">role_specification</replaceable> ]

<phrase>where <replaceable class="parameter">role_specification</replaceable> can be:</phrase>

    [ GROUP ] <replaceable class="parameter">role_name</replaceable>
  | PUBLIC
  | CURRENT_ROLE
  | CURRENT_USER
  | SESSION_USER
</synopsis>
<!-- pgdoc-cn_end sig_en=e8321ac546c63d78e95c524533e328c9 -->
 </refsynopsisdiv>

 <refsect1 id="sql-grant-description">
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=3dc0a430218d3b943c29146bafca394b sig_cn_org=47c49e4d03b646e0a521fa181d541e92 source=15.7 
  <para>
   The <command>GRANT</command> command has two basic variants: one
   that grants privileges on a database object (table, column, view,
   foreign table, sequence, database, foreign-data wrapper, foreign server,
   function, procedure, procedural language, large object, configuration
   parameter, schema, tablespace, or type), and one that grants
   membership in a role.  These variants are similar in many ways, but
   they are different enough to be described separately.
  </para>
________________________________________________________-->
  <para>
   <command>GRANT</command>命令有两个基本变体：一个是在数据库对象（表、列、视图、外部表、序列、数据库、外部数据包装器、外部服务器、函数、过程、过程语言、大对象、配置参数、模式、表空间或类型）上授予权限，另一个是授予角色的成员资格。这些变体在许多方面都很相似，但它们有足够的不同之处，需要分别描述。
</para>
<!-- pgdoc-cn_end sig_en=3dc0a430218d3b943c29146bafca394b -->

 <refsect2 id="sql-grant-description-objects">
<!-- pgdoc-cn_start sig_en=f587565268ce5c76d373a19e8e54ba1e sig_cn_org=None source=14.1 
  <title>GRANT on Database Objects</title>
________________________________________________________-->
  <title>在数据库对象上 GRANT</title>
<!-- pgdoc-cn_end sig_en=f587565268ce5c76d373a19e8e54ba1e -->

<!-- pgdoc-cn_start sig_en=35618ad232b85b2cabd58813db4c369b sig_cn_org=None source=14.1 
  <para>
   This variant of the <command>GRANT</command> command gives specific
   privileges on a database object to
   one or more roles.  These privileges are added
   to those already granted, if any.
  </para>
________________________________________________________-->
  <para>
   这种<command>GRANT</command>命令的变体将一个数据库对象上的指定特权交给一个或多个角色。如果有一些已经被授予，这些特权会被加入到它们之中。
  </para>
<!-- pgdoc-cn_end sig_en=35618ad232b85b2cabd58813db4c369b -->

<!-- pgdoc-cn_start sig_en=130c45bd68fa644f8f917e0f47a27bac sig_cn_org=None source=14.1 
  <para>
   The key word <literal>PUBLIC</literal> indicates that the
   privileges are to be granted to all roles, including those that might
   be created later.  <literal>PUBLIC</literal> can be thought of as an
   implicitly defined group that always includes all roles.
   Any particular role will have the sum
   of privileges granted directly to it, privileges granted to any role it
   is presently a member of, and privileges granted to
   <literal>PUBLIC</literal>.
  </para>
________________________________________________________-->
  <para>
   关键词<literal>PUBLIC</literal>指示特权要被授予给所有角色，包括那些可能稍后会被创建的角色。<literal>PUBLIC</literal>可以被认为是一个被隐式定义的总是包含所有角色的组。任何特定角色都将具有直接授予给它的特权、授予给它作为成员所在的任何角色的特权以及被授予给<literal>PUBLIC</literal>的特权。
  </para>
<!-- pgdoc-cn_end sig_en=130c45bd68fa644f8f917e0f47a27bac -->

<!-- pgdoc-cn_start sig_en=0fb987d7bc087cce37dad7697f5d209f sig_cn_org=None source=14.1 
  <para>
   If <literal>WITH GRANT OPTION</literal> is specified, the recipient
   of the privilege can in turn grant it to others.  Without a grant
   option, the recipient cannot do that.  Grant options cannot be granted
   to <literal>PUBLIC</literal>.
  </para>
________________________________________________________-->
  <para>
   如果指定了<literal>WITH GRANT OPTION</literal>，特权的接收者可以接着把它授予给其他人。如果没有授权选项，接收者就不能这样做。授权选项不能被授予给<literal>PUBLIC</literal>。
  </para>
<!-- pgdoc-cn_end sig_en=0fb987d7bc087cce37dad7697f5d209f -->

<!-- pgdoc-cn_start sig_en=14852dcf3b5acf0e80290d14595ce3d7 sig_cn_org=None source=14.1 
  <para>
   If <literal>GRANTED BY</literal> is specified, the specified grantor must
   be the current user.  This clause is currently present in this form only
   for SQL compatibility.
  </para>
________________________________________________________-->
  <para>
   如果指定了<literal>GRANTED BY</literal>， 指定的生成者必须是当前用户。
   这个子句当前在这里出现仅是为了SQL兼容性。
  </para>
<!-- pgdoc-cn_end sig_en=14852dcf3b5acf0e80290d14595ce3d7 -->

<!-- pgdoc-cn_start sig_en=bacc578e02e6b4fa876e33c0245b7ca2 sig_cn_org=None source=14.1 
  <para>
   There is no need to grant privileges to the owner of an object
   (usually the user that created it),
   as the owner has all privileges by default.  (The owner could,
   however, choose to revoke some of their own privileges for safety.)
  </para>
________________________________________________________-->
  <para>
   没有必要把权限授予给一个对象的拥有者（通常就是创建该对象的用户），
   因为拥有者默认具有所有的特权（不过拥有者可能为了安全选择撤回一些
   它们自己的特权）。
  </para>
<!-- pgdoc-cn_end sig_en=bacc578e02e6b4fa876e33c0245b7ca2 -->

<!-- pgdoc-cn_start sig_en=78a23fe0250b61cca574ae8ea63b5bdb sig_cn_org=None source=14.1 
  <para>
   The right to drop an object, or to alter its definition in any way, is
   not treated as a grantable privilege; it is inherent in the owner,
   and cannot be granted or revoked.  (However, a similar effect can be
   obtained by granting or revoking membership in the role that owns
   the object; see below.)  The owner implicitly has all grant
   options for the object, too.
  </para>
________________________________________________________-->
  <para>
   删除一个对象或者以任何方式修改其定义的权力是不被当作一个可授予特权的，它被固化在拥有者中，并且不能被授予和撤回（不过，相似地效果可以通过授予或者撤回在拥有该对象的角色中的成员关系来实现，见下文）。拥有者也隐式地拥有该对象的所有授权选项。
  </para>
<!-- pgdoc-cn_end sig_en=78a23fe0250b61cca574ae8ea63b5bdb -->

<!-- pgdoc-cn_start sig_en=611b6fb25ab79cfd9b50939ba52a0a6c sig_cn_org=49c5a4c6e18ad8b62f08020760b20092 source=15.7 
  <para>
   The possible privileges are:

   <variablelist>
    <varlistentry>
     <term><literal>SELECT</literal></term>
     <term><literal>INSERT</literal></term>
     <term><literal>UPDATE</literal></term>
     <term><literal>DELETE</literal></term>
     <term><literal>TRUNCATE</literal></term>
     <term><literal>REFERENCES</literal></term>
     <term><literal>TRIGGER</literal></term>
     <term><literal>CREATE</literal></term>
     <term><literal>CONNECT</literal></term>
     <term><literal>TEMPORARY</literal></term>
     <term><literal>EXECUTE</literal></term>
     <term><literal>USAGE</literal></term>
     <term><literal>SET</literal></term>
     <term><literal>ALTER SYSTEM</literal></term>
     <listitem>
      <para>
       Specific types of privileges, as defined in <xref linkend="ddl-priv"/>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TEMP</literal></term>
     <listitem>
      <para>
       Alternative spelling for <literal>TEMPORARY</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ALL PRIVILEGES</literal></term>
     <listitem>
      <para>
       Grant all of the privileges available for the object's type.
       The <literal>PRIVILEGES</literal> key word is optional in
       <productname>PostgreSQL</productname>, though it is required by
       strict SQL.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
________________________________________________________-->
  <para>
   可能的权限包括：

   <variablelist>
    <varlistentry>
     <term><literal>SELECT</literal></term>
     <term><literal>INSERT</literal></term>
     <term><literal>UPDATE</literal></term>
     <term><literal>DELETE</literal></term>
     <term><literal>TRUNCATE</literal></term>
     <term><literal>REFERENCES</literal></term>
     <term><literal>TRIGGER</literal></term>
     <term><literal>CREATE</literal></term>
     <term><literal>CONNECT</literal></term>
     <term><literal>TEMPORARY</literal></term>
     <term><literal>EXECUTE</literal></term>
     <term><literal>USAGE</literal></term>
     <term><literal>SET</literal></term>
     <term><literal>ALTER SYSTEM</literal></term>
     <listitem>
      <para>
       特定类型的权限，如在<xref linkend="ddl-priv"/>中定义。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TEMP</literal></term>
     <listitem>
      <para>
       <literal>TEMPORARY</literal>的另一种拼写方式。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ALL PRIVILEGES</literal></term>
     <listitem>
      <para>
       授予对象类型可用的所有权限。
       在<productname>PostgreSQL</productname>中，<literal>PRIVILEGES</literal>关键字是可选的，
       但在严格的SQL中是必需的。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
<!-- pgdoc-cn_end sig_en=611b6fb25ab79cfd9b50939ba52a0a6c -->

<!-- pgdoc-cn_start sig_en=e939cb97f3e31e741717e398da205003 sig_cn_org=None source=14.1 
  <para>
   The <literal>FUNCTION</literal> syntax works for plain functions,
   aggregate functions, and window functions, but not for procedures;
   use <literal>PROCEDURE</literal> for those.
   Alternatively, use <literal>ROUTINE</literal> to refer to a function,
   aggregate function, window function, or procedure regardless of its
   precise type.
  </para>
________________________________________________________-->
  <para>
   <literal>FUNCTION</literal>语法适用于简单函数、聚合函数和窗口函数，但不适用于过程；对过程使用<literal>PROCEDURE</literal>。
   或者，使用<literal>ROUTINE</literal>来引用函数、聚合函数、窗口函数或过程而不管其精确类型。
  </para>
<!-- pgdoc-cn_end sig_en=e939cb97f3e31e741717e398da205003 -->

<!-- pgdoc-cn_start sig_en=25dd21745c02860e463afa0b58198359 sig_cn_org=None source=14.1 
  <para>
   There is also an option to grant privileges on all objects of the same
   type within one or more schemas.  This functionality is currently supported
   only for tables, sequences, functions, and procedures.  <literal>ALL
   TABLES</literal> also affects views and foreign tables, just like the
   specific-object <command>GRANT</command> command.  <literal>ALL
   FUNCTIONS</literal> also affects aggregate and window functions, but not
   procedures, again just like the specific-object <command>GRANT</command>
   command.  Use <literal>ALL ROUTINES</literal> to include procedures.
  </para>
________________________________________________________-->
  <para>
   还有一个选项，可以在一个或多个模式中对所有相同类型的对象授予特权。此功能当前仅支持表、序列、函数和过程。
   <literal>ALL TABLES</literal>也会影响视图和外表，就像特定对象 <command>GRANT</command>命令。
   <literal>ALL FUNCTIONS</literal>也会影响聚合和窗口函数，但不影响过程，就像特定对象<command>GRANT</command>命令一样。
   使用 <literal>ALL ROUTINES</literal> 来包括过程。
  </para>
<!-- pgdoc-cn_end sig_en=25dd21745c02860e463afa0b58198359 -->
 </refsect2>

 <refsect2 id="sql-grant-description-roles">
<!-- pgdoc-cn_start sig_en=ecb84d035d5060706d6fc150f77deae5 sig_cn_org=None source=14.1 
  <title>GRANT on Roles</title>
________________________________________________________-->
  <title>角色上的 GRANT</title>
<!-- pgdoc-cn_end sig_en=ecb84d035d5060706d6fc150f77deae5 -->

<!-- pgdoc-cn_start sig_en=63489500c509bb462cd232d98c59b244 sig_cn_org=None source=14.1 
  <para>
   This variant of the <command>GRANT</command> command grants membership
   in a role to one or more other roles.  Membership in a role is significant
   because it conveys the privileges granted to a role to each of its
   members.
  </para>
________________________________________________________-->
  <para>
   <command>GRANT</command>命令的这种变体把一个角色中的成员关系授予一个或者多个其他角色。一个角色中的成员关系是有意义的，因为它会把授予给一个角色的特权带给该角色的每一个成员。
  </para>
<!-- pgdoc-cn_end sig_en=63489500c509bb462cd232d98c59b244 -->

<!-- pgdoc-cn_start sig_en=84e1cc5960074353b220cfe632b14ac7 sig_cn_org=4657cc06a6f86eaf186802992f8912de source=15.7 
  <para>
   If <literal>WITH ADMIN OPTION</literal> is specified, the member can
   in turn grant membership in the role to others, and revoke membership
   in the role as well.  Without the admin option, ordinary users cannot
   do that.  A role is not considered to hold <literal>WITH ADMIN
   OPTION</literal> on itself.  Database superusers can grant or revoke
   membership in any role to anyone.  Roles having
   <literal>CREATEROLE</literal> privilege can grant or revoke membership
   in any role that is not a superuser.
  </para>
________________________________________________________-->
  <para>
   如果指定了<literal>WITH ADMIN OPTION</literal>，则成员可以转而授予角色给其他人，并撤销角色的成员资格。没有管理员选项，普通用户无法做到这一点。角色不被认为拥有<literal>WITH ADMIN OPTION</literal>。数据库超级用户可以向任何人授予或撤销任何角色的成员资格。具有<literal>CREATEROLE</literal>特权的角色可以向任何不是超级用户的角色授予或撤销成员资格。
  </para>
<!-- pgdoc-cn_end sig_en=84e1cc5960074353b220cfe632b14ac7 -->

<!-- pgdoc-cn_start sig_en=2b67bf70149e71626782ecec16077c55 sig_cn_org=None source=14.1 
  <para>
   If <literal>GRANTED BY</literal> is specified, the grant is recorded as
   having been done by the specified role.  Only database superusers may
   use this option, except when it names the same role executing the command.
  </para>
________________________________________________________-->
  <para>
   如果指定了<literal>GRANTED BY</literal>，则该授予被记录为已由指定角色完成。
   只有数据库超级用户可以使用此选项，除非它为执行命令指定了相同的角色。
  </para>
<!-- pgdoc-cn_end sig_en=2b67bf70149e71626782ecec16077c55 -->

<!-- pgdoc-cn_start sig_en=9dedb00653c44b70abc418460ea36e03 sig_cn_org=None source=14.1 
  <para>
   Unlike the case with privileges, membership in a role cannot be granted
   to <literal>PUBLIC</literal>.  Note also that this form of the command
   does not allow the noise word <literal>GROUP</literal>
   in <replaceable class="parameter">role_specification</replaceable>.
  </para>
________________________________________________________-->
  <para>
   和特权的情况不同，一个角色中的成员关系不能被授予<literal>PUBLIC</literal>。还要注意
   这种形式的命令不允许<replaceable class="parameter">role_specification</replaceable>
   中的噪声词<literal>GROUP</literal>。
  </para>
<!-- pgdoc-cn_end sig_en=9dedb00653c44b70abc418460ea36e03 -->
 </refsect2>
 </refsect1>


 <refsect1 id="sql-grant-notes">
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=e9b9c5258f7585947270723b7802ca20 sig_cn_org=None source=14.1 
   <para>
    The <link linkend="sql-revoke"><command>REVOKE</command></link> command is used
    to revoke access privileges.
   </para>
________________________________________________________-->
   <para>
    <link linkend="sql-revoke"><command>REVOKE</command></link>命令被用来撤回访问特权。
   </para>
<!-- pgdoc-cn_end sig_en=e9b9c5258f7585947270723b7802ca20 -->

<!-- pgdoc-cn_start sig_en=30ac5e5710fe41aa7ae8326f4e29473c sig_cn_org=None source=14.1 
   <para>
    Since <productname>PostgreSQL</productname> 8.1, the concepts of users and
    groups have been unified into a single kind of entity called a role.
    It is therefore no longer necessary to use the keyword <literal>GROUP</literal>
    to identify whether a grantee is a user or a group.  <literal>GROUP</literal>
    is still allowed in the command, but it is a noise word.
   </para>
________________________________________________________-->
   <para>
    从<productname>PostgreSQL</productname> 8.1 开始，用户和组的概念已经被统一到一种单一类型的实体（被称为一个角色）。因此不再需要使用关键词<literal>GROUP</literal>来标识一个被授权者是一个用户或者一个组。在该命令中仍然允许<literal>GROUP</literal>，但是它只是一个噪音词而已。
   </para>
<!-- pgdoc-cn_end sig_en=30ac5e5710fe41aa7ae8326f4e29473c -->

<!-- pgdoc-cn_start sig_en=9949fc5c9b3e8402b218eb20d32751f0 sig_cn_org=None source=14.1 
   <para>
    A user may perform <command>SELECT</command>, <command>INSERT</command>, etc. on a
    column if they hold that privilege for either the specific column or
    its whole table.  Granting the privilege at the table level and then
    revoking it for one column will not do what one might wish: the
    table-level grant is unaffected by a column-level operation.
   </para>
________________________________________________________-->
   <para>
    如果一个用户持有特定列或者其所在的整个表的特权，
    该用户可以在该列上执行<command>SELECT</command>、
    <command>INSERT</command>等命令。在表层面上授予特权
    然后对一列撤回该特权将不会按照你希望的运作：
    表级别的授权不会受到列级别操作的影响。
   </para>
<!-- pgdoc-cn_end sig_en=9949fc5c9b3e8402b218eb20d32751f0 -->

<!-- pgdoc-cn_start sig_en=36eb40d4c8d80c734a26653c4b4e88ba sig_cn_org=None source=14.1 
   <para>
    When a non-owner of an object attempts to <command>GRANT</command> privileges
    on the object, the command will fail outright if the user has no
    privileges whatsoever on the object.  As long as some privilege is
    available, the command will proceed, but it will grant only those
    privileges for which the user has grant options.  The <command>GRANT ALL
    PRIVILEGES</command> forms will issue a warning message if no grant options are
    held, while the other forms will issue a warning if grant options for
    any of the privileges specifically named in the command are not held.
    (In principle these statements apply to the object owner as well, but
    since the owner is always treated as holding all grant options, the
    cases can never occur.)
   </para>
________________________________________________________-->
   <para>
    当一个对象的非拥有者尝试<command>GRANT</command>该对象上的特权，如果该用户在该对象上什么特权都不拥有，该命令将立刻失败。只要有一些特权可用，该命令将继续，但是它将只授予那些用户具有授权选项的特权。如果不持有授权选项，<command>GRANT ALL PRIVILEGES</command>形式将发出一个警告消息。而如果不持有命令中特别提到的任何特权的授权选项，其他形式将会发出一个警告（原则上这些语句也适用于对象拥有者，但是由于拥有者总是被视为持有所有授权选项，因此这种情况不会发生）。
   </para>
<!-- pgdoc-cn_end sig_en=36eb40d4c8d80c734a26653c4b4e88ba -->

<!-- pgdoc-cn_start sig_en=69f9192b66bc266074ce3a1868299b45 sig_cn_org=None source=14.1 
   <para>
    It should be noted that database superusers can access
    all objects regardless of object privilege settings.  This
    is comparable to the rights of <literal>root</literal> in a Unix system.
    As with <literal>root</literal>, it's unwise to operate as a superuser
    except when absolutely necessary.
   </para>
________________________________________________________-->
   <para>
    需要注意的是，数据库超级用户可以访问所有对象而不管对象特权的设置。这可与 Unix 系统中的<literal>root</literal>权力相提并论。对于<literal>root</literal>来说，除非绝对必要，使用一个超级用户来操作是不明智的。
   </para>
<!-- pgdoc-cn_end sig_en=69f9192b66bc266074ce3a1868299b45 -->

<!-- pgdoc-cn_start sig_en=8e38a553e014a6c6955b9ca914fa2206 sig_cn_org=None source=14.1 
   <para>
    If a superuser chooses to issue a <command>GRANT</command> or <command>REVOKE</command>
    command, the command is performed as though it were issued by the
    owner of the affected object.  In particular, privileges granted via
    such a command will appear to have been granted by the object owner.
    (For role membership, the membership appears to have been granted
    by the containing role itself.)
   </para>
________________________________________________________-->
   <para>
    如果一个超级用户选择发出一个<command>GRANT</command>或者<command>REVOKE</command>命令，该命令将被执行，好像它是由被影响对象的拥有者发出的一样。特别地，通过这样一个命令授予的特权将好像是由对象拥有者授予的一样（对于角色成员关系，该成员关系好像是由该角色本身授予的一样）。
   </para>
<!-- pgdoc-cn_end sig_en=8e38a553e014a6c6955b9ca914fa2206 -->

<!-- pgdoc-cn_start sig_en=391bedc50d115fcb67df079e44dc3de1 sig_cn_org=None source=14.1 
   <para>
    <command>GRANT</command> and <command>REVOKE</command> can also be done by a role
    that is not the owner of the affected object, but is a member of the role
    that owns the object, or is a member of a role that holds privileges
    <literal>WITH GRANT OPTION</literal> on the object.  In this case the
    privileges will be recorded as having been granted by the role that
    actually owns the object or holds the privileges
    <literal>WITH GRANT OPTION</literal>.  For example, if table
    <literal>t1</literal> is owned by role <literal>g1</literal>, of which role
    <literal>u1</literal> is a member, then <literal>u1</literal> can grant privileges
    on <literal>t1</literal> to <literal>u2</literal>, but those privileges will appear
    to have been granted directly by <literal>g1</literal>.  Any other member
    of role <literal>g1</literal> could revoke them later.
   </para>
________________________________________________________-->
   <para>
    <command>GRANT</command>以及<command>REVOKE</command>也可以由一个不是受影响对象拥有者的角色完成，不过该角色是拥有该对象的角色的一个成员，或者是在该对象上持有特权的<literal>WITH GRANT OPTION</literal>的角色的一个成员。在这种情况下，特权将被记录为由实际拥有该对象的角色授予或者是由持有特权的<literal>WITH GRANT OPTION</literal>的角色授予。例如，如果表<literal>t1</literal>被角色<literal>g1</literal>拥有，<literal>u1</literal>是它的一个成员，那么<literal>u1</literal>可以把<literal>t1</literal>上的特权授予给<literal>u2</literal>，但是那些特权将好像是直接由<literal>g1</literal>授予的。角色<literal>g1</literal>的任何其他成员可以稍后撤回它们。
   </para>
<!-- pgdoc-cn_end sig_en=391bedc50d115fcb67df079e44dc3de1 -->

<!-- pgdoc-cn_start sig_en=146fef210cf9dcf4b1f50581c1e05554 sig_cn_org=None source=14.1 
   <para>
    If the role executing <command>GRANT</command> holds the required privileges
    indirectly via more than one role membership path, it is unspecified
    which containing role will be recorded as having done the grant.  In such
    cases it is best practice to use <command>SET ROLE</command> to become the
    specific role you want to do the <command>GRANT</command> as.
   </para>
________________________________________________________-->
   <para>
    如果执行<command>GRANT</command>的角色间接地通过多于一条角色成员关系路径持有所需的特权，将不会指定哪一个包含它的角色将被记录为完成了该授权。在这样的情况中，最好使用<command>SET ROLE</command>来成为你想用其做<command>GRANT</command>的特定角色。
   </para>
<!-- pgdoc-cn_end sig_en=146fef210cf9dcf4b1f50581c1e05554 -->

<!-- pgdoc-cn_start sig_en=a910732d18fe8e52f8ef8a119908c41b sig_cn_org=None source=14.1 
   <para>
    Granting permission on a table does not automatically extend
    permissions to any sequences used by the table, including
    sequences tied to <type>SERIAL</type> columns.  Permissions on
    sequences must be set separately.
   </para>
________________________________________________________-->
   <para>
    授予一个表上的权限不会自动地扩展权限给该表使用的任何序列，包括绑定在<type>SERIAL</type>列上的序列。序列上的权限必须被独立设置。
   </para>
<!-- pgdoc-cn_end sig_en=a910732d18fe8e52f8ef8a119908c41b -->

<!-- pgdoc-cn_start sig_en=acdf90859900528aca0ca35d4d6cdf79 sig_cn_org=None source=14.1 
   <para>
    See <xref linkend="ddl-priv"/> for more information about specific
    privilege types, as well as how to inspect objects' privileges.
   </para>
________________________________________________________-->
   <para>
	有关特定的特权类型以及如何检查对象特权的更多信息，请参见<xref linkend="ddl-priv"/>。
   </para>
<!-- pgdoc-cn_end sig_en=acdf90859900528aca0ca35d4d6cdf79 -->
 </refsect1>

 <refsect1 id="sql-grant-examples">
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>例子</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=6149f5d02a097d7217b45615450e2216 sig_cn_org=None source=14.1 
  <para>
   Grant insert privilege to all users on table <literal>films</literal>:

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   把表<literal>films</literal>上的插入特权授予给所有用户：

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=6149f5d02a097d7217b45615450e2216 -->

<!-- pgdoc-cn_start sig_en=5bb9e4b6c881d8eaf17d4202d0e28217 sig_cn_org=None source=14.1 
  <para>
   Grant all available privileges to user <literal>manuel</literal> on view
   <literal>kinds</literal>:

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

   Note that while the above will indeed grant all privileges if executed by a
   superuser or the owner of <literal>kinds</literal>, when executed by someone
   else it will only grant those permissions for which the someone else has
   grant options.
  </para>
________________________________________________________-->
  <para>
   把视图<literal>kinds</literal>上的所有可用特权授予给用户<literal>manuel</literal>：

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

   注意虽然上述语句被一个超级用户或者<literal>kinds</literal>的拥有者执行时确实会授予所有特权，但是当由其他人执行时将只会授予那些执行者拥有授权选项的权限。
  </para>
<!-- pgdoc-cn_end sig_en=5bb9e4b6c881d8eaf17d4202d0e28217 -->

<!-- pgdoc-cn_start sig_en=5df039b19bb2b0275bad925c077108e6 sig_cn_org=None source=14.1 
  <para>
   Grant membership in role <literal>admins</literal> to user <literal>joe</literal>:

<programlisting>
GRANT admins TO joe;
</programlisting></para>
________________________________________________________-->
  <para>
   把角色<literal>admins</literal>中的成员关系授予给用户<literal>joe</literal>：

<programlisting>
GRANT admins TO joe;
</programlisting></para>
<!-- pgdoc-cn_end sig_en=5df039b19bb2b0275bad925c077108e6 -->
 </refsect1>

 <refsect1 id="sql-grant-compatibility">
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=f10c4e33dba97cc1576b361b20a76df8 sig_cn_org=None source=14.1 
   <para>
    According to the SQL standard, the <literal>PRIVILEGES</literal>
    key word in <literal>ALL PRIVILEGES</literal> is required.  The
    SQL standard does not support setting the privileges on more than
    one object per command.
   </para>
________________________________________________________-->
   <para>
    根据 SQL 标准，<literal>ALL PRIVILEGES</literal>中的<literal>PRIVILEGES</literal>关键词是必须的。SQL 标准不支持在每个命令中设置超过一个对象上的特权。
   </para>
<!-- pgdoc-cn_end sig_en=f10c4e33dba97cc1576b361b20a76df8 -->

<!-- pgdoc-cn_start sig_en=5272b5cb048c9017fe05af09f6e1b803 sig_cn_org=None source=14.1 
   <para>
    <productname>PostgreSQL</productname> allows an object owner to revoke their
    own ordinary privileges: for example, a table owner can make the table
    read-only to themselves by revoking their own <literal>INSERT</literal>,
    <literal>UPDATE</literal>, <literal>DELETE</literal>, and <literal>TRUNCATE</literal>
    privileges.  This is not possible according to the SQL standard.  The
    reason is that <productname>PostgreSQL</productname> treats the owner's
    privileges as having been granted by the owner to themselves; therefore they
    can revoke them too.  In the SQL standard, the owner's privileges are
    granted by an assumed entity <quote>_SYSTEM</quote>.  Not being
    <quote>_SYSTEM</quote>, the owner cannot revoke these rights.
   </para>
________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>允许一个对象拥有者
    撤回它们拥有的普通特权：例如，一个表拥有者可以通过撤回其自身拥有
    的<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>
    和<literal>TRUNCATE</literal>特权让该表对它们自己只读。根据 SQL 标准
    这是不可能发生的。原因在于<productname>PostgreSQL</productname>
    认为拥有者的特权是由拥有者授予给它们自己的，因此它们也能够撤回它们。
    在 SQL 标准中，拥有者的特权是有一个假设的实体<quote>_SYSTEM</quote>所授予。
    由于不是<quote>_SYSTEM</quote>，拥有者就不能撤回这些权力。
   </para>
<!-- pgdoc-cn_end sig_en=5272b5cb048c9017fe05af09f6e1b803 -->

<!-- pgdoc-cn_start sig_en=56823ab78f9bce2490730b82919aea89 sig_cn_org=None source=14.1 
   <para>
    According to the SQL standard, grant options can be granted to
    <literal>PUBLIC</literal>; PostgreSQL only supports granting grant options
    to roles.
   </para>
________________________________________________________-->
   <para>
    根据 SQL 标准，授权选项可以被授予给<literal>PUBLIC</literal>， PostgreSQL 只支持把授权选项授予给角色。
   </para>
<!-- pgdoc-cn_end sig_en=56823ab78f9bce2490730b82919aea89 -->

<!-- pgdoc-cn_start sig_en=f9928806a96453a795215481d7bcf90a sig_cn_org=None source=14.1 
   <para>
    The SQL standard allows the <literal>GRANTED BY</literal> option to
    specify only <literal>CURRENT_USER</literal> or
    <literal>CURRENT_ROLE</literal>.  The other variants are PostgreSQL
    extensions.
   </para>
________________________________________________________-->
   <para>
    SQL标准允许<literal>GRANTED BY</literal>选项仅指定<literal>CURRENT_USER</literal>或<literal>CURRENT_ROLE</literal>。
    另外的变体是PostgreSQL扩展。
   </para>
<!-- pgdoc-cn_end sig_en=f9928806a96453a795215481d7bcf90a -->

<!-- pgdoc-cn_start sig_en=51badc8461180bcd58768e08e905d510 sig_cn_org=None source=14.1 
   <para>
    The SQL standard provides for a <literal>USAGE</literal> privilege
    on other kinds of objects: character sets, collations,
    translations.
   </para>
________________________________________________________-->
   <para>
    SQL 标准提供了其他对象类型上的<literal>USAGE</literal>特权：字符集、排序规则、翻译。
   </para>
<!-- pgdoc-cn_end sig_en=51badc8461180bcd58768e08e905d510 -->

<!-- pgdoc-cn_start sig_en=ad9f7f7788983b0add616d9dd6f3d206 sig_cn_org=None source=14.1 
   <para>
    In the SQL standard, sequences only have a <literal>USAGE</literal>
    privilege, which controls the use of the <literal>NEXT VALUE FOR</literal>
    expression, which is equivalent to the
    function <function>nextval</function> in PostgreSQL.  The sequence
    privileges <literal>SELECT</literal> and <literal>UPDATE</literal> are
    PostgreSQL extensions.  The application of the
    sequence <literal>USAGE</literal> privilege to
    the <literal>currval</literal> function is also a PostgreSQL extension (as
    is the function itself).
   </para>
________________________________________________________-->
   <para>
    在 SQL 标准中，序列只有一个<literal>USAGE</literal>特权，它控制<literal>NEXT VALUE FOR</literal>表达式的使用，该表达式等效于 PostgreSQL 中的函数<function>nextval</function>。序列的特权<literal>SELECT</literal>和<literal>UPDATE</literal>是 PostgreSQL 扩展。应用序列的<literal>USAGE</literal>特权到<literal>currval</literal>函数也是一个 PostgreSQL 扩展（该函数本身也是）。
   </para>
<!-- pgdoc-cn_end sig_en=ad9f7f7788983b0add616d9dd6f3d206 -->

<!-- pgdoc-cn_start sig_en=cbac6d7791d16d21aa1ac264c3719dbc sig_cn_org=8feaa2a2a143545fbd3770d695e9db6e source=15.7 
   <para>
    Privileges on databases, tablespaces, schemas, languages, and
    configuration parameters are
    <productname>PostgreSQL</productname> extensions.
   </para>
________________________________________________________-->
   <para>
    数据库、表空间、模式、语言和配置参数上的权限是<productname>PostgreSQL</productname>的扩展。
   </para>
<!-- pgdoc-cn_end sig_en=cbac6d7791d16d21aa1ac264c3719dbc -->
 </refsect1>


 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>参见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-revoke"/></member>
   <member><xref linkend="sql-alterdefaultprivileges"/></member>
  </simplelist>
 </refsect1>

</refentry>
