<!--
doc/src/sgml/ref/create_procedure.sgml
PostgreSQL documentation
-->

<refentry id="sql-createprocedure">
<!-- pgdoc-cn_start sig_en=9242c656a0b85fee428e7c6f0a88cf1f sig_cn_org=None source=14.1 
 <indexterm zone="sql-createprocedure">
  <primary>CREATE PROCEDURE</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-createprocedure">
  <primary>CREATE PROCEDURE</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=9242c656a0b85fee428e7c6f0a88cf1f -->

 <refmeta>
  <refentrytitle>CREATE PROCEDURE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=b02ef34f1fc8ab1897a5981a98840bad sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>CREATE PROCEDURE</refname>
  <refpurpose>define a new procedure</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>CREATE PROCEDURE</refname>
  <refpurpose>定义一个新的过程</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=b02ef34f1fc8ab1897a5981a98840bad -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=ddf74f4d88eb62e385b9230a59097a58 sig_cn_org=None source=14.1 
<synopsis>
CREATE [ OR REPLACE ] PROCEDURE
    <replaceable class="parameter">name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [ { DEFAULT | = } <replaceable class="parameter">default_expr</replaceable> ] [, ...] ] )
  { LANGUAGE <replaceable class="parameter">lang_name</replaceable>
    | TRANSFORM { FOR TYPE <replaceable class="parameter">type_name</replaceable> } [, ... ]
    | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    | SET <replaceable class="parameter">configuration_parameter</replaceable> { TO <replaceable class="parameter">value</replaceable> | = <replaceable class="parameter">value</replaceable> | FROM CURRENT }
    | AS '<replaceable class="parameter">definition</replaceable>'
    | AS '<replaceable class="parameter">obj_file</replaceable>', '<replaceable class="parameter">link_symbol</replaceable>'
    | <replaceable class="parameter">sql_body</replaceable>
  } ...
</synopsis>
________________________________________________________-->
<synopsis>
CREATE [ OR REPLACE ] PROCEDURE
    <replaceable class="parameter">name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [ { DEFAULT | = } <replaceable class="parameter">default_expr</replaceable> ] [, ...] ] )
  { LANGUAGE <replaceable class="parameter">lang_name</replaceable>
    | TRANSFORM { FOR TYPE <replaceable class="parameter">type_name</replaceable> } [, ... ]
    | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    | SET <replaceable class="parameter">configuration_parameter</replaceable> { TO <replaceable class="parameter">value</replaceable> | = <replaceable class="parameter">value</replaceable> | FROM CURRENT }
    | AS '<replaceable class="parameter">definition</replaceable>'
    | AS '<replaceable class="parameter">obj_file</replaceable>', '<replaceable class="parameter">link_symbol</replaceable>'
    | <replaceable class="parameter">sql_body</replaceable>
  } ...
</synopsis>
<!-- pgdoc-cn_end sig_en=ddf74f4d88eb62e385b9230a59097a58 -->
 </refsynopsisdiv>

 <refsect1 id="sql-createprocedure-description">
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>简介</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=16c83b490061d50fbcf62d641313ad06 sig_cn_org=None source=14.1 
  <para>
   <command>CREATE PROCEDURE</command> defines a new procedure.
   <command>CREATE OR REPLACE PROCEDURE</command> will either create a
   new procedure, or replace an existing definition.
   To be able to define a procedure, the user must have the
   <literal>USAGE</literal> privilege on the language.
  </para>
________________________________________________________-->
  <para>
   <command>CREATE PROCEDURE</command>定义一个新的过程。<command>CREATE OR REPLACE PROCEDURE</command>将会创建一个新过程或者替换一个已有的定义。为了能够定义过程，用户必须具有所使用的语言上的<literal>USAGE</literal>特权。
  </para>
<!-- pgdoc-cn_end sig_en=16c83b490061d50fbcf62d641313ad06 -->

<!-- pgdoc-cn_start sig_en=e41f2d5436dc03fcbf9caa0b2ca9205d sig_cn_org=None source=14.1 
  <para>
   If a schema name is included, then the procedure is created in the
   specified schema.  Otherwise it is created in the current schema.
   The name of the new procedure must not match any existing procedure or function
   with the same input argument types in the same schema.  However,
   procedures and functions of different argument types can share a name (this is
   called <firstterm>overloading</firstterm>).
  </para>
________________________________________________________-->
  <para>
   如果这个命令中包括了一个方案名称，则该过程将被创建在该方案中。否则过程将被创建在当前的方案中。新过程的名称不能匹配同一方案中具有相同输入参数类型的任何现有过程或函数。不过，具有不同参数类型的过程和函数可以共享同一个名称（这被称为<firstterm>重载</firstterm>）。
  </para>
<!-- pgdoc-cn_end sig_en=e41f2d5436dc03fcbf9caa0b2ca9205d -->

<!-- pgdoc-cn_start sig_en=e4e4d771139490d2119ef6c377295497 sig_cn_org=None source=14.1 
  <para>
   To replace the current definition of an existing procedure, use
   <command>CREATE OR REPLACE PROCEDURE</command>.  It is not possible
   to change the name or argument types of a procedure this way (if you
   tried, you would actually be creating a new, distinct procedure).
  </para>
________________________________________________________-->
  <para>
   要替换一个已有过程的当前定义，请使用<command>CREATE OR REPLACE PROCEDURE</command>。不能用这种方式更改过程的名称或者参数类型（如果尝试这样做，实际上会创建一个新的、不同的过程）。
  </para>
<!-- pgdoc-cn_end sig_en=e4e4d771139490d2119ef6c377295497 -->

<!-- pgdoc-cn_start sig_en=e21db958269f9ee2e22f8428cce7fbf2 sig_cn_org=None source=14.1 
  <para>
   When <command>CREATE OR REPLACE PROCEDURE</command> is used to replace an
   existing procedure, the ownership and permissions of the procedure
   do not change.  All other procedure properties are assigned the
   values specified or implied in the command.  You must own the procedure
   to replace it (this includes being a member of the owning role).
  </para>
________________________________________________________-->
  <para>
   当<command>CREATE OR REPLACE PROCEDURE</command>被用来替换一个现有的过程时，该过程的拥有关系和权限保持不变。所有其他的过程属性会被赋予这个命令中指定的或者暗示的值。必须拥有（包括成为拥有角色的成员）该过程才能替换它。
  </para>
<!-- pgdoc-cn_end sig_en=e21db958269f9ee2e22f8428cce7fbf2 -->

<!-- pgdoc-cn_start sig_en=967a0c3a294a2695ad82414c0d782be0 sig_cn_org=None source=14.1 
  <para>
   The user that creates the procedure becomes the owner of the procedure.
  </para>
________________________________________________________-->
  <para>
   创建过程的用户将成为该过程的拥有者。
  </para>
<!-- pgdoc-cn_end sig_en=967a0c3a294a2695ad82414c0d782be0 -->

<!-- pgdoc-cn_start sig_en=78b4fb4de7fbb5b6d87e8a065185f847 sig_cn_org=None source=14.1 
  <para>
   To be able to create a procedure, you must have <literal>USAGE</literal>
   privilege on the argument types.
  </para>
________________________________________________________-->
  <para>
   为了能够创建一个过程，用户必须具有参数类型上的<literal>USAGE</literal>特权。
  </para>
<!-- pgdoc-cn_end sig_en=78b4fb4de7fbb5b6d87e8a065185f847 -->

<!-- pgdoc-cn_start sig_en=f4cb9a2754bce7b3cc6fd9850a2c1549 sig_cn_org=None source=14.1 
  <para>
   Refer to <xref linkend="xproc"/> for further information on writing
   procedures.
  </para>
________________________________________________________-->
  <para>
   有关编写过程的详细信息，请参阅<xref linkend="xproc"/>。
  </para>
<!-- pgdoc-cn_end sig_en=f4cb9a2754bce7b3cc6fd9850a2c1549 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

   <variablelist>
    <varlistentry>
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=72e8053968ed565bfce35aec9865360e sig_cn_org=None source=14.1 
      <para>
       The name (optionally schema-qualified) of the procedure to create.
      </para>
________________________________________________________-->
      <para>
       要创建的过程的名称（可以是被方案限定的）。
      </para>
<!-- pgdoc-cn_end sig_en=72e8053968ed565bfce35aec9865360e -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argmode</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=17e88d7936635aa0a23b68bb9c4f2b8b sig_cn_org=None source=14.1 
      <para>
       The mode of an argument: <literal>IN</literal>, <literal>OUT</literal>,
       <literal>INOUT</literal>, or <literal>VARIADIC</literal>.  If omitted,
       the default is <literal>IN</literal>.
      </para>
________________________________________________________-->
      <para>
       参数的模式可以是：<literal>IN</literal>、<literal>OUT</literal>、
       <literal>INOUT</literal>或者<literal>VARIADIC</literal>。
       如果省略，则默认为<literal>IN</literal>。
      </para>
<!-- pgdoc-cn_end sig_en=17e88d7936635aa0a23b68bb9c4f2b8b -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argname</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=943b61de41ff72b789bb11a90cf0c0e2 sig_cn_org=None source=14.1 
      <para>
       The name of an argument.
      </para>
________________________________________________________-->
      <para>
       参数的名称。
      </para>
<!-- pgdoc-cn_end sig_en=943b61de41ff72b789bb11a90cf0c0e2 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argtype</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=061b87ec36d515e9ca8473005ed1aeba sig_cn_org=None source=14.1 
      <para>
       The data type(s) of the procedure's arguments (optionally
       schema-qualified), if any. The argument types can be base, composite,
       or domain types, or can reference the type of a table column.
      </para>
________________________________________________________-->
      <para>
       过程的参数（如果有）的数据类型（可以是被方案限定的）。参数类型可以是基础类型、组合类型或者域类型，或者可以引用一个表列的类型。
      </para>
<!-- pgdoc-cn_end sig_en=061b87ec36d515e9ca8473005ed1aeba -->
<!-- pgdoc-cn_start sig_en=a4b4cfa5135b3ddd66c78c26dbd26d8c sig_cn_org=None source=14.1 
      <para>
       Depending on the implementation language it might also be allowed
       to specify <quote>pseudo-types</quote> such as <type>cstring</type>.
       Pseudo-types indicate that the actual argument type is either
       incompletely specified, or outside the set of ordinary SQL data types.
      </para>
________________________________________________________-->
      <para>
       根据具体的实现语言，还可能可以指定<quote>伪类型</quote>，例如<type>cstring</type>。伪类型表示实际的参数类型没有完全确定，或者是位于普通SQL数据类型的集合之外。
      </para>
<!-- pgdoc-cn_end sig_en=a4b4cfa5135b3ddd66c78c26dbd26d8c -->
<!-- pgdoc-cn_start sig_en=0c8cd6477578d7bb2e5ccfc6156e6529 sig_cn_org=None source=14.1 
      <para>
       The type of a column is referenced by writing
       <literal><replaceable
       class="parameter">table_name</replaceable>.<replaceable
       class="parameter">column_name</replaceable>%TYPE</literal>.
       Using this feature can sometimes help make a procedure independent of
       changes to the definition of a table.
      </para>
________________________________________________________-->
      <para>
       写上<literal><replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable>%TYPE</literal>可以引用某个列的类型。使用这种特性有时可以让过程不受表定义改变的影响。
      </para>
<!-- pgdoc-cn_end sig_en=0c8cd6477578d7bb2e5ccfc6156e6529 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">default_expr</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=344dbcf2bc7c6c7b6d045233ca703a38 sig_cn_org=None source=14.1 
      <para>
       An expression to be used as default value if the parameter is
       not specified.  The expression has to be coercible to the
       argument type of the parameter.
       All input parameters following a
       parameter with a default value must have default values as well.
      </para>
________________________________________________________-->
      <para>
       没有指定参数时要被用作默认值的表达式。这个表达式必须符合该参数的参数类型。跟在有默认值的参数后面的输入参数也都必须有默认值。
      </para>
<!-- pgdoc-cn_end sig_en=344dbcf2bc7c6c7b6d045233ca703a38 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">lang_name</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=b17e7030e0e3b1a98c928a37c4c444e1 sig_cn_org=None source=14.1 
      <para>
       The name of the language that the procedure is implemented in.
       It can be <literal>sql</literal>, <literal>c</literal>,
       <literal>internal</literal>, or the name of a user-defined
       procedural language, e.g., <literal>plpgsql</literal>.  The default is
       <literal>sql</literal> if <replaceable
       class="parameter">sql_body</replaceable> is specified.  Enclosing the
       name in single quotes is deprecated and requires matching case.
      </para>
________________________________________________________-->
      <para>
       用于实现该过程的语言名称。它可以是<literal>sql</literal>、<literal>c</literal>、
       <literal>internal</literal>或者一种用户定义的过程语言的名称，例如<literal>plpgsql</literal>。
       如果指定了<replaceable class="parameter">sql_body</replaceable>，则默认值为<literal>sql</literal>。
        将名称包裹在单引号内的方式已经被废弃，并且要求大小写匹配。
      </para>
<!-- pgdoc-cn_end sig_en=b17e7030e0e3b1a98c928a37c4c444e1 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TRANSFORM { FOR TYPE <replaceable class="parameter">type_name</replaceable> } [, ... ] }</literal></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=c25d19ac246b5ed4a59a26c246bfaee7 sig_cn_org=None source=14.1 
      <para>
       Lists which transforms a call to the procedure should apply.  Transforms
       convert between SQL types and language-specific data types;
       see <xref linkend="sql-createtransform"/>.  Procedural language
       implementations usually have hardcoded knowledge of the built-in types,
       so those don't need to be listed here.  If a procedural language
       implementation does not know how to handle a type and no transform is
       supplied, it will fall back to a default behavior for converting data
       types, but this depends on the implementation.
      </para>
________________________________________________________-->
      <para>
       列出对过程的调用应该应用哪些Transform。Transform负责在SQL类型和语言相关的数据类型之间进行转换，请参考<xref linkend="sql-createtransform"/>。过程语言实现通常采用硬编码的方式保存内建类型的知识，因此它们无需在这里列出。但如果一种过程语言实现不知道如何处理一种类型并且没有提供Transform，它将回退到默认的行为来转换数据类型，但是这依赖于其实现。
      </para>
<!-- pgdoc-cn_end sig_en=c25d19ac246b5ed4a59a26c246bfaee7 -->
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><literal><optional>EXTERNAL</optional> SECURITY INVOKER</literal></term>
    <term><literal><optional>EXTERNAL</optional> SECURITY DEFINER</literal></term>

    <listitem>
<!-- pgdoc-cn_start sig_en=6782aaa50ac863f8115b9eb41efdeb6b sig_cn_org=None source=14.1 
     <para><literal>SECURITY INVOKER</literal> indicates that the procedure
      is to be executed with the privileges of the user that calls it.
      That is the default.  <literal>SECURITY DEFINER</literal>
      specifies that the procedure is to be executed with the
      privileges of the user that owns it.
     </para>
________________________________________________________-->
     <para><literal>SECURITY INVOKER</literal>指示过程以调用它的用户的特权来执行。这是默认方式。<literal>SECURITY DEFINER</literal>指定过程以拥有它的用户的特权来执行。
     </para>
<!-- pgdoc-cn_end sig_en=6782aaa50ac863f8115b9eb41efdeb6b -->

<!-- pgdoc-cn_start sig_en=d17132b1efb7791267caaedeba10d3a9 sig_cn_org=None source=14.1 
     <para>
      The key word <literal>EXTERNAL</literal> is allowed for SQL
      conformance, but it is optional since, unlike in SQL, this feature
      applies to all procedures not only external ones.
     </para>
________________________________________________________-->
     <para>
      为了符合SQL标注，允许使用<literal>EXTERNAL</literal>关键词，但它是可选的，因为和SQL中不同，这个特性适用于所有的过程而不仅仅是外部过程。
     </para>
<!-- pgdoc-cn_end sig_en=d17132b1efb7791267caaedeba10d3a9 -->

<!-- pgdoc-cn_start sig_en=465aad39331f1d0eb853d3bb73fd7f11 sig_cn_org=None source=14.1 
     <para>
      A <literal>SECURITY DEFINER</literal> procedure cannot execute
      transaction control statements (for example, <command>COMMIT</command>
      and <command>ROLLBACK</command>, depending on the language).
     </para>
________________________________________________________-->
     <para>
      <literal>SECURITY DEFINER</literal>过程不能执行事务控制语句（例如<command>COMMIT</command>和<command>ROLLBACK</command>，具体取决于实现的语言）。
     </para>
<!-- pgdoc-cn_end sig_en=465aad39331f1d0eb853d3bb73fd7f11 -->
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><replaceable>configuration_parameter</replaceable></term>
     <term><replaceable>value</replaceable></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=3f5ed98a623cff0bdbe7627cbba1205d sig_cn_org=None source=14.1 
      <para>
       The <literal>SET</literal> clause causes the specified configuration
       parameter to be set to the specified value when the procedure is
       entered, and then restored to its prior value when the procedure exits.
       <literal>SET FROM CURRENT</literal> saves the value of the parameter that
       is current when <command>CREATE PROCEDURE</command> is executed as the value
       to be applied when the procedure is entered.
      </para>
________________________________________________________-->
      <para>
       <literal>SET</literal>子句导致在进入该过程时指定的配置参数被设置为指定的值，并且在过程退出时恢复到之前的值。<literal>SET FROM CURRENT</literal>把<command>CREATE PROCEDURE</command>执行时该参数的当前值保存为在进入该过程时要应用的值。
      </para>
<!-- pgdoc-cn_end sig_en=3f5ed98a623cff0bdbe7627cbba1205d -->

<!-- pgdoc-cn_start sig_en=d5951574c5249054cd0ae9bb97c4bcab sig_cn_org=None source=14.1 
      <para>
       If a <literal>SET</literal> clause is attached to a procedure, then
       the effects of a <command>SET LOCAL</command> command executed inside the
       procedure for the same variable are restricted to the procedure: the
       configuration parameter's prior value is still restored at procedure exit.
       However, an ordinary
       <command>SET</command> command (without <literal>LOCAL</literal>) overrides the
       <literal>SET</literal> clause, much as it would do for a previous <command>SET
       LOCAL</command> command: the effects of such a command will persist after
       procedure exit, unless the current transaction is rolled back.
      </para>
________________________________________________________-->
      <para>
       如果对过程附加一个<literal>SET</literal>子句，那么在该过程中为同一个变量执行的<command>SET LOCAL</command>命令的效果就被限制于该过程：在过程退出时还是会恢复到该配置参数的以前的值。不过，一个普通的<command>SET</command>命令（没有<literal>LOCAL</literal>）会重载这个<literal>SET</literal>子句，很像它对一个之前的<command>SET LOCAL</command>命令所做的事情：这样一个命令的效果将持续到过程退出之后，除非当前事务被回滚。
      </para>
<!-- pgdoc-cn_end sig_en=d5951574c5249054cd0ae9bb97c4bcab -->

<!-- pgdoc-cn_start sig_en=b381b497d351e10dc88390ccd9782003 sig_cn_org=None source=14.1 
      <para>
       If a <literal>SET</literal> clause is attached to a procedure, then
       that procedure cannot execute transaction control statements (for
       example, <command>COMMIT</command> and <command>ROLLBACK</command>,
       depending on the language).
      </para>
________________________________________________________-->
      <para>
       如果对过程附加一个<literal>SET</literal>子句，则该过程不能执行事务控制语句（例如<command>COMMIT</command>和<command>ROLLBACK</command>，具体取决于实现的语言）。
      </para>
<!-- pgdoc-cn_end sig_en=b381b497d351e10dc88390ccd9782003 -->

<!-- pgdoc-cn_start sig_en=a523b1980b53a7b9de6c28a7a7a2ad78 sig_cn_org=None source=14.1 
      <para>
       See <xref linkend="sql-set"/> and
       <xref linkend="runtime-config"/>
       for more information about allowed parameter names and values.
      </para>
________________________________________________________-->
      <para>
       有关允许的参数名和值的更多信息请参考<xref linkend="sql-set"/>和<xref linkend="runtime-config"/>。
      </para>
<!-- pgdoc-cn_end sig_en=a523b1980b53a7b9de6c28a7a7a2ad78 -->
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">definition</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=d1f71cd21921ba126cfe7015e3e10efe sig_cn_org=None source=14.1 
      <para>
       A string constant defining the procedure; the meaning depends on the
       language.  It can be an internal procedure name, the path to an
       object file, an SQL command, or text in a procedural language.
      </para>
________________________________________________________-->
      <para>
       一个定义该过程的字符串常量，其含义取决于语言。它可以是一个内部的过程名、一个对象文件的路径、一个SQL命令或者以一种过程语言编写的文本。
      </para>
<!-- pgdoc-cn_end sig_en=d1f71cd21921ba126cfe7015e3e10efe -->

<!-- pgdoc-cn_start sig_en=fdc034c78ffd34d4edf7c71318e0cb36 sig_cn_org=None source=14.1 
      <para>
       It is often helpful to use dollar quoting (see <xref
       linkend="sql-syntax-dollar-quoting"/>) to write the procedure definition
       string, rather than the normal single quote syntax.  Without dollar
       quoting, any single quotes or backslashes in the procedure definition must
       be escaped by doubling them.
      </para>
________________________________________________________-->
      <para>
       在编写过程的定义字符串时，使用美元引用（见<xref linkend="sql-syntax-dollar-quoting"/>）而不是普通的单引号语法常常会很有帮助。如果没有美元引用，过程定义中的任何单引号或者反斜线必须以双写的方式进行转义。
      </para>
<!-- pgdoc-cn_end sig_en=fdc034c78ffd34d4edf7c71318e0cb36 -->

     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal><replaceable class="parameter">obj_file</replaceable>, <replaceable class="parameter">link_symbol</replaceable></literal></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=5061d471ad67917bab8a5f6b5b2b3f93 sig_cn_org=None source=14.1 
      <para>
       This form of the <literal>AS</literal> clause is used for
       dynamically loadable C language procedures when the procedure name
       in the C language source code is not the same as the name of
       the SQL procedure. The string <replaceable
       class="parameter">obj_file</replaceable> is the name of the shared
       library file containing the compiled C procedure, and is interpreted
       as for the <link linkend="sql-load"><command>LOAD</command></link> command.  The string
       <replaceable class="parameter">link_symbol</replaceable> is the
       procedure's link symbol, that is, the name of the procedure in the C
       language source code.  If the link symbol is omitted, it is assumed
       to be the same as the name of the SQL procedure being defined.
      </para>
________________________________________________________-->
      <para>
       当C语言源码中的过程名与SQL过程的名称不同时，这种形式的<literal>AS</literal>子句被用于动态可装载的C语言过程。字符串<replaceable
       class="parameter">obj_file</replaceable>是包含已编译好的C过程的共享库文件名，并且被按照<link linkend="sql-load"><command>LOAD</command></link>命令的方式解析。字符串<replaceable class="parameter">link_symbol</replaceable>是该过程的链接符号，也就是该过程在C语言源代码中的名称。如果链接符号被省略，则会被假定为与正在被定义的SQL过程的名称相同。
      </para>
<!-- pgdoc-cn_end sig_en=5061d471ad67917bab8a5f6b5b2b3f93 -->

<!-- pgdoc-cn_start sig_en=2d6a59fd4d8cca3c97384a37afd3de64 sig_cn_org=None source=14.1 
      <para>
       When repeated <command>CREATE PROCEDURE</command> calls refer to
       the same object file, the file is only loaded once per session.
       To unload and
       reload the file (perhaps during development), start a new session.
      </para>
________________________________________________________-->
      <para>
       当重复的<command>CREATE PROCEDURE</command>调用引用同一个对象文件时，只会对每一个会话装载该文件一次。要卸载或者重新载入该文件（可能是在开发期间），应该开始一个新的会话。
      </para>
<!-- pgdoc-cn_end sig_en=2d6a59fd4d8cca3c97384a37afd3de64 -->

     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">sql_body</replaceable></term>

     <listitem>
<!-- pgdoc-cn_start sig_en=50112d66290f914221af36ad264a4470 sig_cn_org=None source=14.1 
      <para>
       The body of a <literal>LANGUAGE SQL</literal> procedure.  This should
       be a block
<programlisting>
BEGIN ATOMIC
  <replaceable>statement</replaceable>;
  <replaceable>statement</replaceable>;
  ...
  <replaceable>statement</replaceable>;
END
</programlisting>
      </para>
________________________________________________________-->
      <para>
       <literal>LANGUAGE SQL</literal>过程的主体。这可以是单个语句
<programlisting>
BEGIN ATOMIC
  <replaceable>statement</replaceable>;
  <replaceable>statement</replaceable>;
  ...
  <replaceable>statement</replaceable>;
END
</programlisting>
      </para>
<!-- pgdoc-cn_end sig_en=50112d66290f914221af36ad264a4470 -->

<!-- pgdoc-cn_start sig_en=305af59e152bfeee4ef9f7f5ed97e8bd sig_cn_org=None source=14.1 
      <para>
       This is similar to writing the text of the procedure body as a string
       constant (see <replaceable>definition</replaceable> above), but there
       are some differences: This form only works for <literal>LANGUAGE
       SQL</literal>, the string constant form works for all languages.  This
       form is parsed at procedure definition time, the string constant form is
       parsed at execution time; therefore this form cannot support
       polymorphic argument types and other constructs that are not resolvable
       at procedure definition time.  This form tracks dependencies between the
       procedure and objects used in the procedure body, so <literal>DROP
       ... CASCADE</literal> will work correctly, whereas the form using
       string literals may leave dangling procedures.  Finally, this form is
       more compatible with the SQL standard and other SQL implementations.
      </para>
________________________________________________________-->
      <para>
       这类似于将过程体的文本写成字符串常量（请参见上面的<replaceable>definition</replaceable>），
       但有一些不同：此形式仅适用于<literal>LANGUAGE SQL</literal>，字符串常量形式适用于所有语言。
       此形式在过程定义时解析，字符串常量形式在执行时解析；因此，此形式不能支持多态参数类型和其
       他在过程定义时无法解析的构造。
       此形式跟踪过程和过程体中使用的对象之间的依赖关系，因此<literal>DROP ... CASCADE</literal>
       将正常工作，而使用字符串文本的形式可能会留下悬空过程。最后，此形式与SQL标准和其他SQL实现更加兼容。
      </para>
<!-- pgdoc-cn_end sig_en=305af59e152bfeee4ef9f7f5ed97e8bd -->
     </listitem>
    </varlistentry>

   </variablelist>
 </refsect1>

 <refsect1 id="sql-createprocedure-notes">
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=114bac0d76f5dde5215b8f1ccb061e58 sig_cn_org=None source=14.1 
  <para>
   See <xref linkend="sql-createfunction"/> for more details on function
   creation that also apply to procedures.
  </para>
________________________________________________________-->
  <para>
   函数创建也适用于过程，更多细节请参考<xref linkend="sql-createfunction"/>。
  </para>
<!-- pgdoc-cn_end sig_en=114bac0d76f5dde5215b8f1ccb061e58 -->

<!-- pgdoc-cn_start sig_en=9fcd50457472ffe341b04b6e7c97ce3a sig_cn_org=None source=14.1 
  <para>
   Use <xref linkend="sql-call"/> to execute a procedure.
  </para>
________________________________________________________-->
  <para>
   使用<xref linkend="sql-call"/>来执行过程。
  </para>
<!-- pgdoc-cn_end sig_en=9fcd50457472ffe341b04b6e7c97ce3a -->
 </refsect1>

 <refsect1 id="sql-createprocedure-examples">
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=4ce7679667a80a8779374e93101bbd0e sig_cn_org=None source=14.1 
  <para>
<programlisting>
CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
AS $$
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
$$;
</programlisting>
   or
<programlisting>
CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
BEGIN ATOMIC
  INSERT INTO tbl VALUES (a);
  INSERT INTO tbl VALUES (b);
END;
</programlisting>
   and call like this:
<programlisting>
CALL insert_data(1, 2);
</programlisting></para>
________________________________________________________-->
  <para>
<programlisting>
CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
AS $$
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
$$;
</programlisting>
   or
<programlisting>
CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
BEGIN ATOMIC
  INSERT INTO tbl VALUES (a);
  INSERT INTO tbl VALUES (b);
END;
</programlisting>
   and call like this:
<programlisting>
CALL insert_data(1, 2);
</programlisting></para>
<!-- pgdoc-cn_end sig_en=4ce7679667a80a8779374e93101bbd0e -->
 </refsect1>

 <refsect1 id="sql-createprocedure-compat">
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=a92224f62e8109be0be45ff7e35f9514 sig_cn_org=None source=14.1 
  <para>
   A <command>CREATE PROCEDURE</command> command is defined in the SQL
   standard.  The <productname>PostgreSQL</productname> implementation can be
   used in a compatible way but has many extensions.  For details see also
   <xref linkend="sql-createfunction"/>.
  </para>
________________________________________________________-->
  <para>
   SQL标准中定义有一个<command>CREATE PROCEDURE</command>命令。
   <productname>PostgreSQL</productname>实现可以以兼容的方式使用，但有许多扩展。
   有关详细信息，请参见<xref linkend="sql-createfunction"/>。
  </para>
<!-- pgdoc-cn_end sig_en=a92224f62e8109be0be45ff7e35f9514 -->
 </refsect1>


 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>另见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-alterprocedure"/></member>
   <member><xref linkend="sql-dropprocedure"/></member>
   <member><xref linkend="sql-call"/></member>
   <member><xref linkend="sql-createfunction"/></member>
  </simplelist>
 </refsect1>

</refentry>
