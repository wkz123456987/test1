<!--
doc/src/sgml/ref/explain.sgml
PostgreSQL documentation
-->

<refentry id="sql-explain">
<!-- pgdoc-cn_start sig_en=cfba896fc15fb0e474b01e142f6dee9d sig_cn_org=None source=14.1 
 <indexterm zone="sql-explain">
  <primary>EXPLAIN</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-explain">
  <primary>EXPLAIN</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=cfba896fc15fb0e474b01e142f6dee9d -->

<!-- pgdoc-cn_start sig_en=d0d0e03484239843fb104c7c3e8dddbb sig_cn_org=None source=14.1 
 <indexterm zone="sql-explain">
  <primary>prepared statements</primary>
  <secondary>showing the query plan</secondary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-explain">
  <primary>预备语句</primary>
  <secondary>显示查询计划</secondary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=d0d0e03484239843fb104c7c3e8dddbb -->

<!-- pgdoc-cn_start sig_en=c0bdde4e779091df552822f2ddd8d460 sig_cn_org=None source=14.1 
 <indexterm zone="sql-explain">
  <primary>cursor</primary>
  <secondary>showing the query plan</secondary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-explain">
  <primary>游标</primary>
  <secondary>显示查询计划</secondary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=c0bdde4e779091df552822f2ddd8d460 -->

 <refmeta>
  <refentrytitle>EXPLAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=0d81e0ab25847cb4c2c747417895c304 sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>EXPLAIN</refname>
  <refpurpose>show the execution plan of a statement</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>EXPLAIN</refname>
  <refpurpose>显示一个语句的执行计划</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=0d81e0ab25847cb4c2c747417895c304 -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=97c2e5b025b66da804525438283006da sig_cn_org=None source=14.1 
<synopsis>
EXPLAIN [ ( <replaceable class="parameter">option</replaceable> [, ...] ) ] <replaceable class="parameter">statement</replaceable>
EXPLAIN [ ANALYZE ] [ VERBOSE ] <replaceable class="parameter">statement</replaceable>

<phrase>where <replaceable class="parameter">option</replaceable> can be one of:</phrase>

    ANALYZE [ <replaceable class="parameter">boolean</replaceable> ]
    VERBOSE [ <replaceable class="parameter">boolean</replaceable> ]
    COSTS [ <replaceable class="parameter">boolean</replaceable> ]
    SETTINGS [ <replaceable class="parameter">boolean</replaceable> ]
    BUFFERS [ <replaceable class="parameter">boolean</replaceable> ]
    WAL [ <replaceable class="parameter">boolean</replaceable> ]
    TIMING [ <replaceable class="parameter">boolean</replaceable> ]
    SUMMARY [ <replaceable class="parameter">boolean</replaceable> ]
    FORMAT { TEXT | XML | JSON | YAML }
</synopsis>
________________________________________________________-->
<synopsis>
EXPLAIN [ ( <replaceable class="parameter">option</replaceable> [, ...] ) ] <replaceable class="parameter">statement</replaceable>
EXPLAIN [ ANALYZE ] [ VERBOSE ] <replaceable class="parameter">statement</replaceable>

<phrase>这里 <replaceable class="parameter">option</replaceable>可以是：</phrase>

    ANALYZE [ <replaceable class="parameter">boolean</replaceable> ]
    VERBOSE [ <replaceable class="parameter">boolean</replaceable> ]
    COSTS [ <replaceable class="parameter">boolean</replaceable> ]
    SETTINGS [ <replaceable class="parameter">boolean</replaceable> ]
    BUFFERS [ <replaceable class="parameter">boolean</replaceable> ]
    WAL [ <replaceable class="parameter">boolean</replaceable> ]
    TIMING [ <replaceable class="parameter">boolean</replaceable> ]
    SUMMARY [ <replaceable class="parameter">boolean</replaceable> ]
    FORMAT { TEXT | XML | JSON | YAML }
</synopsis>
<!-- pgdoc-cn_end sig_en=97c2e5b025b66da804525438283006da -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=b1e09a949625aa1cf1ca2f3f0a71a24c sig_cn_org=None source=14.1 
  <para>
   This command displays the execution plan that the
   <productname>PostgreSQL</productname> planner generates for the
   supplied statement.  The execution plan shows how the table(s)
   referenced by the statement will be scanned &mdash; by plain sequential scan,
   index scan, etc. &mdash; and if multiple tables are referenced, what join
   algorithms will be used to bring together the required rows from
   each input table.
  </para>
________________________________________________________-->
  <para>
   这个命令显示<productname>PostgreSQL</productname>计划器为提供的语句所生成的执行计划。该执行计划会显示将怎样扫描语句中引用的表 &mdash; 普通的顺序扫描、索引扫描等等 &mdash; 以及在引用多个表时使用何种连接算法来把来自每个输入表的行连接在一起。
  </para>
<!-- pgdoc-cn_end sig_en=b1e09a949625aa1cf1ca2f3f0a71a24c -->

<!-- pgdoc-cn_start sig_en=503f510feefa4ca9c3d12bb9b607fd25 sig_cn_org=None source=14.1 
  <para>
   The most critical part of the display is the estimated statement execution
   cost, which is the planner's guess at how long it will take to run the
   statement (measured in cost units that are arbitrary, but conventionally
   mean disk page fetches).  Actually two numbers
   are shown: the start-up cost before the first row can be returned, and
   the total cost to return all the rows.  For most queries the total cost
   is what matters, but in contexts such as a subquery in <literal>EXISTS</literal>, the planner
   will choose the smallest start-up cost instead of the smallest total cost
   (since the executor will stop after getting one row, anyway).
   Also, if you limit the number of rows to return with a <literal>LIMIT</literal> clause,
   the planner makes an appropriate interpolation between the endpoint
   costs to estimate which plan is really the cheapest.
  </para>
________________________________________________________-->
  <para>
   显示中最重要的部分是估计出的语句执行代价，它是计划器对于该语句要运行多久的猜测（以任意的代价单位度量，但是习惯上表示取磁盘页面的次数）。事实上会显示两个数字：在第一行能被返回前的启动代价，以及返回所有行的总代价。对于大部分查询来说总代价是最重要的，但是在一些情景中（如<literal>EXISTS</literal>中的子查询），计划器将选择更小的启动代价来代替最小的总代价（因为执行器将在得到一行后停止）。此外，如果你用一个<literal>LIMIT</literal>子句限制返回行的数量，计划器会在终端代价之间做出适当的插值来估计到底哪个计划是真正代价最低的。
  </para>
<!-- pgdoc-cn_end sig_en=503f510feefa4ca9c3d12bb9b607fd25 -->

<!-- pgdoc-cn_start sig_en=197df37b8d93853730f0671c069077eb sig_cn_org=None source=14.1 
  <para>
   The <literal>ANALYZE</literal> option causes the statement to be actually
   executed, not only planned.  Then actual run time statistics are added to
   the display, including the total elapsed time expended within each plan
   node (in milliseconds) and the total number of rows it actually returned.
   This is useful for seeing whether the planner's estimates
   are close to reality.
  </para>
________________________________________________________-->
  <para>
   <literal>ANALYZE</literal>选项导致该语句被实际执行，而不仅仅是被计划。那么实际的运行时间统计会被显示出来，包括在每个计划结点上花费的总时间（以毫秒计）以及它实际返回的行数。这对观察计划器的估计是否与实际相近很有用。
  </para>
<!-- pgdoc-cn_end sig_en=197df37b8d93853730f0671c069077eb -->

  <important>
<!-- pgdoc-cn_start sig_en=2652b78932785f22491d06e7cefc2ed3 sig_cn_org=6c97b40786cc7179edbde14c058edb19 source=15.7 
   <para>
    Keep in mind that the statement is actually executed when
    the <literal>ANALYZE</literal> option is used.  Although
    <command>EXPLAIN</command> will discard any output that a
    <command>SELECT</command> would return, other side effects of the
    statement will happen as usual.  If you wish to use
    <command>EXPLAIN ANALYZE</command> on an
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command>, <command>MERGE</command>,
    <command>CREATE TABLE AS</command>,
    or <command>EXECUTE</command> statement
    without letting the command affect your data, use this approach:
<programlisting>
BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
</programlisting>
   </para>
________________________________________________________-->
   <para>
    要记住，当使用<literal>ANALYZE</literal>选项时，语句实际上会被执行。虽然<command>EXPLAIN</command>会丢弃<command>SELECT</command>返回的任何输出，但语句的其他副作用会像往常一样发生。如果您希望在<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>、<command>MERGE</command>、<command>CREATE TABLE AS</command>或<command>EXECUTE</command>语句上使用<command>EXPLAIN ANALYZE</command>而不让该命令影响您的数据，请使用以下方法：
<programlisting>
BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=2652b78932785f22491d06e7cefc2ed3 -->
  </important>

<!-- pgdoc-cn_start sig_en=9bf3af9e99f94497ae35af157caa91e3 sig_cn_org=None source=14.1 
  <para>
   Only the <literal>ANALYZE</literal> and <literal>VERBOSE</literal> options
   can be specified, and only in that order, without surrounding the option
   list in parentheses.  Prior to <productname>PostgreSQL</productname> 9.0,
   the unparenthesized syntax was the only one supported.  It is expected that
   all new options will be supported only in the parenthesized syntax.
  </para>
________________________________________________________-->
  <para>
   只有<literal>ANALYZE</literal>和<literal>VERBOSE</literal>选项能被指定，并且必须按照上述的顺序，不要把选项列表放在圆括号内。在<productname>PostgreSQL</productname> 9.0 之前，只支持没有圆括号的语法。我们期望所有新的选项将只在圆括号语法中支持。
  </para>
<!-- pgdoc-cn_end sig_en=9bf3af9e99f94497ae35af157caa91e3 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

  <variablelist>
   <varlistentry>
    <term><literal>ANALYZE</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=de62416980c23531460c6941dfd605a3 sig_cn_org=None source=14.1 
     <para>
      Carry out the command and show actual run times and other statistics.
      This parameter defaults to <literal>FALSE</literal>.
     </para>
________________________________________________________-->
     <para>
      执行命令并且显示实际的运行时间和其他统计信息。这个参数默认被设置为<literal>FALSE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=de62416980c23531460c6941dfd605a3 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=34a2e31551b78daae1b32ca82b954f7a sig_cn_org=None source=14.1 
     <para>
      Display additional information regarding the plan.  Specifically, include
      the output column list for each node in the plan tree, schema-qualify
      table and function names, always label variables in expressions with
      their range table alias, and always print the name of each trigger for
      which statistics are displayed.  The query identifier will also be
      displayed if one has been computed, see <xref
      linkend="guc-compute-query-id"/> for more details.  This parameter
      defaults to <literal>FALSE</literal>.
     </para>
________________________________________________________-->
     <para>
      显示关于计划的额外信息。
      特别是：计划树中每个结点的输出列列表、模式限定的表和函数名、总是把表达式中的变量标上它们的范围表别名，以及总是打印统计信息被显示的每个触发器的名称。 
      如果已经被计算，查询标识符也会被显示，详请参见<xref linkend="guc-compute-query-id"/>。
      这个参数默认被设置为<literal>FALSE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=34a2e31551b78daae1b32ca82b954f7a -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COSTS</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=647a2cf03140f5739c74f02c9da48bba sig_cn_org=None source=14.1 
     <para>
      Include information on the estimated startup and total cost of each
      plan node, as well as the estimated number of rows and the estimated
      width of each row.
      This parameter defaults to <literal>TRUE</literal>.
     </para>
________________________________________________________-->
     <para>
      包括每一个计划结点的估计启动和总代价，以及估计的行数和每行的宽度。这个参数默认被设置为<literal>TRUE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=647a2cf03140f5739c74f02c9da48bba -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SETTINGS</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=e5c6ed49f024aefa1827dd4f561c03be sig_cn_org=None source=14.1 
     <para>
      Include information on configuration parameters.  Specifically, include
      options affecting query planning with value different from the built-in
      default value.  This parameter defaults to <literal>FALSE</literal>.
     </para>
________________________________________________________-->
     <para>
      包括有关配置参数的信息。具体来说，包括影响查询计划的选项，其值与内置默认值不同。此参数默认为<literal>FALSE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=e5c6ed49f024aefa1827dd4f561c03be -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BUFFERS</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=e24bfc8a4e647da29661b603566d637e sig_cn_org=6ab9fc2dde6b39f6099493d30f8a3335 source=15.7 
     <para>
      Include information on buffer usage. Specifically, include the number of
      shared blocks hit, read, dirtied, and written, the number of local blocks
      hit, read, dirtied, and written, the number of temp blocks read and
      written, and the time spent reading and writing data file blocks and
      temporary file blocks (in milliseconds) if
      <xref linkend="guc-track-io-timing"/> is enabled.  A
      <emphasis>hit</emphasis> means that a read was avoided because the block
      was found already in cache when needed.
      Shared blocks contain data from regular tables and indexes;
      local blocks contain data from temporary tables and indexes;
      while temporary blocks contain short-term working data used in sorts,
      hashes, Materialize plan nodes, and similar cases.
      The number of blocks <emphasis>dirtied</emphasis> indicates the number of
      previously unmodified blocks that were changed by this query; while the
      number of blocks <emphasis>written</emphasis> indicates the number of
      previously-dirtied blocks evicted from cache by this backend during
      query processing.
      The number of blocks shown for an
      upper-level node includes those used by all its child nodes.  In text
      format, only non-zero values are printed.  It defaults to
      <literal>FALSE</literal>.
     </para>
________________________________________________________-->
     <para>
      包括有关缓冲区使用情况的信息。具体包括共享块命中、读取、脏化和写入的数量，本地块命中、读取、脏化和写入的数量，临时块读取和写入的数量，以及读取和写入数据文件块和临时文件块所花费的时间（以毫秒为单位），如果启用了<xref linkend="guc-track-io-timing"/>。 <emphasis>命中</emphasis>表示在需要时已在缓存中找到块，因此避免了读取。
      共享块包含来自常规表和索引的数据；本地块包含来自临时表和索引的数据；而临时块包含在排序、哈希、Materialize计划节点等情况下使用的短期工作数据。
      <emphasis>脏化</emphasis>块的数量表示此查询更改的先前未修改的块数量；而<emphasis>写入</emphasis>块的数量表示此后端在查询处理过程中从缓存中驱逐的先前脏化的块数量。
      对于上层节点显示的块数包括其所有子节点使用的块数。在文本格式中，仅打印非零值。默认值为<literal>FALSE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=e24bfc8a4e647da29661b603566d637e -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WAL</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=4a435b0fff99bece78da505501c11106 sig_cn_org=None source=14.1 
     <para>
      Include information on WAL record generation. Specifically, include the
      number of records, number of full page images (fpi) and the amount of WAL
      generated in bytes. In text format, only non-zero values are printed.
      This parameter may only be used when <literal>ANALYZE</literal> is also
      enabled.  It defaults to <literal>FALSE</literal>.
     </para>
________________________________________________________-->
     <para>
      包括有关WAL记录生成的信息。
      具体来说，包括记录数、整页图像数（fpi）和生成的WAL字节数量。
      在文本格式中，仅打印非零值。
      此参数只能在同时启用<literal>ANALYZE</literal>时使用。
      它默认为<literal>FALSE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=4a435b0fff99bece78da505501c11106 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TIMING</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=fdd93f9a02812090af451a855d3ea8de sig_cn_org=None source=14.1 
     <para>
      Include actual startup time and time spent in each node in the output.
      The overhead of repeatedly reading the system clock can slow down the
      query significantly on some systems, so it may be useful to set this
      parameter to <literal>FALSE</literal> when only actual row counts, and
      not exact times, are needed.  Run time of the entire statement is
      always measured, even when node-level timing is turned off with this
      option.
      This parameter may only be used when <literal>ANALYZE</literal> is also
      enabled.  It defaults to <literal>TRUE</literal>.
     </para>
________________________________________________________-->
     <para>
      在输出中包括实际启动时间以及在每个结点中花掉的时间。反复读取系统时钟的负荷在某些系统上会显著地拖慢查询，因此在只需要实际的行计数而不是实际时间时，把这个参数设置为<literal>FALSE</literal>可能会有用。即便用这个选项关闭结点层的计时，整个语句的运行时间也总是会被度量。只有当<literal>ANALYZE</literal>也被启用时，这个参数才能使用。它的默认被设置为<literal>TRUE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=fdd93f9a02812090af451a855d3ea8de -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SUMMARY</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=842a0afa12b453912951edacc0708c47 sig_cn_org=None source=14.1 
     <para>
      Include summary information (e.g., totaled timing information) after the
      query plan.  Summary information is included by default when
      <literal>ANALYZE</literal> is used but otherwise is not included by
      default, but can be enabled using this option.  Planning time in
      <command>EXPLAIN EXECUTE</command> includes the time required to fetch
      the plan from the cache and the time required for re-planning, if
      necessary.
     </para>
________________________________________________________-->
     <para>
      在查询计划之后包含摘要信息（例如，总计的时间信息）。当使用<literal>ANALYZE</literal>
	  时默认包含摘要信息，但默认情况下不包含摘要信息，但可以使用此选项启用摘要信息。
	  使用<command>EXPLAIN EXECUTE</command>中的计划时间包括从缓存中获取计划所需的时间
	  以及重新计划所需的时间（如有必要）。
     </para>
<!-- pgdoc-cn_end sig_en=842a0afa12b453912951edacc0708c47 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORMAT</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=7d821905180133100365907e8f991d6f sig_cn_org=None source=14.1 
     <para>
      Specify the output format, which can be TEXT, XML, JSON, or YAML.
      Non-text output contains the same information as the text output
      format, but is easier for programs to parse.  This parameter defaults to
      <literal>TEXT</literal>.
     </para>
________________________________________________________-->
     <para>
      指定输出格式，可以是 TEXT、XML、JSON 或者 YAML。非文本输出包含和文本输出格式相同的信息，但是更容易被程序解析。这个参数默认被设置为<literal>TEXT</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=7d821905180133100365907e8f991d6f -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">boolean</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=8bf72cd4d6f8014b82e3bee2e1efc117 sig_cn_org=None source=14.1 
     <para>
      Specifies whether the selected option should be turned on or off.
      You can write <literal>TRUE</literal>, <literal>ON</literal>, or
      <literal>1</literal> to enable the option, and <literal>FALSE</literal>,
      <literal>OFF</literal>, or <literal>0</literal> to disable it.  The
      <replaceable class="parameter">boolean</replaceable> value can also
      be omitted, in which case <literal>TRUE</literal> is assumed.
     </para>
________________________________________________________-->
     <para>
      指定被选中的选项是否应该被打开或关闭。可以写<literal>TRUE</literal>、<literal>ON</literal>或<literal>1</literal>来启用选项，写<literal>FALSE</literal>、<literal>OFF</literal>或<literal>0</literal>禁用它。<replaceable class="parameter">boolean</replaceable>值也能被忽略，在这种情况下会假定值为<literal>TRUE</literal>。
     </para>
<!-- pgdoc-cn_end sig_en=8bf72cd4d6f8014b82e3bee2e1efc117 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">statement</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=d938378fe714371d7cb9861f9cb21431 sig_cn_org=42e11e1a2ab87b741cfc31f4e36b0fa7 source=15.7 
     <para>
      Any <command>SELECT</command>, <command>INSERT</command>, <command>UPDATE</command>,
      <command>DELETE</command>, <command>MERGE</command>,
      <command>VALUES</command>, <command>EXECUTE</command>,
      <command>DECLARE</command>, <command>CREATE TABLE AS</command>, or
      <command>CREATE MATERIALIZED VIEW AS</command> statement, whose execution
      plan you wish to see.
     </para>
________________________________________________________-->
     <para>
      任何<command>SELECT</command>，<command>INSERT</command>，<command>UPDATE</command>，
      <command>DELETE</command>，<command>MERGE</command>，
      <command>VALUES</command>，<command>EXECUTE</command>，
      <command>DECLARE</command>，<command>CREATE TABLE AS</command>，或
      <command>CREATE MATERIALIZED VIEW AS</command>语句，您希望查看其执行计划。
     </para>
<!-- pgdoc-cn_end sig_en=d938378fe714371d7cb9861f9cb21431 -->
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=83a929047ae9374bbfd2aa827d90c66a sig_cn_org=None source=14.1 
  <title>Outputs</title>
________________________________________________________-->
  <title>输出</title>
<!-- pgdoc-cn_end sig_en=83a929047ae9374bbfd2aa827d90c66a -->

<!-- pgdoc-cn_start sig_en=f19bc0077638e6ac57ece33129e2d93a sig_cn_org=None source=14.1 
   <para>
    The command's result is a textual description of the plan selected
    for the <replaceable class="parameter">statement</replaceable>,
    optionally annotated with execution statistics.
    <xref linkend="using-explain"/> describes the information provided.
   </para>
________________________________________________________-->
   <para>
    这个命令的结果是为<replaceable class="parameter">statement</replaceable>选中的计划的文本描述，可能还标注了执行统计信息。<xref linkend="using-explain"/>描述了所提供的信息。
   </para>
<!-- pgdoc-cn_end sig_en=f19bc0077638e6ac57ece33129e2d93a -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=ac67b6dafe1d4015f81cbdf010b25ef8 sig_cn_org=None source=14.1 
  <para>
   In order to allow the <productname>PostgreSQL</productname> query
   planner to make reasonably informed decisions when optimizing
   queries, the <link
   linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
   data should be up-to-date for all tables used in the query.  Normally
   the <link linkend="autovacuum">autovacuum daemon</link> will take care
   of that automatically.  But if a table has recently had substantial
   changes in its contents, you might need to do a manual
   <link linkend="sql-analyze"><command>ANALYZE</command></link> rather than wait for autovacuum to catch up
   with the changes.
  </para>
________________________________________________________-->
  <para>
   为了允许<productname>PostgreSQL</productname>查询计划器在优化查询时能做出合理的知情决策，查询中用到的所有表的<link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>数据应该能保持为最新。
   通常这个工作会由<link linkend="autovacuum">autovacuum daemon</link>负责自动完成。
   但是如果一个表最近在内容上有大量的改变，我们可能需要做一次手动的<link linkend="sql-analyze"><command>ANALYZE</command></link>而不是等待 autovacuum 捕捉这些改变。
  </para>
<!-- pgdoc-cn_end sig_en=ac67b6dafe1d4015f81cbdf010b25ef8 -->

<!-- pgdoc-cn_start sig_en=102200edaeb2154f48fa49ca215d87b8 sig_cn_org=None source=14.1 
  <para>
   In order to measure the run-time cost of each node in the execution
   plan, the current implementation of <command>EXPLAIN
   ANALYZE</command> adds profiling overhead to query execution.
   As a result, running <command>EXPLAIN ANALYZE</command>
   on a query can sometimes take significantly longer than executing
   the query normally. The amount of overhead depends on the nature of
   the query, as well as the platform being used.  The worst case occurs
   for plan nodes that in themselves require very little time per
   execution, and on machines that have relatively slow operating
   system calls for obtaining the time of day.
  </para>
________________________________________________________-->
  <para>
   为了度量执行计划中每个节点的运行时成本，当前的<command>EXPLAIN ANALYZE</command>的当前实现为查询执行增加了性能分析开销。
   这样，在一个查询上运行<command>EXPLAIN ANALYZE</command>有时候比正常执行该查询要慢很多。
   开销的量取决于该查询的性质，以及使用的平台。最坏的情况会发生在那些自身执行时间很短的结点上，以及在那些具有相对较慢的有关时间的操作系统调用的机器上。
  </para>
<!-- pgdoc-cn_end sig_en=102200edaeb2154f48fa49ca215d87b8 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>例子</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=7917c3054ef44caea67b491976129696 sig_cn_org=None source=14.1 
  <para>
   To show the plan for a simple query on a table with a single
   <type>integer</type> column and 10000 rows:

<programlisting>
EXPLAIN SELECT * FROM foo;

                       QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 Seq Scan on foo  (cost=0.00..155.00 rows=10000 width=4)
(1 row)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   有一个具有单个<type>integer</type>列和 10000 行的表，要显示在其上的一个简单查询的计划：

<programlisting>
EXPLAIN SELECT * FROM foo;

                       QUERY PLAN
---------------------------------------------------------
 Seq Scan on foo  (cost=0.00..155.00 rows=10000 width=4)
(1 row)
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=7917c3054ef44caea67b491976129696 -->

<!-- pgdoc-cn_start sig_en=dc4532b4c2154a47da4b990fef418ce7 sig_cn_org=None source=14.1 
  <para>
  Here is the same query, with JSON output formatting:
<programlisting>
EXPLAIN (FORMAT JSON) SELECT * FROM foo;
           QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 [                             +
   {                           +
     "Plan": {                 +
       "Node Type": "Seq Scan",+
       "Relation Name": "foo", +
       "Alias": "foo",         +
       "Startup Cost": 0.00,   +
       "Total Cost": 155.00,   +
       "Plan Rows": 10000,     +
       "Plan Width": 4         +
     }                         +
   }                           +
 ]
(1 row)
</programlisting>
  </para>
________________________________________________________-->
  <para>
  这里有同样一个查询的 JSON 输出格式：
<programlisting>
EXPLAIN (FORMAT JSON) SELECT * FROM foo;
           QUERY PLAN
--------------------------------
 [                             +
   {                           +
     "Plan": {                 +
       "Node Type": "Seq Scan",+
       "Relation Name": "foo", +
       "Alias": "foo",         +
       "Startup Cost": 0.00,   +
       "Total Cost": 155.00,   +
       "Plan Rows": 10000,     +
       "Plan Width": 4         +
     }                         +
   }                           +
 ]
(1 row)
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=dc4532b4c2154a47da4b990fef418ce7 -->

<!-- pgdoc-cn_start sig_en=9fa15b9a6f71993a9fe801f38d36e0b3 sig_cn_org=None source=14.1 
  <para>
   If there is an index and we use a query with an indexable
   <literal>WHERE</literal> condition, <command>EXPLAIN</command>
   might show a different plan:

<programlisting>
EXPLAIN SELECT * FROM foo WHERE i = 4;

                         QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 Index Scan using fi on foo  (cost=0.00..5.98 rows=1 width=4)
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   如果有一个索引，并且我们使用了一个带有可索引<literal>WHERE</literal>条件的查询，<command>EXPLAIN</command>可能会显示一个不同的计划：

<programlisting>
EXPLAIN SELECT * FROM foo WHERE i = 4;

                         QUERY PLAN
--------------------------------------------------------------
 Index Scan using fi on foo  (cost=0.00..5.98 rows=1 width=4)
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=9fa15b9a6f71993a9fe801f38d36e0b3 -->

<!-- pgdoc-cn_start sig_en=31b7c06b5ce5c0c2585a5694438b1b44 sig_cn_org=33129e59c32ab146d496d186c7f60ba7 source=15.7 
  <para>
  Here is the same query, but in YAML format:
<programlisting>
EXPLAIN (FORMAT YAML) SELECT * FROM foo WHERE i='4';
          QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 - Plan:                      +
     Node Type: "Index Scan"  +
     Scan Direction: "Forward"+
     Index Name: "fi"         +
     Relation Name: "foo"     +
     Alias: "foo"             +
     Startup Cost: 0.00       +
     Total Cost: 5.98         +
     Plan Rows: 1             +
     Plan Width: 4            +
     Index Cond: "(i = 4)"
(1 row)
</programlisting>

    XML format is left as an exercise for the reader.
  </para>
________________________________________________________-->
  <para>
  这里是相同的查询，但是以YAML格式呈现：
<programlisting>
EXPLAIN (FORMAT YAML) SELECT * FROM foo WHERE i='4';
          QUERY PLAN
-------------------------------
 - Plan:                      +
     Node Type: "Index Scan"  +
     Scan Direction: "Forward"+
     Index Name: "fi"         +
     Relation Name: "foo"     +
     Alias: "foo"             +
     Startup Cost: 0.00       +
     Total Cost: 5.98         +
     Plan Rows: 1             +
     Plan Width: 4            +
     Index Cond: "(i = 4)"
(1 row)
</programlisting>

    XML格式留给读者作为练习。
  </para>
<!-- pgdoc-cn_end sig_en=31b7c06b5ce5c0c2585a5694438b1b44 -->
<!-- pgdoc-cn_start sig_en=7140e4ff73d20f8f7168d88fe34aa1cb sig_cn_org=None source=14.1 
  <para>
   Here is the same plan with cost estimates suppressed:

<programlisting>
EXPLAIN (COSTS FALSE) SELECT * FROM foo WHERE i = 4;

        QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 Index Scan using fi on foo
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   这里是去掉了代价估计的同样一个计划：

<programlisting>
EXPLAIN (COSTS FALSE) SELECT * FROM foo WHERE i = 4;

        QUERY PLAN
----------------------------
 Index Scan using fi on foo
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=7140e4ff73d20f8f7168d88fe34aa1cb -->

<!-- pgdoc-cn_start sig_en=4293ea8ef71036bd0a75db8cc8cecdc8 sig_cn_org=None source=14.1 
  <para>
   Here is an example of a query plan for a query using an aggregate
   function:

<programlisting>
EXPLAIN SELECT sum(i) FROM foo WHERE i &lt; 10;

                             QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;
 Aggregate  (cost=23.93..23.93 rows=1 width=4)
   -&gt;  Index Scan using fi on foo  (cost=0.00..23.92 rows=6 width=4)
         Index Cond: (i &lt; 10)
(3 rows)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   这里是一个使用聚集函数的查询的查询计划例子：

<programlisting>
EXPLAIN SELECT sum(i) FROM foo WHERE i &lt; 10;

                             QUERY PLAN
-------------------------------------------------------------------&zwsp;--
 Aggregate  (cost=23.93..23.93 rows=1 width=4)
   -&gt;  Index Scan using fi on foo  (cost=0.00..23.92 rows=6 width=4)
         Index Cond: (i &lt; 10)
(3 rows)
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=4293ea8ef71036bd0a75db8cc8cecdc8 -->

<!-- pgdoc-cn_start sig_en=1e70a3fc02be828a6ab886027f984179 sig_cn_org=26c60daa7ee1839e3a92cd28e2c0f4ec source=15.7 
  <para>
   Here is an example of using <command>EXPLAIN EXECUTE</command> to
   display the execution plan for a prepared query:

<programlisting>
PREPARE query(int, int) AS SELECT sum(bar) FROM test
    WHERE id &gt; $1 AND id &lt; $2
    GROUP BY foo;

EXPLAIN ANALYZE EXECUTE query(100, 200);

                                                       QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 HashAggregate  (cost=9.54..9.54 rows=1 width=8) (actual time=0.156..0.161 rows=11 loops=1)
   Group Key: foo
   -&gt;  Index Scan using test_pkey on test  (cost=0.29..9.29 rows=50 width=8) (actual time=0.039..0.091 rows=99 loops=1)
         Index Cond: ((id &gt; $1) AND (id &lt; $2))
 Planning time: 0.197 ms
 Execution time: 0.225 ms
(6 rows)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   这是使用<command>EXPLAIN EXECUTE</command>显示准备查询的执行计划的示例：

<programlisting>
PREPARE query(int, int) AS SELECT sum(bar) FROM test
    WHERE id &gt; $1 AND id &lt; $2
    GROUP BY foo;

EXPLAIN ANALYZE EXECUTE query(100, 200);

                                                       QUERY PLAN
-------------------------------------------------------------------&zwsp;-----------------------------------------------------
 HashAggregate  (cost=9.54..9.54 rows=1 width=8) (actual time=0.156..0.161 rows=11 loops=1)
   Group Key: foo
   -&gt;  Index Scan using test_pkey on test  (cost=0.29..9.29 rows=50 width=8) (actual time=0.039..0.091 rows=99 loops=1)
         Index Cond: ((id &gt; $1) AND (id &lt; $2))
 Planning time: 0.197 ms
 Execution time: 0.225 ms
(6 rows)
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=1e70a3fc02be828a6ab886027f984179 -->

<!-- pgdoc-cn_start sig_en=8c5191238c7bedf24fb0ff5e0107b69a sig_cn_org=None source=14.1 
  <para>
   Of course, the specific numbers shown here depend on the actual
   contents of the tables involved.  Also note that the numbers, and
   even the selected query strategy, might vary between
   <productname>PostgreSQL</productname> releases due to planner
   improvements. In addition, the <command>ANALYZE</command> command
   uses random sampling to estimate data statistics; therefore, it is
   possible for cost estimates to change after a fresh run of
   <command>ANALYZE</command>, even if the actual distribution of data
   in the table has not changed.
  </para>
________________________________________________________-->
  <para>
   当然，这里显示的有关数字取决于表涉及到的实际内容。还要注意这些数字甚至选中的查询策略，可能在<productname>PostgreSQL</productname>的不同版本之间变化，因为计划器可能被改进。此外，<command>ANALYZE</command>命令使用随机采样来估计数据统计。因此，在一次新的<command>ANALYZE</command>运行之后，代价估计可能会改变，即便是表中数据的实际分布没有改变也是如此。
  </para>
<!-- pgdoc-cn_end sig_en=8c5191238c7bedf24fb0ff5e0107b69a -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=a6bd3b4cb9a1f36c0d844abd4bbb9403 sig_cn_org=None source=14.1 
  <para>
   There is no <command>EXPLAIN</command> statement defined in the SQL standard.
  </para>
________________________________________________________-->
  <para>
   在 SQL 标准中没有定义<command>EXPLAIN</command>语句。
  </para>
<!-- pgdoc-cn_end sig_en=a6bd3b4cb9a1f36c0d844abd4bbb9403 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>参见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-analyze"/></member>
  </simplelist>
 </refsect1>
</refentry>
