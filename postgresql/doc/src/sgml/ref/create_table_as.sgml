<!--
doc/src/sgml/ref/create_table_as.sgml
PostgreSQL documentation
-->

<refentry id="sql-createtableas">
<!-- pgdoc-cn_start sig_en=f093916bb3e12595e7a461f42ff69aeb sig_cn_org=None source=14.1 
 <indexterm zone="sql-createtableas">
  <primary>CREATE TABLE AS</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-createtableas">
  <primary>CREATE TABLE AS</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=f093916bb3e12595e7a461f42ff69aeb -->

 <refmeta>
  <refentrytitle>CREATE TABLE AS</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=7e56397eed8b10d9444c208f80e85e84 sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>CREATE TABLE AS</refname>
  <refpurpose>define a new table from the results of a query</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>CREATE TABLE AS</refname>
  <refpurpose>从一个查询的结果创建一个新表</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=7e56397eed8b10d9444c208f80e85e84 -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=5ee37d23256a47935689d023d6d1c50e sig_cn_org=None source=14.1 
<synopsis>
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] <replaceable>table_name</replaceable>
    [ (<replaceable>column_name</replaceable> [, ...] ) ]
    [ USING <replaceable class="parameter">method</replaceable> ]
    [ WITH ( <replaceable class="parameter">storage_parameter</replaceable> [= <replaceable class="parameter">value</replaceable>] [, ... ] ) | WITHOUT OIDS ]
    [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
    [ TABLESPACE <replaceable class="parameter">tablespace_name</replaceable> ]
    AS <replaceable>query</replaceable>
    [ WITH [ NO ] DATA ]
</synopsis>
________________________________________________________-->
<synopsis>
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] <replaceable>table_name</replaceable>
    [ (<replaceable>column_name</replaceable> [, ...] ) ]
    [ USING <replaceable class="parameter">method</replaceable> ]
    [ WITH ( <replaceable class="parameter">storage_parameter</replaceable> [= <replaceable class="parameter">value</replaceable>] [, ... ] ) | WITHOUT OIDS ]
    [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
    [ TABLESPACE <replaceable class="parameter">tablespace_name</replaceable> ]
    AS <replaceable>query</replaceable>
    [ WITH [ NO ] DATA ]
</synopsis>
<!-- pgdoc-cn_end sig_en=5ee37d23256a47935689d023d6d1c50e -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=8447e17f97d9489662f4139e5c51c01f sig_cn_org=None source=14.1 
  <para>
   <command>CREATE TABLE AS</command> creates a table and fills it
   with data computed by a <command>SELECT</command> command.
   The table columns have the
   names and data types associated with the output columns of the
   <command>SELECT</command> (except that you can override the column
   names by giving an explicit list of new column names).
  </para>
________________________________________________________-->
  <para>
   <command>CREATE TABLE AS</command>创建一个表，并且用
   由一个<command>SELECT</command>命令计算出来的数据填充
   该表。该表的列具有和<command>SELECT</command>的输出列
   相关的名称和数据类型（不过可以通过给出一个显式的新列名列表来覆
   盖这些列名）。
  </para>
<!-- pgdoc-cn_end sig_en=8447e17f97d9489662f4139e5c51c01f -->

<!-- pgdoc-cn_start sig_en=c5ee69de99c4e6aecc9bcce6963c09ef sig_cn_org=None source=14.1 
  <para>
   <command>CREATE TABLE AS</command> bears some resemblance to
   creating a view, but it is really quite different: it creates a new
   table and evaluates the query just once to fill the new table
   initially.  The new table will not track subsequent changes to the
   source tables of the query.  In contrast, a view re-evaluates its
   defining <command>SELECT</command> statement whenever it is
   queried.
  </para>
________________________________________________________-->
  <para>
   <command>CREATE TABLE AS</command>和创建一个视图有些
   相似，但是实际上非常不同：它会创建一个新表并且只计算该查询一次
   用来初始填充新表。这个新表将不会跟踪该查询源表的后续变化。相反，
   一个视图只要被查询，它的定义<command>SELECT</command>
   语句就会被重新计算。
  </para>
<!-- pgdoc-cn_end sig_en=c5ee69de99c4e6aecc9bcce6963c09ef -->

<!-- pgdoc-cn_start sig_en=72e7327951ea70693a7f9c2f83c9889c sig_cn_org=None source=14.1 
  <para>
   <command>CREATE TABLE AS</command> requires <literal>CREATE</literal>
   privilege on the schema used for the table.
  </para>
________________________________________________________-->
  <para>
   <command>CREATE TABLE AS</command> 需要用于表的模式上的<literal>CREATE</literal>权限。
   privilege on the schema used for the table.
  </para>
<!-- pgdoc-cn_end sig_en=72e7327951ea70693a7f9c2f83c9889c -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=82b3c8bdbe81cdc41b58a62c3300fd68 sig_cn_org=None source=14.1 
    <term><literal>GLOBAL</literal> or <literal>LOCAL</literal></term>
________________________________________________________-->
    <term><literal>GLOBAL</literal>或者<literal>LOCAL</literal></term>
<!-- pgdoc-cn_end sig_en=82b3c8bdbe81cdc41b58a62c3300fd68 -->
    <listitem>
<!-- pgdoc-cn_start sig_en=95c9d31bbbec545b0511f258272f209c sig_cn_org=None source=14.1 
     <para>
      Ignored for compatibility.  Use of these keywords is deprecated;
      refer to <xref linkend="sql-createtable"/> for details.
     </para>
________________________________________________________-->
     <para>
      为兼容性而忽略。不推荐使用这些关键词，详见
      <xref linkend="sql-createtable"/>。
     </para>
<!-- pgdoc-cn_end sig_en=95c9d31bbbec545b0511f258272f209c -->
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=38f5f15c2286c0019a288ab70bbfb93e sig_cn_org=None source=14.1 
    <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
________________________________________________________-->
    <term><literal>TEMPORARY</literal>或者<literal>TEMP</literal></term>
<!-- pgdoc-cn_end sig_en=38f5f15c2286c0019a288ab70bbfb93e -->
    <listitem>
<!-- pgdoc-cn_start sig_en=41283d543804044da4268f78c562410a sig_cn_org=None source=14.1 
     <para>
      If specified, the table is created as a temporary table.
      Refer to <xref linkend="sql-createtable"/> for details.
     </para>
________________________________________________________-->
     <para>
      如果被指定，该表会被创建为一个临时表。详见
      <xref linkend="sql-createtable"/>。
     </para>
<!-- pgdoc-cn_end sig_en=41283d543804044da4268f78c562410a -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>UNLOGGED</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=bff24e95055eb1176379bf0f2b043e87 sig_cn_org=None source=14.1 
     <para>
      If specified, the table is created as an unlogged table.
      Refer to <xref linkend="sql-createtable"/> for details.
     </para>
________________________________________________________-->
     <para>
      如果被指定，该表会被创建为一个不做日志的表。详见
      <xref linkend="sql-createtable"/>。
     </para>
<!-- pgdoc-cn_end sig_en=bff24e95055eb1176379bf0f2b043e87 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=7b8502acff367ced455d6c62f68b9da7 sig_cn_org=f4ba593ae08863bd0d74035e402a95a1 source=15.7 
     <para>
      Do not throw an error if a relation with the same name already
      exists; simply issue a notice and leave the table unmodified.
     </para>
________________________________________________________-->
     <para>
      如果已经存在同名关系，则不会抛出错误；只会发出通知并保持表格不变。
     </para>
<!-- pgdoc-cn_end sig_en=7b8502acff367ced455d6c62f68b9da7 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>table_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=53bb0823460e7bb61174fdc991c87c9a sig_cn_org=None source=14.1 
     <para>
      The name (optionally schema-qualified) of the table to be created.
     </para>
________________________________________________________-->
     <para>
      要创建的表的名称（可以被模式限定）。
     </para>
<!-- pgdoc-cn_end sig_en=53bb0823460e7bb61174fdc991c87c9a -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>column_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=fc92bcb77ff1c2b5cd61faea5b788ef8 sig_cn_org=None source=14.1 
     <para>
      The name of a column in the new table.  If column names are not
      provided, they are taken from the output column names of the query.
     </para>
________________________________________________________-->
     <para>
      新表中一列的名称。如果没有提供列名，会从查询的输出列名中得到。
     </para>
<!-- pgdoc-cn_end sig_en=fc92bcb77ff1c2b5cd61faea5b788ef8 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>USING <replaceable class="parameter">method</replaceable></literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=36b376f827f70f9767acccb66dbd91c5 sig_cn_org=None source=14.1 
     <para>
      This optional clause specifies the table access method to use to store
      the contents for the new table; the method needs be an access method of
      type <literal>TABLE</literal>. See <xref linkend="tableam"/> for more
      information.  If this option is not specified, the default table access
      method is chosen for the new table. See <xref
      linkend="guc-default-table-access-method"/> for more information.
     </para>
________________________________________________________-->
     <para>
      这个可选的子句指定了用于存储新表内容的表访问方法；该方法需要是一个类型 <literal>TABLE</literal>的访问方法。详见<xref linkend="tableam"/>。
      如果没有指定这个选项，则选择新表的默认表访问方法。详见<xref linkend="guc-default-table-access-method"/>。
     </para>
<!-- pgdoc-cn_end sig_en=36b376f827f70f9767acccb66dbd91c5 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="parameter">storage_parameter</replaceable> [= <replaceable class="parameter">value</replaceable>] [, ... ] )</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=81ac2ec51ca1159fa0a3e4d78b81a44a sig_cn_org=None source=14.1 
     <para>
      This clause specifies optional storage parameters for the new table;
      see <xref linkend="sql-createtable-storage-parameters"/> in the
      <xref linkend="sql-createtable"/> documentation for more
      information.   For backward-compatibility the <literal>WITH</literal>
      clause for a table can also include <literal>OIDS=FALSE</literal> to
      specify that rows of the new table should contain no OIDs (object
      identifiers), <literal>OIDS=TRUE</literal> is not supported anymore.
     </para>
________________________________________________________-->
     <para>
      这个子句为新表指定可选的存储参数，详见<xref linkend="sql-createtable"/>中的
      <xref linkend="sql-createtable-storage-parameters"/>。
      为了向后兼容，表的<literal>WITH</literal>子句也能包含<literal>OIDS=FALSE</literal>来指定新表的行将不包含OID（对象标识符）。<literal>OIDS=TRUE</literal>不再支持。
     </para>
<!-- pgdoc-cn_end sig_en=81ac2ec51ca1159fa0a3e4d78b81a44a -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITHOUT OIDS</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=7f550091d903456b178cf5db7f65ebda sig_cn_org=None source=14.1 
     <para>
      This is backward-compatible syntax for declaring a table
      <literal>WITHOUT OIDS</literal>, creating a table <literal>WITH
      OIDS</literal> is not supported anymore.
     </para>
________________________________________________________-->
     <para>
      这是向后兼容的语法，用于声明表<literal>WITHOUT OIDS</literal>，创建表<literal>WITH OIDS</literal>不再被支持。
     </para>
<!-- pgdoc-cn_end sig_en=7f550091d903456b178cf5db7f65ebda -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ON COMMIT</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=356077262450a01337895e94a343eaaa sig_cn_org=None source=14.1 
     <para>
      The behavior of temporary tables at the end of a transaction
      block can be controlled using <literal>ON COMMIT</literal>.
      The three options are:

      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
         <para>
          No special action is taken at the ends of transactions.
          This is the default behavior.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <para>
          All rows in the temporary table will be deleted at the end
          of each transaction block.  Essentially, an automatic <link
          linkend="sql-truncate"><command>TRUNCATE</command></link> is done
          at each commit.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <para>
          The temporary table will be dropped at the end of the current
          transaction block.
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
________________________________________________________-->
     <para>
      临时表在事务块结束时的行为可以用<literal>ON COMMIT</literal>
      控制。三个选项是：

      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
         <para>
          在事务结束时不采取特殊的动作。这是默认行为。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <para>
          在每一个事务块结束时临时表中的所有行都将被删除。本质上，
          在每次提交时会完成一次自动的<link linkend="sql-truncate"><command>TRUNCATE</command></link>。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <para>
          在当前事务块结束时将删掉临时表。
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
<!-- pgdoc-cn_end sig_en=356077262450a01337895e94a343eaaa -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLESPACE <replaceable class="parameter">tablespace_name</replaceable></literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=8490d21db14ef6f2ff49350a64384a32 sig_cn_org=None source=14.1 
     <para>
      The <replaceable class="parameter">tablespace_name</replaceable> is the name
      of the tablespace in which the new table is to be created.
      If not specified,
      <xref linkend="guc-default-tablespace"/> is consulted, or
      <xref linkend="guc-temp-tablespaces"/> if the table is temporary.
     </para>
________________________________________________________-->
     <para>
      <replaceable class="parameter">tablespace_name</replaceable>
      是要在其中创建新表的表空间名称。如果没有指定，将会查询
      <xref linkend="guc-default-tablespace"/>，临时表会查询
      <xref linkend="guc-temp-tablespaces"/>。
     </para>
<!-- pgdoc-cn_end sig_en=8490d21db14ef6f2ff49350a64384a32 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>query</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=01811c957e74bf470f39d845ae2736f9 sig_cn_org=None source=14.1 
     <para>
      A <link linkend="sql-select"><command>SELECT</command></link>, <link
      linkend="sql-table"><command>TABLE</command></link>, or <link linkend="sql-values"><command>VALUES</command></link>
      command, or an <link linkend="sql-execute"><command>EXECUTE</command></link> command that runs a
      prepared <command>SELECT</command>, <command>TABLE</command>, or
      <command>VALUES</command> query.
     </para>
________________________________________________________-->
     <para>
      一个<link linkend="sql-select"><command>SELECT</command></link>、<link linkend="sql-table"><command>TABLE</command></link>,或 <link linkend="sql-values"><command>VALUES</command></link>命令，
      或者是一个运行准备好的<command>SELECT</command>, <command>TABLE</command>, 或者<command>VALUES</command>查询的<link linkend="sql-execute"><command>EXECUTE</command></link>命令。
     </para>
<!-- pgdoc-cn_end sig_en=01811c957e74bf470f39d845ae2736f9 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH [ NO ] DATA</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=d984c5115b6b1880212b0def7cf30b42 sig_cn_org=None source=14.1 
     <para>
      This clause specifies whether or not the data produced by the query
      should be copied into the new table.  If not, only the table structure
      is copied.  The default is to copy the data.
     </para>
________________________________________________________-->
     <para>
      这个子句指定查询产生的数据是否应该被复制到新表中。如果不是，只有
      表结构会被复制。默认是复制数据。
     </para>
<!-- pgdoc-cn_end sig_en=d984c5115b6b1880212b0def7cf30b42 -->
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=e0c9c13c469e0441b2400095a7992807 sig_cn_org=None source=14.1 
  <para>
   This command is functionally similar to <xref
   linkend="sql-selectinto"/>, but it is
   preferred since it is less likely to be confused with other uses of
   the <command>SELECT INTO</command> syntax. Furthermore, <command>CREATE
   TABLE AS</command> offers a superset of the functionality offered
   by <command>SELECT INTO</command>.
  </para>
________________________________________________________-->
  <para>
   这个命令在功能上类似于<xref linkend="sql-selectinto"/>，但是它更好，
   因为不太可能被<command>SELECT INTO</command>语法的其他使用混淆。更
   进一步，<command>CREATE TABLE AS</command>提供了
   <command>SELECT INTO</command>的功能的一个超集。
  </para>
<!-- pgdoc-cn_end sig_en=e0c9c13c469e0441b2400095a7992807 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=2d40c9c623ecfb25d557b92d4b095ca6 sig_cn_org=None source=14.1 
  <para>
   Create a new table <literal>films_recent</literal> consisting of only
   recent entries from the table <literal>films</literal>:

<programlisting>
CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting>
  </para>
________________________________________________________-->
  <para>
   创建一个新表<literal>films_recent</literal>，它只由表
   <literal>films</literal>中最近的项组成：

<programlisting>
CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=2d40c9c623ecfb25d557b92d4b095ca6 -->

<!-- pgdoc-cn_start sig_en=940e541f3e2258c71a1378ab87af67f9 sig_cn_org=None source=14.1 
  <para>
   To copy a table completely, the short form using
   the <literal>TABLE</literal> command can also be used:

<programlisting>
CREATE TABLE films2 AS
  TABLE films;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   要完全地复制一个表，也可以使用<literal>TABLE</literal>命令的
   简短形式：

<programlisting>
CREATE TABLE films2 AS
  TABLE films;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=940e541f3e2258c71a1378ab87af67f9 -->

<!-- pgdoc-cn_start sig_en=955b7d8f14f8c264e17b2fa2f8973242 sig_cn_org=None source=14.1 
  <para>
   Create a new temporary table <literal>films_recent</literal>, consisting of
   only recent entries from the table <literal>films</literal>, using a
   prepared statement.  The new table will be dropped at commit:

<programlisting>
PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod &gt; $1;
CREATE TEMP TABLE films_recent ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
</programlisting></para>
________________________________________________________-->
  <para>
   用一个预备语句创建一个新的临时表<literal>films_recent</literal>，
   它仅由表<literal>films</literal>中最近的项组成，使用准备好的声明。新表将在提交时被丢弃：

<programlisting>
PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod &gt; $1;
CREATE TEMP TABLE films_recent ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
</programlisting></para>
<!-- pgdoc-cn_end sig_en=955b7d8f14f8c264e17b2fa2f8973242 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=6f1b279fc384184620c26425a7cfa882 sig_cn_org=None source=14.1 
  <para>
   <command>CREATE TABLE AS</command> conforms to the <acronym>SQL</acronym>
   standard.  The following are nonstandard extensions:

   <itemizedlist spacing="compact">
    <listitem>
     <para>
      The standard requires parentheses around the subquery clause; in
      <productname>PostgreSQL</productname>, these parentheses are
      optional.
     </para>
    </listitem>

    <listitem>
     <para>
      In the standard, the <literal>WITH [ NO ] DATA</literal> clause
      is required; in PostgreSQL it is optional.
     </para>
    </listitem>

    <listitem>
     <para><productname>PostgreSQL</productname> handles temporary tables in a way
      rather different from the standard; see
      <xref linkend="sql-createtable"/>
      for details.
     </para>
    </listitem>

    <listitem>
     <para>
      The <literal>WITH</literal> clause is a <productname>PostgreSQL</productname>
      extension; storage parameters are not in the standard.
     </para>
    </listitem>

    <listitem>
     <para>
      The <productname>PostgreSQL</productname> concept of tablespaces is not
      part of the standard.  Hence, the clause <literal>TABLESPACE</literal>
      is an extension.
     </para>
    </listitem>
   </itemizedlist></para>
________________________________________________________-->
  <para>
   <command>CREATE TABLE AS</command>符合
   <acronym>SQL</acronym>标准。下面的是非标准扩展：

   <itemizedlist spacing="compact">
    <listitem>
     <para>
      标准要求在子查询子句周围有圆括号，在
      <productname>PostgreSQL</productname>中这些圆括号是可选的。
     </para>
    </listitem>

    <listitem>
     <para>
      在标准中，<literal>WITH [ NO ] DATA</literal>子句是必要的，而
      PostgreSQL 中是可选的。
     </para>
    </listitem>

    <listitem>
     <para><productname>PostgreSQL</productname>处理临时表的方式和标准不同。
     详见<xref linkend="sql-createtable"/>。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>WITH</literal>子句是一种
      <productname>PostgreSQL</productname>扩展，
      标准中没有存储参数。
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname>的表空间概念是标准的
      一部分。因此，子句<literal>TABLESPACE</literal>是一种扩展。
     </para>
    </listitem>
   </itemizedlist></para>
<!-- pgdoc-cn_end sig_en=6f1b279fc384184620c26425a7cfa882 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>另见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-creatematerializedview"/></member>
   <member><xref linkend="sql-createtable"/></member>
   <member><xref linkend="sql-execute"/></member>
   <member><xref linkend="sql-select"/></member>
   <member><xref linkend="sql-selectinto"/></member>
   <member><xref linkend="sql-values"/></member>
  </simplelist>
 </refsect1>

</refentry>
