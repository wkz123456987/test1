<!--
doc/src/sgml/ref/update.sgml
PostgreSQL documentation
-->

<refentry id="sql-update">
<!-- pgdoc-cn_start sig_en=1af1640741139ff9fec5c970ba97e434 sig_cn_org=None source=14.1 
 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=1af1640741139ff9fec5c970ba97e434 -->

 <refmeta>
  <refentrytitle>UPDATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=14763c4e4ffef12bf8562dd30f325ade sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>UPDATE</refname>
  <refpurpose>update rows of a table</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>UPDATE</refname>
  <refpurpose>更新一个表的行</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=14763c4e4ffef12bf8562dd30f325ade -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=6ac1fbb8fdce3cf5a510e4228f8ba5d3 sig_cn_org=None source=14.1 
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="parameter">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="parameter">column_name</replaceable> = { <replaceable class="parameter">expression</replaceable> | DEFAULT } |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = [ ROW ] ( { <replaceable class="parameter">expression</replaceable> | DEFAULT } [, ...] ) |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = ( <replaceable class="parameter">sub-SELECT</replaceable> )
        } [, ...]
    [ FROM <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
________________________________________________________-->
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="parameter">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="parameter">column_name</replaceable> = { <replaceable class="parameter">expression</replaceable> | DEFAULT } |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = [ ROW ] ( { <replaceable class="parameter">expression</replaceable> | DEFAULT } [, ...] ) |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = ( <replaceable class="parameter">sub-SELECT</replaceable> )
        } [, ...]
    [ FROM <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
<!-- pgdoc-cn_end sig_en=6ac1fbb8fdce3cf5a510e4228f8ba5d3 -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=e16c31d581010c5c895a74ad3a1f6b7d sig_cn_org=None source=14.1 
  <para>
   <command>UPDATE</command> changes the values of the specified
   columns in all rows that satisfy the condition. Only the columns to
   be modified need be mentioned in the <literal>SET</literal> clause;
   columns not explicitly modified retain their previous values.
  </para>
________________________________________________________-->
  <para>
   <command>UPDATE</command>更改满足条件的所有行中指定列
   的值。只有要被修改的列需要在<literal>SET</literal>子句中提及，
   没有被显式修改的列保持它们之前的值。
  </para>
<!-- pgdoc-cn_end sig_en=e16c31d581010c5c895a74ad3a1f6b7d -->

<!-- pgdoc-cn_start sig_en=68d421d89bb299dd4151466749f18c54 sig_cn_org=None source=14.1 
  <para>
   There are two ways to modify a table using information contained in
   other tables in the database: using sub-selects, or specifying
   additional tables in the <literal>FROM</literal> clause. Which
   technique is more appropriate depends on the specific
   circumstances.
  </para>
________________________________________________________-->
  <para>
   有两种方法使用包含在数据库其他表中的信息来修改一个表：使用子选择
   或者在<literal>FROM</literal>子句中指定额外的表。这种技术只适合
   特定的环境。
  </para>
<!-- pgdoc-cn_end sig_en=68d421d89bb299dd4151466749f18c54 -->

<!-- pgdoc-cn_start sig_en=35be72e594d95ec3c81bb644cacef503 sig_cn_org=None source=14.1 
  <para>
   The optional <literal>RETURNING</literal> clause causes <command>UPDATE</command>
   to compute and return value(s) based on each row actually updated.
   Any expression using the table's columns, and/or columns of other
   tables mentioned in <literal>FROM</literal>, can be computed.
   The new (post-update) values of the table's columns are used.
   The syntax of the <literal>RETURNING</literal> list is identical to that of the
   output list of <command>SELECT</command>.
  </para>
________________________________________________________-->
  <para>
   可选的<literal>RETURNING</literal>子句导致<command>UPDATE</command>
   基于实际被更新的每一行计算并且返回值。任何使用该表的列以及
   <literal>FROM</literal>中提到的其他表的列的表达式都能被计算。
   计算时会使用该表的列的新（更新后）值。<literal>RETURNING</literal>
   列表的语法和<command>SELECT</command>的输出列表相同。
  </para>
<!-- pgdoc-cn_end sig_en=35be72e594d95ec3c81bb644cacef503 -->

<!-- pgdoc-cn_start sig_en=ec71a3385c7e3b88bbb864817de0f122 sig_cn_org=None source=14.1 
  <para>
   You must have the <literal>UPDATE</literal> privilege on the table,
   or at least on the column(s) that are listed to be updated.
   You must also have the <literal>SELECT</literal>
   privilege on any column whose values are read in the
   <replaceable class="parameter">expressions</replaceable> or
   <replaceable class="parameter">condition</replaceable>.
  </para>
________________________________________________________-->
  <para>
   你必须拥有该表上的<literal>UPDATE</literal>特权，或者至少拥有
   要被更新的列上的该特权。如果任何一列的值需要被
   <replaceable class="parameter">expressions</replaceable>或者
   <replaceable class="parameter">condition</replaceable>读取，
   你还必须拥有该列上的<literal>SELECT</literal>特权。
  </para>
<!-- pgdoc-cn_end sig_en=ec71a3385c7e3b88bbb864817de0f122 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=78380147b172fdd43065a6ef7f222874 sig_cn_org=None source=14.1 
     <para>
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>UPDATE</command>
      query. See <xref linkend="queries-with"/> and <xref linkend="sql-select"/>
      for details.
     </para>
________________________________________________________-->
     <para>
      <literal>WITH</literal>子句允许你指定一个或者更多个在
      <command>UPDATE</command>中可用其名称引用的子查询。详见
      <xref linkend="queries-with"/>和<xref linkend="sql-select"/>。
     </para>
<!-- pgdoc-cn_end sig_en=78380147b172fdd43065a6ef7f222874 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=887a1cae800b62d78b203459cb5bec97 sig_cn_org=None source=14.1 
     <para>
      The name (optionally schema-qualified) of the table to update.
      If <literal>ONLY</literal> is specified before the table name, matching rows
      are updated in the named table only.  If <literal>ONLY</literal> is not
      specified, matching rows are also updated in any tables inheriting from
      the named table.  Optionally, <literal>*</literal> can be specified after the
      table name to explicitly indicate that descendant tables are included.
     </para>
________________________________________________________-->
     <para>
      要更新的表的名称（可以是模式限定的）。如果在表名前指定了
      <literal>ONLY</literal>，只会更新所提及表中的匹配行。如果没有指定
      <literal>ONLY</literal>，任何从所提及表继承得到的表中的匹配行也会
      被更新。可选地，在表名之后指定<literal>*</literal>可以显式地指示要
      把后代表也包括在内。
     </para>
<!-- pgdoc-cn_end sig_en=887a1cae800b62d78b203459cb5bec97 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=a9b96ba6d0c75b8f99a1c5f6c0ac9c6e sig_cn_org=None source=14.1 
     <para>
      A substitute name for the target table. When an alias is
      provided, it completely hides the actual name of the table.  For
      example, given <literal>UPDATE foo AS f</literal>, the remainder of the
      <command>UPDATE</command> statement must refer to this table as
      <literal>f</literal> not <literal>foo</literal>.
     </para>
________________________________________________________-->
     <para>
      目标表的一个替代名称。在提供了一个别名时，它会完全隐藏表的真实
      名称。例如，给定<literal>UPDATE foo AS f</literal>，
      <command>UPDATE</command>语句的剩余部分必须用
      <literal>f</literal>而不是<literal>foo</literal>来引用该表。
     </para>
<!-- pgdoc-cn_end sig_en=a9b96ba6d0c75b8f99a1c5f6c0ac9c6e -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">column_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=fe45b4043075144f2b54c9681cbcfef3 sig_cn_org=None source=14.1 
     <para>
      The name of a column in the table named by <replaceable
      class="parameter">table_name</replaceable>.
      The column name can be qualified with a subfield name or array
      subscript, if needed.  Do not include the table's name in the
      specification of a target column &mdash; for example,
      <literal>UPDATE table_name SET table_name.col = 1</literal> is invalid.
     </para>
________________________________________________________-->
     <para>
      <replaceable class="parameter">table_name</replaceable>
      所指定的表的一列的名称。如果需要，该列名可以用一个子域名称或者
      数组下标限定。不要在目标列的说明中包括表的名称 &mdash; 例如
      <literal>UPDATE table_name SET table_name.col = 1</literal>是非法的。
     </para>
<!-- pgdoc-cn_end sig_en=fe45b4043075144f2b54c9681cbcfef3 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=a8cce57290756a7c140775625db19042 sig_cn_org=None source=14.1 
     <para>
      An expression to assign to the column.  The expression can use the
      old values of this and other columns in the table.
     </para>
________________________________________________________-->
     <para>
      要被赋值给该列的一个表达式。该表达式可以使用该表中这一列或者
      其他列的旧值。
     </para>
<!-- pgdoc-cn_end sig_en=a8cce57290756a7c140775625db19042 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=fc3cfecbf7ca0bd9d49d2d05dfb6ea37 sig_cn_org=None source=14.1 
     <para>
      Set the column to its default value (which will be NULL if no specific
      default expression has been assigned to it).  An identity column will be
      set to a new value generated by the associated sequence.  For a
      generated column, specifying this is permitted but merely specifies the
      normal behavior of computing the column from its generation expression.
     </para>
________________________________________________________-->
     <para>
      将该列设置为它的默认值（如果没有为它指定默认值表达式，默认值
      将会为 NULL）。标识列将设置为关联序列生成的新值。
      对于生成的列，允许指定此项，但仅指定从其生成表达式计算列的正常行为。
     </para>
<!-- pgdoc-cn_end sig_en=fc3cfecbf7ca0bd9d49d2d05dfb6ea37 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sub-SELECT</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=f0dea4cc81a27dc30d0cf238a1bfb890 sig_cn_org=None source=14.1 
     <para>
      A <literal>SELECT</literal> sub-query that produces as many output columns
      as are listed in the parenthesized column list preceding it.  The
      sub-query must yield no more than one row when executed.  If it
      yields one row, its column values are assigned to the target columns;
      if it yields no rows, NULL values are assigned to the target columns.
      The sub-query can refer to old values of the current row of the table
      being updated.
     </para>
________________________________________________________-->
     <para>
      一个<literal>SELECT</literal>子查询，它产生和在它之前的圆括号中列列表中
      一样多的输出列。被执行时，该子查询必须得到不超过一行。如果它得到
      一行，其列值会被赋予给目标列。如果它得不到行，NULL 值将被赋予给
      目标列。该子查询可以引用被更新表中当前行的旧值。
     </para>
<!-- pgdoc-cn_end sig_en=f0dea4cc81a27dc30d0cf238a1bfb890 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">from_item</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=48f034350eba9812a8dfa0b840a0fa1f sig_cn_org=None source=14.1 
     <para>
      A table expression allowing columns from other tables to appear in
      the <literal>WHERE</literal> condition and update expressions. This
      uses the same syntax as the <link
      linkend="sql-from"><literal>FROM</literal></link> clause of
      a <command>SELECT</command> statement;
      for example, an alias for the table name can be specified.  Do not
      repeat the target table as a <replaceable>from_item</replaceable>
      unless you intend a self-join (in which case it must appear with
      an alias in the <replaceable>from_item</replaceable>).
     </para>
________________________________________________________-->
     <para>
      表表达式允许来自其他表的列出现在<literal>WHERE</literal>条件和更新表达式中。这使用与
      <command>SELECT</command>语句的<link linkend="sql-from"><literal>FROM</literal></link>
      子句相同的语法；例如，可以指定表名的别名。不要将目标表作为<replaceable>from_list</replaceable>
      重复，除非你想做自连接（这种情况下它必须以别名出现在<replaceable>from_list</replaceable>中）。
     </para>
<!-- pgdoc-cn_end sig_en=48f034350eba9812a8dfa0b840a0fa1f -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=9ef06bc14064756161c99df7f86a2556 sig_cn_org=None source=14.1 
     <para>
      An expression that returns a value of type <type>boolean</type>.
      Only rows for which this expression returns <literal>true</literal>
      will be updated.
     </para>
________________________________________________________-->
     <para>
      一个返回<type>boolean</type>类型值的表达式。让这个
      表达式返回<literal>true</literal>的行将会被更新。
     </para>
<!-- pgdoc-cn_end sig_en=9ef06bc14064756161c99df7f86a2556 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">cursor_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=a6a6e086b636e9edeb0e8e8ff300bcd0 sig_cn_org=None source=14.1 
     <para>
      The name of the cursor to use in a <literal>WHERE CURRENT OF</literal>
      condition.  The row to be updated is the one most recently fetched
      from this cursor.  The cursor must be a non-grouping
      query on the <command>UPDATE</command>'s target table.
      Note that <literal>WHERE CURRENT OF</literal> cannot be
      specified together with a Boolean condition.  See
      <xref linkend="sql-declare"/>
      for more information about using cursors with
      <literal>WHERE CURRENT OF</literal>.
     </para>
________________________________________________________-->
     <para>
      要在<literal>WHERE CURRENT OF</literal>条件中使用的游标名。
      要被更新的是从这个游标中最近取出的行。该游标必须是一个
      在<command>UPDATE</command>目标表上的非分组查询。注意
      <literal>WHERE CURRENT OF</literal>不能和一个布尔条件一起
      指定。有关对游标使用<literal>WHERE CURRENT OF</literal>的
      更多信息请见<xref linkend="sql-declare"/>。
     </para>
<!-- pgdoc-cn_end sig_en=a6a6e086b636e9edeb0e8e8ff300bcd0 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">output_expression</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=3dea1f5662496cd7dc9942a41feca63d sig_cn_org=None source=14.1 
     <para>
      An expression to be computed and returned by the <command>UPDATE</command>
      command after each row is updated.  The expression can use any
      column names of the table named by <replaceable class="parameter">table_name</replaceable>
      or table(s) listed in <literal>FROM</literal>.
      Write <literal>*</literal> to return all columns.
     </para>
________________________________________________________-->
     <para>
      在每一行被更新后，要被<command>UPDATE</command>命令计算并且返回
      的表达式。该表达式可以使用
      <replaceable class="parameter">table_name</replaceable>指定
      的表或者<literal>FROM</literal>列出的表中的任何列名。写<literal>*</literal>
      可以返回所有列。
     </para>
<!-- pgdoc-cn_end sig_en=3dea1f5662496cd7dc9942a41feca63d -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">output_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=f1adeec3c28e7d2aeef6a003c567e5b3 sig_cn_org=None source=14.1 
     <para>
      A name to use for a returned column.
     </para>
________________________________________________________-->
     <para>
      用于一个被返回列的名称。
     </para>
<!-- pgdoc-cn_end sig_en=f1adeec3c28e7d2aeef6a003c567e5b3 -->
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=83a929047ae9374bbfd2aa827d90c66a sig_cn_org=None source=14.1 
  <title>Outputs</title>
________________________________________________________-->
  <title>输出</title>
<!-- pgdoc-cn_end sig_en=83a929047ae9374bbfd2aa827d90c66a -->

<!-- pgdoc-cn_start sig_en=38bab394ba22868118dede61c1da2d3c sig_cn_org=None source=14.1 
  <para>
   On successful completion, an <command>UPDATE</command> command returns a command
   tag of the form
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
   The <replaceable class="parameter">count</replaceable> is the number
   of rows updated, including matched rows whose values did not change.
   Note that the number may be less than the number of rows that matched
   the <replaceable class="parameter">condition</replaceable> when
   updates were suppressed by a <literal>BEFORE UPDATE</literal> trigger.  If
   <replaceable class="parameter">count</replaceable> is 0, no rows were
   updated by the query (this is not considered an error).
  </para>
________________________________________________________-->
  <para>
   成功完成时，一个<command>UPDATE</command>命令返回形如
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
   的命令标签。
   <replaceable class="parameter">count</replaceable>是被更新的行数，
   包括值没有更改的匹配行。注意，当更新被一个<literal>BEFORE UPDATE</literal>
   触发器抑制时，这个数量可能比匹配
   <replaceable class="parameter">condition</replaceable>的行数少。如果
   <replaceable class="parameter">count</replaceable>为零，没有行被该查
   询更新（这不是一个错误）。
  </para>
<!-- pgdoc-cn_end sig_en=38bab394ba22868118dede61c1da2d3c -->

<!-- pgdoc-cn_start sig_en=991c09c51b27dbca19fbf56c68f59f1c sig_cn_org=None source=14.1 
  <para>
   If the <command>UPDATE</command> command contains a <literal>RETURNING</literal>
   clause, the result will be similar to that of a <command>SELECT</command>
   statement containing the columns and values defined in the
   <literal>RETURNING</literal> list, computed over the row(s) updated by the
   command.
  </para>
________________________________________________________-->
  <para>
   如果<command>UPDATE</command>命令包含一个<literal>RETURNING</literal>
   子句，其结果将类似于一个包含<literal>RETURNING</literal>列表中定义的
   列和值的<command>SELECT</command>语句（在被该命令更新的行上计算）
   的结果。
  </para>
<!-- pgdoc-cn_end sig_en=991c09c51b27dbca19fbf56c68f59f1c -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=c96d3b7c04ae5e61ce0f1988ace4fe8a sig_cn_org=None source=14.1 
  <para>
   When a <literal>FROM</literal> clause is present, what essentially happens
   is that the target table is joined to the tables mentioned in the
   <replaceable>from_item</replaceable> list, and each output row of the join
   represents an update operation for the target table.  When using
   <literal>FROM</literal> you should ensure that the join
   produces at most one output row for each row to be modified.  In
   other words, a target row shouldn't join to more than one row from
   the other table(s).  If it does, then only one of the join rows
   will be used to update the target row, but which one will be used
   is not readily predictable.
  </para>
________________________________________________________-->
  <para>
   当存在<literal>FROM</literal>子句时，实际发生的是：目标表被连接到
   <replaceable>from_item</replaceable>列表中的表，并且该连接的每一
   个输出行表示对目标表的一个更新操作。在使用<literal>FROM</literal>
   时，你应该确保该连接对每一个要修改的行产生至多一个输出行。换
   句话说，一个目标行不应该连接到来自其他表的多于一行上。如果发
   生这种情况，则只有一个连接行将被用于更新目标行，但是将使用哪
   一行是很难预测的。
  </para>
<!-- pgdoc-cn_end sig_en=c96d3b7c04ae5e61ce0f1988ace4fe8a -->

<!-- pgdoc-cn_start sig_en=180e742f5eb50d07e8f04b34332aa796 sig_cn_org=None source=14.1 
  <para>
   Because of this indeterminacy, referencing other tables only within
   sub-selects is safer, though often harder to read and slower than
   using a join.
  </para>
________________________________________________________-->
  <para>
   由于这种不确定性，只在一个子选择中引用其他表更安全，不过这种
   语句通常很难写并且也比使用连接慢。
  </para>
<!-- pgdoc-cn_end sig_en=180e742f5eb50d07e8f04b34332aa796 -->

<!-- pgdoc-cn_start sig_en=49a55faac75f06aa3dc884b16500a03e sig_cn_org=None source=14.1 
  <para>
   In the case of a partitioned table, updating a row might cause it to no
   longer satisfy the partition constraint of the containing partition. In that
   case, if there is some other partition in the partition tree for which this
   row satisfies its partition constraint, then the row is moved to that
   partition. If there is no such partition, an error will occur.  Behind the
   scenes, the row movement is actually a <command>DELETE</command> and
   <command>INSERT</command> operation.
  </para>
________________________________________________________-->
  <para>
   在分区表的情况下，更新一行有可能导致它不再满足其所在分区的分区约束。此时，如果这个行满足分区树中某个其他分区的分区约束，那么这个行会被移动到那个分区。
   如果没有这样的分区，则会发生错误。在后台，行的移动实际上是一次<command>DELETE</command>操作和一次<command>INSERT</command>操作。
  </para>
<!-- pgdoc-cn_end sig_en=49a55faac75f06aa3dc884b16500a03e -->

<!-- pgdoc-cn_start sig_en=78e0d041348c09bd4e158f650a0d8b9f sig_cn_org=None source=14.1 
  <para>
   There is a possibility that a concurrent <command>UPDATE</command> or
   <command>DELETE</command> on the row being moved will get a serialization
   failure error.  Suppose session 1 is performing an <command>UPDATE</command>
   on a partition key, and meanwhile a concurrent session 2 for which this
   row is visible performs an <command>UPDATE</command> or
   <command>DELETE</command> operation on this row.  In such case,
   session 2's <command>UPDATE</command> or <command>DELETE</command> will
   detect the row movement and raise a serialization failure error (which
   always returns with an SQLSTATE code '40001').  Applications may wish to
   retry the transaction if this occurs.  In the usual case where the table
   is not partitioned, or where there is no row movement, session 2 would
   have identified the newly updated row and carried out the
   <command>UPDATE</command>/<command>DELETE</command> on this new row
    version.
  </para>
________________________________________________________-->
  <para>
   在移动的行上的并发<command>UPDATE</command>或<command>DELETE</command>可能会收到序列化失败错误。
   假设会话 1 正在分区键上执行<command>UPDATE</command>，同时，对可访问该行的并发会话 2 在此行上执行<command>UPDATE</command>或<command>DELETE</command>操作。
   在这种情况下，会话 2 的<command>UPDATE</command> 或 <command>DELETE</command>将检测行移动并引发序列化失败错误（该错误始终返回 SQLSTATE 代码"40001"）。
   如果发生这种情况，应用程序可能希望重试事务。
   在通常情况下，表没有分区或没有行移动，会话 2 将标识新更新的行，并执行<command>UPDATE</command>/<command>DELETE</command>在此新行版本中。
  </para>
<!-- pgdoc-cn_end sig_en=78e0d041348c09bd4e158f650a0d8b9f -->

<!-- pgdoc-cn_start sig_en=b3aed91dd78858b2a732c1896439b5fb sig_cn_org=None source=14.1 
  <para>
   Note that while rows can be moved from local partitions to a foreign-table
   partition (provided the foreign data wrapper supports tuple routing), they
   cannot be moved from a foreign-table partition to another partition.
  </para>
________________________________________________________-->
  <para>
   请注意，虽然行可以从本地分区移动到外表分区（如果外数据包装器支持元组路由），但它们不能从外表分区移动到另一个分区。
  </para>
<!-- pgdoc-cn_end sig_en=b3aed91dd78858b2a732c1896439b5fb -->

<!-- pgdoc-cn_start sig_en=fe214e0bd8676f06707971953fdff59e sig_cn_org=f1dc3b368af5ec4eb4f51cceee5fe18a source=15.7 
  <para>
   An attempt of moving a row from one partition to another will fail if a
   foreign key is found to directly reference an ancestor of the source
   partition that is not the same as the ancestor that's mentioned in the
   <command>UPDATE</command> query.
  </para>
________________________________________________________-->
  <para>
   如果在尝试将一行从一个分区移动到另一个分区时，发现直接引用源分区祖先的外键与在<command>UPDATE</command>查询中提到的祖先不同，则操作将失败。
  </para>
<!-- pgdoc-cn_end sig_en=fe214e0bd8676f06707971953fdff59e -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=cea6028a0a4c51766141f87e5877221d sig_cn_org=None source=14.1 
  <para>
   Change the word <literal>Drama</literal> to <literal>Dramatic</literal> in the
   column <structfield>kind</structfield> of the table <structname>films</structname>:

<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
  </para>
________________________________________________________-->
  <para>
   把表<structname>films</structname>的列<structfield>kind</structfield>
   中的单词<literal>Drama</literal>改成<literal>Dramatic</literal>：

<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=cea6028a0a4c51766141f87e5877221d -->

<!-- pgdoc-cn_start sig_en=d397c74d50a4b41682ea3eb944d4d268 sig_cn_org=None source=14.1 
  <para>
   Adjust temperature entries and reset precipitation to its default
   value in one row of the table <structname>weather</structname>:

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
________________________________________________________-->
  <para>
   在表<structname>weather</structname>的一行中调整温度项并且
   把沉淀物重置为它的默认值：

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=d397c74d50a4b41682ea3eb944d4d268 -->

<!-- pgdoc-cn_start sig_en=32c0aee5bdd63b3e255ee44aee85bb54 sig_cn_org=None source=14.1 
  <para>
   Perform the same operation and return the updated entries:

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   执行相同的操作并且返回更新后的项：

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=32c0aee5bdd63b3e255ee44aee85bb54 -->

<!-- pgdoc-cn_start sig_en=ddd7ab0e689f482bffbfc0668d1ad121 sig_cn_org=None source=14.1 
  <para>
   Use the alternative column-list syntax to do the same update:
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
________________________________________________________-->
  <para>
   使用另一种列列表语法来做同样的更新：
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=ddd7ab0e689f482bffbfc0668d1ad121 -->

<!-- pgdoc-cn_start sig_en=fb26ba8f205364d21801d0931a764b94 sig_cn_org=None source=14.1 
  <para>
   Increment the sales count of the salesperson who manages the
   account for Acme Corporation, using the <literal>FROM</literal>
   clause syntax:
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   为管理Acme Corporation账户的销售人员增加销售量，使用
   <literal>FROM</literal>子句语法：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=fb26ba8f205364d21801d0931a764b94 -->

<!-- pgdoc-cn_start sig_en=2a2decd560bbcadb679b0eef0ce8de0a sig_cn_org=None source=14.1 
  <para>
   Perform the same operation, using a sub-select in the
   <literal>WHERE</literal> clause:
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
  </para>
________________________________________________________-->
  <para>
   执行相同的操作，在
   <literal>WHERE</literal>子句中使用子选择：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=2a2decd560bbcadb679b0eef0ce8de0a -->

<!-- pgdoc-cn_start sig_en=161fcb2b575cd9be7e6000c7ff12013e sig_cn_org=6c44d52d7c1e85f06be6a4eee9e7187e source=15.7 
  <para>
   Update contact names in an accounts table to match the currently assigned
   salespeople:
<programlisting>
UPDATE accounts SET (contact_first_name, contact_last_name) =
    (SELECT first_name, last_name FROM employees
     WHERE employees.id = accounts.sales_person);
</programlisting>
   A similar result could be accomplished with a join:
<programlisting>
UPDATE accounts SET contact_first_name = first_name,
                    contact_last_name = last_name
  FROM employees WHERE employees.id = accounts.sales_person;
</programlisting>
   However, the second query may give unexpected results
   if <structname>employees</structname>.<structfield>id</structfield> is not a unique key, whereas
   the first query is guaranteed to raise an error if there are multiple
   <structfield>id</structfield> matches.  Also, if there is no match for a particular
   <structname>accounts</structname>.<structfield>sales_person</structfield> entry, the first query
   will set the corresponding name fields to NULL, whereas the second query
   will not update that row at all.
  </para>
________________________________________________________-->
  <para>
   更新帐户表中的联系人姓名，使其与当前分配的销售人员匹配：
<programlisting>
UPDATE accounts SET (contact_first_name, contact_last_name) =
    (SELECT first_name, last_name FROM employees
     WHERE employees.id = accounts.sales_person);
</programlisting>
   可以通过连接实现类似的结果：
<programlisting>
UPDATE accounts SET contact_first_name = first_name,
                    contact_last_name = last_name
  FROM employees WHERE employees.id = accounts.sales_person;
</programlisting>
   然而，如果<structname>employees</structname>.<structfield>id</structfield>不是唯一键，第二个查询可能会产生意外结果，
   而第一个查询保证在存在多个<structfield>id</structfield>匹配时会引发错误。此外，如果某个特定<structname>accounts</structname>.<structfield>sales_person</structfield>条目没有匹配，
   第一个查询将把相应的姓名字段设置为NULL，而第二个查询将不会更新该行。
</para>
<!-- pgdoc-cn_end sig_en=161fcb2b575cd9be7e6000c7ff12013e -->

<!-- pgdoc-cn_start sig_en=9e913b3375eab76e5dc92ac19b83bafd sig_cn_org=None source=14.1 
  <para>
   Update statistics in a summary table to match the current data:
<programlisting>
UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) =
    (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d
     WHERE d.group_id = s.group_id);
</programlisting>
  </para>
________________________________________________________-->
  <para>
   更新一个统计表中的统计数据以匹配当前数据：
<programlisting>
UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) =
    (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d
     WHERE d.group_id = s.group_id);
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=9e913b3375eab76e5dc92ac19b83bafd -->

<!-- pgdoc-cn_start sig_en=2ea3cad1622d1b4485c4ecc4cdc80b98 sig_cn_org=None source=14.1 
  <para>
   Attempt to insert a new stock item along with the quantity of stock. If
   the item already exists, instead update the stock count of the existing
   item. To do this without failing the entire transaction, use savepoints:
<programlisting>
BEGIN;
-&minus; other operations
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
-&minus; Assume the above fails because of a unique key violation,
-&minus; so now we issue these commands:
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
-&minus; continue with other operations, and eventually
COMMIT;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   尝试插入一个新库存项及其库存量。如果该项已经存在，则转而更新
   已有项的库存量。要这样做并且不让整个事务失败，可以使用保存点：
<programlisting>
BEGIN;
-- 其他操作
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
-- 假定上述语句由于未被唯一键失败，
-- 那么现在我们发出这些命令：
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
-- 继续其他操作，并且最终
COMMIT;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=2ea3cad1622d1b4485c4ecc4cdc80b98 -->

<!-- pgdoc-cn_start sig_en=80bc8bbacd6329ad771e0df839758a60 sig_cn_org=None source=14.1 
  <para>
   Change the <structfield>kind</structfield> column of the table
   <structname>films</structname> in the row on which the cursor
   <literal>c_films</literal> is currently positioned:
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting></para>
________________________________________________________-->
  <para>
   更改表<structname>films</structname>中由游标<literal>c_films</literal>
   定位的行的<structfield>kind</structfield>列：
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting></para>
<!-- pgdoc-cn_end sig_en=80bc8bbacd6329ad771e0df839758a60 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=9836476ab24633f98e7b5d111ddcc6eb sig_cn_org=None source=14.1 
  <para>
   This command conforms to the <acronym>SQL</acronym> standard, except
   that the <literal>FROM</literal> and <literal>RETURNING</literal> clauses
   are <productname>PostgreSQL</productname> extensions, as is the ability
   to use <literal>WITH</literal> with <command>UPDATE</command>.
  </para>
________________________________________________________-->
  <para>
   这个命令符合<acronym>SQL</acronym>标准，不过
   <literal>FROM</literal>和<literal>RETURNING</literal>子句是
   <productname>PostgreSQL</productname>扩展，把
   <literal>WITH</literal>用于<command>UPDATE</command>也是扩展。
  </para>
<!-- pgdoc-cn_end sig_en=9836476ab24633f98e7b5d111ddcc6eb -->

<!-- pgdoc-cn_start sig_en=28da63786a4ad4f1c03ed50561c0688e sig_cn_org=None source=14.1 
  <para>
   Some other database systems offer a <literal>FROM</literal> option in which
   the target table is supposed to be listed again within <literal>FROM</literal>.
   That is not how <productname>PostgreSQL</productname> interprets
   <literal>FROM</literal>.  Be careful when porting applications that use this
   extension.
  </para>
________________________________________________________-->
  <para>
   有些其他数据库系统提供了一个<literal>FROM</literal>选项，在其中在其中目标表
   可以在<literal>FROM</literal>中被再次列出。但
   <productname>PostgreSQL</productname>不是这样解释
   <literal>FROM</literal>的。在移植使用这种扩展的应用时要小心。
  </para>
<!-- pgdoc-cn_end sig_en=28da63786a4ad4f1c03ed50561c0688e -->

<!-- pgdoc-cn_start sig_en=8d87deb691aec1971191fe5c384a1159 sig_cn_org=None source=14.1 
  <para>
   According to the standard, the source value for a parenthesized sub-list of
   target column names can be any row-valued expression yielding the correct
   number of columns.  <productname>PostgreSQL</productname> only allows the
   source value to be a <link linkend="sql-syntax-row-constructors">row
   constructor</link> or a sub-<literal>SELECT</literal>.  An individual column's
   updated value can be specified as <literal>DEFAULT</literal> in the
   row-constructor case, but not inside a sub-<literal>SELECT</literal>.
  </para>
________________________________________________________-->
  <para>
   根据标准，一个目标列名的圆括号子列表的来源值可以是任意得到正确列数的行值
   表达式。<productname>PostgreSQL</productname>只允许来源值是一个
   <link linkend="sql-syntax-row-constructors">行构造器</link>或者一个子-<literal>SELECT</literal>。一个列的
   被更新值可以在行构造器的情况中被指定为<literal>DEFAULT</literal>，但在
   子-<literal>SELECT</literal>的情况中不能这样做。
  </para>
<!-- pgdoc-cn_end sig_en=8d87deb691aec1971191fe5c384a1159 -->
 </refsect1>
</refentry>
