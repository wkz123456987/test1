<!--
doc/src/sgml/ref/create_statistics.sgml
PostgreSQL documentation
-->

<refentry id="sql-createstatistics">
<!-- pgdoc-cn_start sig_en=42cda65d9a51526a206fe2ad360b9cd0 sig_cn_org=None source=14.1 
 <indexterm zone="sql-createstatistics">
  <primary>CREATE STATISTICS</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-createstatistics">
  <primary>CREATE STATISTICS</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=42cda65d9a51526a206fe2ad360b9cd0 -->

 <refmeta>
  <refentrytitle>CREATE STATISTICS</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=8a7fcc0ee06ce752e61bef431d46bc8e sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>CREATE STATISTICS</refname>
  <refpurpose>define extended statistics</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>CREATE STATISTICS</refname>
  <refpurpose>定义扩展统计</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=8a7fcc0ee06ce752e61bef431d46bc8e -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=7a95f80075b8d503c37d20ee6e766c2b sig_cn_org=None source=14.1 
<synopsis>
CREATE STATISTICS [ IF NOT EXISTS ] <replaceable class="parameter">statistics_name</replaceable>
    ON ( <replaceable class="parameter">expression</replaceable> )
    FROM <replaceable class="parameter">table_name</replaceable>

CREATE STATISTICS [ IF NOT EXISTS ] <replaceable class="parameter">statistics_name</replaceable>
    [ ( <replaceable class="parameter">statistics_kind</replaceable> [, ... ] ) ]
    ON { <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) }, { <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) } [, ...]
    FROM <replaceable class="parameter">table_name</replaceable>
</synopsis>
________________________________________________________-->
<synopsis>
CREATE STATISTICS [ IF NOT EXISTS ] <replaceable class="parameter">statistics_name</replaceable>
    ON ( <replaceable class="parameter">expression</replaceable> )
    FROM <replaceable class="parameter">table_name</replaceable>

CREATE STATISTICS [ IF NOT EXISTS ] <replaceable class="parameter">statistics_name</replaceable>
    [ ( <replaceable class="parameter">statistics_kind</replaceable> [, ... ] ) ]
    ON { <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) }, { <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) } [, ...]
    FROM <replaceable class="parameter">table_name</replaceable>
</synopsis>
<!-- pgdoc-cn_end sig_en=7a95f80075b8d503c37d20ee6e766c2b -->

 </refsynopsisdiv>

 <refsect1 id="sql-createstatistics-description">
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=0c167fbb53e37b1e05de237bc369c709 sig_cn_org=None source=14.1 
  <para>
   <command>CREATE STATISTICS</command> will create a new extended statistics
   object tracking data about the specified table, foreign table or
   materialized view.  The statistics object will be created in the current
   database and will be owned by the user issuing the command.
  </para>
________________________________________________________-->
  <para>
   <command>CREATE STATISTICS</command>将创建一个新的扩展统计对象，
   追踪指定表、外部表或物化视图的数据。该统计对象将在当前数据库中创建，
   被发出该命令的用户所有。
  </para>
<!-- pgdoc-cn_end sig_en=0c167fbb53e37b1e05de237bc369c709 -->

<!-- pgdoc-cn_start sig_en=e235beb27208e8741c63b9c81113ee9f sig_cn_org=None source=14.1 
  <para>
   The <command>CREATE STATISTICS</command> command has two basic forms. The
   first form allows univariate statistics for a single expression to be
   collected, providing benefits similar to an expression index without the
   overhead of index maintenance.  This form does not allow the statistics
   kind to be specified, since the various statistics kinds refer only to
   multivariate statistics.  The second form of the command allows
   multivariate statistics on multiple columns and/or expressions to be
   collected, optionally specifying which statistics kinds to include.  This
   form will also automatically cause univariate statistics to be collected on
   any expressions included in the list.
  </para>
________________________________________________________-->
  <para>
   <command>CREATE STATISTICS</command>命令有两种基本形式。
   第一种形式允许对被收集的单个表达式的单变量统计信息，提供了类似于表达式索引的好处，而不需要索引维护的开销。
   这种形式不允许指定统计类型，因为不同的统计类型引用只针对多元统计。
   此命令的第二种形式允许收集多个列和/或表达式的多元统计信息，可选地指定需要包括的统计信息类型。
   这种格式也会自动使得列表中包含的任何表达式上的单变量统计信息被收集。
  </para>
<!-- pgdoc-cn_end sig_en=e235beb27208e8741c63b9c81113ee9f -->

<!-- pgdoc-cn_start sig_en=ba4cfcd1db37d22d3930402f2c9a1fab sig_cn_org=None source=14.1 
  <para>
   If a schema name is given (for example, <literal>CREATE STATISTICS
   myschema.mystat ...</literal>) then the statistics object is created in the
   specified schema.  Otherwise it is created in the current schema.
   The name of the statistics object must be distinct from the name of any
   other statistics object in the same schema.
  </para>
________________________________________________________-->
  <para>
   如果给定了模式名（比如，<literal>CREATE STATISTICS myschema.mystat ...</literal>），
   那么在给定的模式中创建统计对象。否则在当前模式中创建。
   统计对象的名称必须与相同模式中的任何其他统计对象不同。
  </para>
<!-- pgdoc-cn_end sig_en=ba4cfcd1db37d22d3930402f2c9a1fab -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

  <variablelist>

   <varlistentry>
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=872c3b051d2fe2f9c72f25a9c52c6ff4 sig_cn_org=None source=14.1 
     <para>
      Do not throw an error if a statistics object with the same name already
      exists.  A notice is issued in this case.  Note that only the name of
      the statistics object is considered here, not the details of its
      definition.
     </para>
________________________________________________________-->
     <para>
      如果具有相同名称的统计对象已经存在，不会抛出一个错误，只会发出一个提示。
	  请注意，这里只考虑统计对象的名称，不考虑其定义细节。
     </para>
<!-- pgdoc-cn_end sig_en=872c3b051d2fe2f9c72f25a9c52c6ff4 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">statistics_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=a343f2e29d5929723d4c529b466403a1 sig_cn_org=None source=14.1 
     <para>
      The name (optionally schema-qualified) of the statistics object to be
      created.
     </para>
________________________________________________________-->
     <para>
      要创建的统计对象的名称（可以有模式限定）。
     </para>
<!-- pgdoc-cn_end sig_en=a343f2e29d5929723d4c529b466403a1 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">statistics_kind</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=cbddddf753dbd07f6eaaa49a2f44979e sig_cn_org=None source=14.1 
     <para>
      A multivariate statistics kind to be computed in this statistics object.
      Currently supported kinds are
      <literal>ndistinct</literal>, which enables n-distinct statistics,
      <literal>dependencies</literal>, which enables functional
      dependency statistics, and <literal>mcv</literal> which enables
      most-common values lists.
      If this clause is omitted, all supported statistics kinds are
      included in the statistics object. Univariate expression statistics are
      built automatically if the statistics definition includes any complex
      expressions rather than just simple column references.
      For more information, see <xref linkend="planner-stats-extended"/>
      and <xref linkend="multivariate-statistics-examples"/>.
     </para>
________________________________________________________-->
     <para>
      在此统计对象中计算的多变量统计种类。
      目前支持的种类是启用n-distinct统计的<literal>ndistinct</literal>，启用功能依赖性统计的<literal>dependencies</literal>，以及启用最常见的值列表的<literal>mcv</literal>。
      如果省略该子句，则统计对象中将包含所有支持的统计类型。
      如果统计信息定义包含任何复杂表达式而不仅仅是简单的列引用，单变量表达式统计会自动构建。
	  有关更多信息，请参阅<xref linkend="planner-stats-extended"/>和<xref linkend="multivariate-statistics-examples"/>。
     </para>
<!-- pgdoc-cn_end sig_en=cbddddf753dbd07f6eaaa49a2f44979e -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">column_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=9ab478b05be59839d6da9ffbbeb497c0 sig_cn_org=None source=14.1 
     <para>
      The name of a table column to be covered by the computed statistics.
      This is only allowed when building multivariate statistics.  At least
      two column names or expressions must be specified, and their order is
      not significant.
     </para>
________________________________________________________-->
     <para>
      被计算的统计信息包含的表格列的名称。
      这里只在建立多变量统计信息时才被允许。
      至少必须指定两个列名或表达式，它们的顺序是不重要的。
     </para>
<!-- pgdoc-cn_end sig_en=9ab478b05be59839d6da9ffbbeb497c0 -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=37e568b0c4eb048fe65ac90d4518161c sig_cn_org=None source=14.1 
     <para>
      An expression to be covered by the computed statistics.  This may be
      used to build univariate statistics on a single expression, or as part
      of a list of multiple column names and/or expressions to build
      multivariate statistics.  In the latter case, separate univariate
      statistics are built automatically for each expression in the list.
     </para>
________________________________________________________-->
     <para>
      由计算统计信息包含的表达式。
      这可以用于在单个表达式上构建单变量统计信息，或者作为多个列名和/或表达式的列表的一部分来构建多变量统计信息。
      在后一种情况中，将为列表中的每个表达式自动构建单独的单变量统计信息。
     </para>
<!-- pgdoc-cn_end sig_en=37e568b0c4eb048fe65ac90d4518161c -->
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=623c617fe28a6f3f1a1659752d2f222b sig_cn_org=282b14d61c344828d0ac25060d3d4c68 source=15.7 
     <para>
      The name (optionally schema-qualified) of the table containing the
      column(s) the statistics are computed on;  see <xref
      linkend="sql-analyze"/> for an explanation of the handling of
      inheritance and partitions.
     </para>
________________________________________________________-->
     <para>
      包含要计算统计信息的列的表的名称（可选模式限定符）；请参阅<xref linkend="sql-analyze"/>，
      了解继承和分区处理的解释。
     </para>
<!-- pgdoc-cn_end sig_en=623c617fe28a6f3f1a1659752d2f222b -->
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注意</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=958d4ce8f6418133a860f0cb19429bf5 sig_cn_org=None source=14.1 
  <para>
   You must be the owner of a table to create a statistics object
   reading it.  Once created, however, the ownership of the statistics
   object is independent of the underlying table(s).
  </para>
________________________________________________________-->
  <para>
   你必须是表的所有者才能创建读取它的统计对象。不过，一旦创建，
   统计对象的所有权与基础表无关。
  </para>
<!-- pgdoc-cn_end sig_en=958d4ce8f6418133a860f0cb19429bf5 -->

<!-- pgdoc-cn_start sig_en=831559a3b0032d5a83e1bdc5046ce828 sig_cn_org=None source=14.1 
  <para>
   Expression statistics are per-expression and are similar to creating an
   index on the expression, except that they avoid the overhead of index
   maintenance. Expression statistics are built automatically for each
   expression in the statistics object definition.
  </para>
________________________________________________________-->
  <para>
   表达式统计信息是对每个表达式的，就像在表达式上创建索引，只是它们避免了索引维护的开销。
   表达式统计信息是为统计对象定义中的每个表达式自动构建的。
  </para>
<!-- pgdoc-cn_end sig_en=831559a3b0032d5a83e1bdc5046ce828 -->

<!-- pgdoc-cn_start sig_en=d1c9193a744121be01b81261ab36f0a3 sig_cn_org=3b55442486f5e5c302fbfd33f084f3e2 source=15.7 
  <para>
   Extended statistics are not currently used by the planner for selectivity
   estimations made for table joins.  This limitation will likely be removed
   in a future version of <productname>PostgreSQL</productname>.
  </para>
________________________________________________________-->
  <para>
   扩展统计信息目前不被查询规划器用于对表连接进行的选择性估计。这个限制可能会在未来版本的
   <productname>PostgreSQL</productname>中被移除。
</para>
<!-- pgdoc-cn_end sig_en=d1c9193a744121be01b81261ab36f0a3 -->
 </refsect1>

 <refsect1 id="sql-createstatistics-examples">
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=47322889f06403f5d54d7b2d1684e526 sig_cn_org=None source=14.1 
  <para>
   Create table <structname>t1</structname> with two functionally dependent columns, i.e.,
   knowledge of a value in the first column is sufficient for determining the
   value in the other column. Then functional dependency statistics are built
   on those columns:

<programlisting>
CREATE TABLE t1 (
    a   int,
    b   int
);

INSERT INTO t1 SELECT i/100, i/500
                 FROM generate_series(1,1000000) s(i);

ANALYZE t1;

-&minus; the number of matching rows will be drastically underestimated:
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);

CREATE STATISTICS s1 (dependencies) ON a, b FROM t1;

ANALYZE t1;

-&minus; now the row count estimate is more accurate:
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);
</programlisting>

   Without functional-dependency statistics, the planner would assume
   that the two <literal>WHERE</literal> conditions are independent, and would
   multiply their selectivities together to arrive at a much-too-small
   row count estimate.
   With such statistics, the planner recognizes that the <literal>WHERE</literal>
   conditions are redundant and does not underestimate the row count.
  </para>
________________________________________________________-->
  <para>
   用两个功能相关的列创建表<structname>t1</structname>，
   即第一列中的值的信息足以确定另一列中的值。然后，
   在这些列上构建函数依赖关系统计信息：

<programlisting>
CREATE TABLE t1 (
    a   int,
    b   int
);

INSERT INTO t1 SELECT i/100, i/500
                 FROM generate_series(1,1000000) s(i);

ANALYZE t1;

-- 匹配行的数量将被大大低估：
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);

CREATE STATISTICS s1 (dependencies) ON a, b FROM t1;

ANALYZE t1;

-- 现在行计数估计会更准确：
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);
</programlisting>

   如果没有函数依赖性统计，规划器会认为两个<literal>WHERE</literal>条件是独立的，
   并且会将它们的选择性乘以一起，以致得到太小的行数估计。
   通过这样的统计，规划器认识到<literal>WHERE</literal>条件是多余的，并且不会低估行数。
  </para>
<!-- pgdoc-cn_end sig_en=47322889f06403f5d54d7b2d1684e526 -->

<!-- pgdoc-cn_start sig_en=fa5c4ed60554bb26d47058572e83d28f sig_cn_org=None source=14.1 
  <para>
   Create table <structname>t2</structname> with two perfectly correlated columns
   (containing identical data), and an MCV list on those columns:

<programlisting>
CREATE TABLE t2 (
    a   int,
    b   int
);

INSERT INTO t2 SELECT mod(i,100), mod(i,100)
                 FROM generate_series(1,1000000) s(i);

CREATE STATISTICS s2 (mcv) ON a, b FROM t2;

ANALYZE t2;

-&minus; valid combination (found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 1);

-&minus; invalid combination (not found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 2);
</programlisting>

   The MCV list gives the planner more detailed information about the
   specific values that commonly appear in the table, as well as an upper
   bound on the selectivities of combinations of values that do not appear
   in the table, allowing it to generate better estimates in both cases.
  </para>
________________________________________________________-->
  <para>
   创建表<structname>t2</structname>与两个完全相关的列(包含相同的数据)，并且在这些列上创建一个MCV列表:

<programlisting>
CREATE TABLE t2 (
    a   int,
    b   int
);

INSERT INTO t2 SELECT mod(i,100), mod(i,100)
                 FROM generate_series(1,1000000) s(i);

CREATE STATISTICS s2 (mcv) ON a, b FROM t2;

ANALYZE t2;

-- valid combination (found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 1);

-- invalid combination (not found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 2);
</programlisting>

   MCV列表为计划器提供了关于表中普遍出现的特定值的更详细的信息，以及表中未显示的值组合的选择性上限，允许它在这两种情况下产生更好的估计值。
  </para>
<!-- pgdoc-cn_end sig_en=fa5c4ed60554bb26d47058572e83d28f -->

<!-- pgdoc-cn_start sig_en=d4ee1b139489c9a62f399aa66818ff23 sig_cn_org=None source=14.1 
  <para>
   Create table <structname>t3</structname> with a single timestamp column,
   and run queries using expressions on that column.  Without extended
   statistics, the planner has no information about the data distribution for
   the expressions, and uses default estimates.  The planner also does not
   realize that the value of the date truncated to the month is fully
   determined by the value of the date truncated to the day. Then expression
   and ndistinct statistics are built on those two expressions:

<programlisting>
CREATE TABLE t3 (
    a   timestamp
);

INSERT INTO t3 SELECT i FROM generate_series('2020-01-01'::timestamp,
                                             '2020-12-31'::timestamp,
                                             '1 minute'::interval) s(i);

ANALYZE t3;

-&minus; the number of matching rows will be drastically underestimated:
EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('month', a) = '2020-01-01'::timestamp;

EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp
                                 AND '2020-06-30'::timestamp;

EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)
   FROM t3 GROUP BY 1, 2;

-&minus; build ndistinct statistics on the pair of expressions (per-expression
-&minus; statistics are built automatically)
CREATE STATISTICS s3 (ndistinct) ON date_trunc('month', a), date_trunc('day', a) FROM t3;

ANALYZE t3;

-&minus; now the row count estimates are more accurate:
EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('month', a) = '2020-01-01'::timestamp;

EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp
                                 AND '2020-06-30'::timestamp;

EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)
   FROM t3 GROUP BY 1, 2;
</programlisting>

   Without expression and ndistinct statistics, the planner has no information
   about the number of distinct values for the expressions, and has to rely
   on default estimates. The equality and range conditions are assumed to have
   0.5% selectivity, and the number of distinct values in the expression is
   assumed to be the same as for the column (i.e. unique). This results in a
   significant underestimate of the row count in the first two queries. Moreover,
   the planner has no information about the relationship between the expressions,
   so it assumes the two <literal>WHERE</literal> and <literal>GROUP BY</literal>
   conditions are independent, and multiplies their selectivities together to
   arrive at a severe overestimate of the group count in the aggregate query.
   This is further exacerbated by the lack of accurate statistics for the
   expressions, forcing the planner to use a default ndistinct estimate for the
   expression derived from ndistinct for the column. With such statistics, the
   planner recognizes that the conditions are correlated, and arrives at much
   more accurate estimates.
  </para>
________________________________________________________-->
  <para>
   使用单个时间戳列创建表<structname>t3</structname>，并用该列上的表达式运行查询。
   没有扩展的统计信息，计划器无法获知表达式数据分布的相关信息，然后使用默认的估计值。
   计划器也没有认识到按月截断日期的值完全取决于按天截断日期的值。
   然后表达式和模糊统计构建在这两个表达式之上:


<programlisting>
CREATE TABLE t3 (
    a   timestamp
);

INSERT INTO t3 SELECT i FROM generate_series('2020-01-01'::timestamp,
                                             '2020-12-31'::timestamp,
                                             '1 minute'::interval) s(i);

ANALYZE t3;

-- the number of matching rows will be drastically underestimated:
EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('month', a) = '2020-01-01'::timestamp;

EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp
                                 AND '2020-06-30'::timestamp;

EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)
   FROM t3 GROUP BY 1, 2;

-- build ndistinct statistics on the pair of expressions (per-expression
-- statistics are built automatically)
CREATE STATISTICS s3 (ndistinct) ON date_trunc('month', a), date_trunc('day', a) FROM t3;

ANALYZE t3;

-- now the row count estimates are more accurate:
EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('month', a) = '2020-01-01'::timestamp;

EXPLAIN ANALYZE SELECT * FROM t3
  WHERE date_trunc('day', a) BETWEEN '2020-01-01'::timestamp
                                 AND '2020-06-30'::timestamp;

EXPLAIN ANALYZE SELECT date_trunc('month', a), date_trunc('day', a)
   FROM t3 GROUP BY 1, 2;
</programlisting>

   没有表达式和模糊统计信息，规划器就没有表达式的不同值的数量所相关的信息，并且不得不依赖默认估计值。
   相等和范围条件假设有0.5%的选择度，并且表达式中不同值的数量被假设为与列相同(也就是独一无二的)。
   这将导致前两个查询中的行数严重低估。
   此外，计划器没有关于表达式之间关系的信息，所以它假设两个<literal>WHERE</literal>和<literal>GROUP BY</literal>条件是独立的，并将它们的选择相乘，以得到对聚合查询中的组数的严重高估。
   由于缺乏表达式准确的统计信息，这种情况进一步加剧了，强迫计划器使用默认的ndistinct估计，对于从列的ndistinct派生的表达式。
   有了这些统计信息，规划器就能认识到这些条件是有相互关系的，并得出更准确的估计。
  </para>
<!-- pgdoc-cn_end sig_en=d4ee1b139489c9a62f399aa66818ff23 -->

 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=731e241d1ce56ae56634867a55636227 sig_cn_org=None source=14.1 
  <para>
   There is no <command>CREATE STATISTICS</command> command in the SQL standard.
  </para>
________________________________________________________-->
  <para>
   SQL标准中没有<command>CREATE STATISTICS</command>命令。
  </para>
<!-- pgdoc-cn_end sig_en=731e241d1ce56ae56634867a55636227 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>又见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-alterstatistics"/></member>
   <member><xref linkend="sql-dropstatistics"/></member>
  </simplelist>
 </refsect1>
</refentry>
