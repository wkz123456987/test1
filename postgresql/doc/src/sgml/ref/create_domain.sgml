<!--
doc/src/sgml/ref/create_domain.sgml
PostgreSQL documentation
-->

<refentry id="sql-createdomain">
<!-- pgdoc-cn_start sig_en=d634a31d33a2cad7b35bf512f1c6e4bf sig_cn_org=None source=14.1 
 <indexterm zone="sql-createdomain">
  <primary>CREATE DOMAIN</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-createdomain">
  <primary>CREATE DOMAIN</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=d634a31d33a2cad7b35bf512f1c6e4bf -->

 <refmeta>
  <refentrytitle>CREATE DOMAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=f1e18bb70be4fa41996ac5a090461fcd sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>CREATE DOMAIN</refname>
  <refpurpose>define a new domain</refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>CREATE DOMAIN</refname>
  <refpurpose>定义一个新的域</refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=f1e18bb70be4fa41996ac5a090461fcd -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=63e87f3068d708318dadf1338407855a sig_cn_org=None source=14.1 
<synopsis>
CREATE DOMAIN <replaceable class="parameter">name</replaceable> [ AS ] <replaceable class="parameter">data_type</replaceable>
    [ COLLATE <replaceable>collation</replaceable> ]
    [ DEFAULT <replaceable>expression</replaceable> ]
    [ <replaceable class="parameter">constraint</replaceable> [ ... ] ]

<phrase>where <replaceable class="parameter">constraint</replaceable> is:</phrase>

[ CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ]
{ NOT NULL | NULL | CHECK (<replaceable class="parameter">expression</replaceable>) }
</synopsis>
________________________________________________________-->
<synopsis>
CREATE DOMAIN <replaceable class="parameter">name</replaceable> [ AS ] <replaceable class="parameter">data_type</replaceable>
    [ COLLATE <replaceable>collation</replaceable> ]
    [ DEFAULT <replaceable>expression</replaceable> ]
    [ <replaceable class="parameter">constraint</replaceable> [ ... ] ]

<phrase>其中 <replaceable class="parameter">constraint</replaceable> 是：</phrase>

[ CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ]
{ NOT NULL | NULL | CHECK (<replaceable class="parameter">expression</replaceable>) }
</synopsis>
<!-- pgdoc-cn_end sig_en=63e87f3068d708318dadf1338407855a -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=7936e6c802871f9742ab3cfe39117c40 sig_cn_org=None source=14.1 
  <para>
   <command>CREATE DOMAIN</command> creates a new domain.  A domain is
   essentially a data type with optional constraints (restrictions on
   the allowed set of values).
   The user who defines a domain becomes its owner.
  </para>
________________________________________________________-->
  <para>
   <command>CREATE DOMAIN</command>创建一个新的域。域
   本质上是一种带有可选约束（在允许的值集合上的限制）的数据类型。
   定义一个域的用户将成为它的拥有者。
  </para>
<!-- pgdoc-cn_end sig_en=7936e6c802871f9742ab3cfe39117c40 -->

<!-- pgdoc-cn_start sig_en=2d5a3dfbdf0500f94c0cd39b46394e99 sig_cn_org=None source=14.1 
  <para>
   If a schema name is given (for example, <literal>CREATE DOMAIN
   myschema.mydomain ...</literal>) then the domain is created in the
   specified schema.  Otherwise it is created in the current schema.
   The domain name must be unique among the types and domains existing
   in its schema.
  </para>
________________________________________________________-->
  <para>
   如果给定一个模式名（例如<literal>CREATE DOMAIN
   myschema.mydomain ...</literal>），那么域将被创建在该指定的模式中。
   否则它会被创建在当前模式中。域的名称在其模式中的类型和域之间
   必须保持唯一。
  </para>
<!-- pgdoc-cn_end sig_en=2d5a3dfbdf0500f94c0cd39b46394e99 -->

<!-- pgdoc-cn_start sig_en=c8fbebd089c95c3b11e3f3cb5e59c3fb sig_cn_org=None source=14.1 
  <para>
   Domains are useful for abstracting common constraints on fields into
   a single location for maintenance.  For example, several tables might
   contain email address columns, all requiring the same CHECK constraint
   to verify the address syntax.
   Define a domain rather than setting up each table's constraint
   individually.
  </para>
________________________________________________________-->
  <para>
   域主要被用于把字段上的常用约束抽象到一个单一的位置以便维护。例如，
   几个表可能都包含电子邮件地址列，而且都要求相同的 CHECK 约束来验证
   地址的语法。可以为此定义一个域，而不是在每个表上都单独设置一个约束。
  </para>
<!-- pgdoc-cn_end sig_en=c8fbebd089c95c3b11e3f3cb5e59c3fb -->

<!-- pgdoc-cn_start sig_en=333084da31546923e6e9cd43658981de sig_cn_org=None source=14.1 
  <para>
   To be able to create a domain, you must have <literal>USAGE</literal>
   privilege on the underlying type.
  </para>
________________________________________________________-->
  <para>
   要创建一个域，你必须在其底层类型上拥有<literal>USAGE</literal>特权。
  </para>
<!-- pgdoc-cn_end sig_en=333084da31546923e6e9cd43658981de -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=59a8853d1ad7a495397781e6010a0a43 sig_cn_org=None source=14.1 
       <para>
        The name (optionally schema-qualified) of a domain to be created.
       </para>
________________________________________________________-->
       <para>
        要被创建的域的名称（可以被模式限定）。
       </para>
<!-- pgdoc-cn_end sig_en=59a8853d1ad7a495397781e6010a0a43 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">data_type</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=bde8017ecc38d14739d1046f0139f103 sig_cn_org=None source=14.1 
       <para>
        The underlying data type of the domain. This can include array
        specifiers.
       </para>
________________________________________________________-->
       <para>
        域的底层数据类型。可以包括数组指示符。
       </para>
<!-- pgdoc-cn_end sig_en=bde8017ecc38d14739d1046f0139f103 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>collation</replaceable></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=d345420b77665e083ec4e14f120229bf sig_cn_org=1ca46853b22b49a30875514a23f59571 source=15.7 
       <para>
        An optional collation for the domain.  If no collation is
        specified, the domain has the same collation behavior as its
        underlying data type.
        The underlying type must be collatable if <literal>COLLATE</literal>
        is specified.
       </para>
________________________________________________________-->
       <para>
        域的可选排序。如果未指定排序，则该域具有与其基础数据类型相同的排序行为。
        如果指定了<literal>COLLATE</literal>，则基础类型必须是可排序的。
</para>
<!-- pgdoc-cn_end sig_en=d345420b77665e083ec4e14f120229bf -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DEFAULT <replaceable>expression</replaceable></literal></term>

      <listitem>
<!-- pgdoc-cn_start sig_en=01523c63837d636f2b180374a80484dc sig_cn_org=None source=14.1 
       <para>
        The <literal>DEFAULT</literal> clause specifies a default value for
        columns of the domain data type.  The value is any
        variable-free expression (but subqueries are not allowed).
        The data type of the default expression must match the data
        type of the domain.  If no default value is specified, then
        the default value is the null value.
       </para>
________________________________________________________-->
       <para>
        <literal>DEFAULT</literal>子句为该域数据类型的列指定一个默认值。
        该值是任何没有变量的表达式（但不允许子查询）。默认值表达式
        的数据类型必须匹配域的数据类型。如果没有指定默认值，那么
        默认值就是空值。
       </para>
<!-- pgdoc-cn_end sig_en=01523c63837d636f2b180374a80484dc -->

<!-- pgdoc-cn_start sig_en=6feec017df11cc255407c8c05d8752c8 sig_cn_org=None source=14.1 
       <para>
        The default expression will be used in any insert operation
        that does not specify a value for the column.  If a default
        value is defined for a particular column, it overrides any
        default associated with the domain.  In turn, the domain
        default overrides any default value associated with the
        underlying data type.
       </para>
________________________________________________________-->
       <para>
        默认值表达式将被用在任何没有指定列值的插入操作中。如果为一个
        特定列定义了默认值，它会覆盖与域相关的默认值。继而，域默认值
        会覆盖任何与底层数据类型相关的默认值。
       </para>
<!-- pgdoc-cn_end sig_en=6feec017df11cc255407c8c05d8752c8 -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONSTRAINT <replaceable class="parameter">constraint_name</replaceable></literal></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=057119da83429f9123a14c64d122851d sig_cn_org=None source=14.1 
       <para>
        An optional name for a constraint.  If not specified,
        the system generates a name.
       </para>
________________________________________________________-->
       <para>
        一个约束的名称（可选）。如果没有指定，系统会生成一个名称。
       </para>
<!-- pgdoc-cn_end sig_en=057119da83429f9123a14c64d122851d -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NOT NULL</literal></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=60f76670bd381fb313dfbab860bd673e sig_cn_org=None source=14.1 
       <para>
        Values of this domain are prevented from being null
        (but see notes below).
       </para>
________________________________________________________-->
       <para>
        这个域的值通常不能为空值（但是看看下面的注释）。
       </para>
<!-- pgdoc-cn_end sig_en=60f76670bd381fb313dfbab860bd673e -->
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULL</literal></term>
      <listitem>
<!-- pgdoc-cn_start sig_en=ac1a0cd63d9fe859918a57ea66bd1b2a sig_cn_org=None source=14.1 
       <para>
        Values of this domain are allowed to be null.  This is the default.
       </para>
________________________________________________________-->
       <para>
        这个域的值允许为空值。这是默认值。
       </para>
<!-- pgdoc-cn_end sig_en=ac1a0cd63d9fe859918a57ea66bd1b2a -->

<!-- pgdoc-cn_start sig_en=17bc272edf549131d783170a506b64a8 sig_cn_org=None source=14.1 
       <para>
        This clause is only intended for compatibility with
        nonstandard SQL databases.  Its use is discouraged in new
        applications.
       </para>
________________________________________________________-->
       <para>
        这个子句只是为了与非标准 SQL 数据库相兼容而设计。在新的
        应用中不鼓励使用它。
       </para>
<!-- pgdoc-cn_end sig_en=17bc272edf549131d783170a506b64a8 -->
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>CHECK (<replaceable class="parameter">expression</replaceable>)</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=a78d96f634b87a679ba8cd41a7757d39 sig_cn_org=None source=14.1 
     <para><literal>CHECK</literal> clauses specify integrity constraints or tests
      which values of the domain must satisfy.
      Each constraint must be an expression
      producing a Boolean result.  It should use the key word <literal>VALUE</literal>
      to refer to the value being tested.  Expressions evaluating
      to TRUE or UNKNOWN succeed.  If the expression produces a FALSE result,
      an error is reported and the value is not allowed to be converted
      to the domain type.
     </para>
________________________________________________________-->
     <para><literal>CHECK</literal>子句指定该域的值必须满足的完整性
     约束或者测试。每一个约束必须是一个产生布尔结果的表达式。
     它应该使用关键词<literal>VALUE</literal>来引用要被测试的值。计算为
      TRUE 或者 UNKNOWN 的表达式成功。如果该表达式产生一个 FALSE 
      结果，会报告一个错误并且该值不允许被转换成该域类型。
     </para>
<!-- pgdoc-cn_end sig_en=a78d96f634b87a679ba8cd41a7757d39 -->

<!-- pgdoc-cn_start sig_en=3f4f133682e8276d3cc2035f1fb82903 sig_cn_org=None source=14.1 
     <para>
      Currently, <literal>CHECK</literal> expressions cannot contain
      subqueries nor refer to variables other than <literal>VALUE</literal>.
     </para>
________________________________________________________-->
     <para>
      当前，<literal>CHECK</literal>表达式不能包含子查询，也不能
      引用除<literal>VALUE</literal>之外的其他变量。
     </para>
<!-- pgdoc-cn_end sig_en=3f4f133682e8276d3cc2035f1fb82903 -->

<!-- pgdoc-cn_start sig_en=8efd34df1e826bf342161012a86d9316 sig_cn_org=None source=14.1 
     <para>
      When a domain has multiple <literal>CHECK</literal> constraints,
      they will be tested in alphabetical order by name.
      (<productname>PostgreSQL</productname> versions before 9.5 did not honor any
      particular firing order for <literal>CHECK</literal> constraints.)
     </para>
________________________________________________________-->
     <para>
      当一个域有多个<literal>CHECK</literal>约束，将按照其名字的
      字母顺序测试它们（版本 9.5 之前的<productname>PostgreSQL</productname>
      不遵循任何用于<literal>CHECK</literal>约束的特定触发顺序）。
     </para>
<!-- pgdoc-cn_end sig_en=8efd34df1e826bf342161012a86d9316 -->
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=2a10ba80855367fcc317760a7e7940b4 sig_cn_org=None source=14.1 
  <para>
   Domain constraints, particularly <literal>NOT NULL</literal>, are checked when
   converting a value to the domain type.  It is possible for a column that
   is nominally of the domain type to read as null despite there being such
   a constraint.  For example, this can happen in an outer-join query, if
   the domain column is on the nullable side of the outer join.  A more
   subtle example is
<programlisting>
INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false));
</programlisting>
   The empty scalar sub-SELECT will produce a null value that is considered
   to be of the domain type, so no further constraint checking is applied
   to it, and the insertion will succeed.
  </para>
________________________________________________________-->
  <para>
   在把一个值转换成域类型时会检查域约束（特别是<literal>NOT NULL</literal>）。
   即使有一个这样的约束，有可能一个名义上属于该域类型的列也会被读成空值。
   例如，如果在一次外连接查询中，属于该域的列出现在外连接的空值端。下面
   是一个更精细的例子：
<programlisting>
INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false));
</programlisting>
   空的标量子-SELECT 将产生一个空值，它被认为是该域类型的值，因此不会
   在其上应用任何进一步的约束检查，并且插入将会成功。
  </para>
<!-- pgdoc-cn_end sig_en=2a10ba80855367fcc317760a7e7940b4 -->

<!-- pgdoc-cn_start sig_en=383f7c7376b93e949fdae6c46d7dce5e sig_cn_org=None source=14.1 
  <para>
   It is very difficult to avoid such problems, because of SQL's general
   assumption that a null value is a valid value of every data type.  Best practice
   therefore is to design a domain's constraints so that a null value is allowed,
   and then to apply column <literal>NOT NULL</literal> constraints to columns of
   the domain type as needed, rather than directly to the domain type.
  </para>
________________________________________________________-->
  <para>
   要避免这类问题很难，因为 SQL 的一般假设是空值也是每一种数据类型的合法值。
   因此，最好的方法是设计一个允许空值的域约束，然后根据需要在该域类型的列上
   应用列的<literal>NOT NULL</literal>约束。
  </para>
<!-- pgdoc-cn_end sig_en=383f7c7376b93e949fdae6c46d7dce5e -->

<!-- pgdoc-cn_start sig_en=7c0b2c3e62ffd3d8bea367b3af555197 sig_cn_org=None source=14.1 
  <para>
   <productname>PostgreSQL</productname> assumes that
   <literal>CHECK</literal> constraints' conditions are immutable, that is,
   they will always give the same result for the same input value.  This
   assumption is what justifies examining <literal>CHECK</literal>
   constraints only when a value is first converted to be of a domain type,
   and not at other times.  (This is essentially the same as the treatment
   of table <literal>CHECK</literal> constraints, as described in
   <xref linkend="ddl-constraints-check-constraints"/>.)
  </para>
________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>假定<literal>CHECK</literal>约束的条件是不可变的，也就是说，对于相同的输入值它们总会给出相同的结果。
   仅在首次将值转换为域类型时，此假设检查<literal>CHECK</literal>约束的正确性，而不是在其他时候。
   （这与处理表<literal>CHECK</literal>约束基本上相同，如 <xref linkend="ddl-constraints-check-constraints"/>中所述。）
  </para>
<!-- pgdoc-cn_end sig_en=7c0b2c3e62ffd3d8bea367b3af555197 -->

<!-- pgdoc-cn_start sig_en=ffb815ca40d7b9d28831e5f48b66bd18 sig_cn_org=fe3f693d6e3bb5555c51c335dba46916 source=15.7 
  <para>
   An example of a common way to break this assumption is to reference a
   user-defined function in a <literal>CHECK</literal> expression, and then
   change the behavior of that
   function.  <productname>PostgreSQL</productname> does not disallow that,
   but it will not notice if there are stored values of the domain type that
   now violate the <literal>CHECK</literal> constraint. That would cause a
   subsequent database dump and restore to fail.  The recommended way to
   handle such a change is to drop the constraint (using <command>ALTER
   DOMAIN</command>), adjust the function definition, and re-add the
   constraint, thereby rechecking it against stored data.
  </para>
________________________________________________________-->
  <para>
   一个常见的打破这种假设的例子是在<literal>CHECK</literal>表达式中引用一个用户定义的函数，然后更改该函数的行为。
   <productname>PostgreSQL</productname>不会禁止这样做，但它不会注意到域类型的存储值是否违反了<literal>CHECK</literal>约束。
   这将导致后续的数据库转储和恢复失败。处理这种更改的推荐方法是删除约束（使用<command>ALTER DOMAIN</command>），
   调整函数定义，然后重新添加约束，从而重新检查存储的数据。
</para>
<!-- pgdoc-cn_end sig_en=ffb815ca40d7b9d28831e5f48b66bd18 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=caa7ac4e0fd3be2175062d379f683ad2 sig_cn_org=None source=14.1 
  <para>
   This example creates the <type>us_postal_code</type> data type and
   then uses the type in a table definition.  A regular expression test
   is used to verify that the value looks like a valid US postal code:

<programlisting>
CREATE DOMAIN us_postal_code AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE us_snail_addy (
  address_id SERIAL PRIMARY KEY,
  street1 TEXT NOT NULL,
  street2 TEXT,
  street3 TEXT,
  city TEXT NOT NULL,
  postal us_postal_code NOT NULL
);
</programlisting></para>
________________________________________________________-->
  <para>
   这个例子创建<type>us_postal_code</type>数据类型并且把它用在
   一个表定义中。一个正则表达式测试被用来验证值是否看起来像一个
   合法的 US 邮政编码：

<programlisting>
CREATE DOMAIN us_postal_code AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE us_snail_addy (
  address_id SERIAL PRIMARY KEY,
  street1 TEXT NOT NULL,
  street2 TEXT,
  street3 TEXT,
  city TEXT NOT NULL,
  postal us_postal_code NOT NULL
);
</programlisting></para>
<!-- pgdoc-cn_end sig_en=caa7ac4e0fd3be2175062d379f683ad2 -->
 </refsect1>

 <refsect1 id="sql-createdomain-compatibility">
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=064e16b69fb6c10cc42ab44ae46fb2ed sig_cn_org=None source=14.1 
  <para>
   The command <command>CREATE DOMAIN</command> conforms to the SQL
   standard.
  </para>
________________________________________________________-->
  <para>
   命令<command>CREATE DOMAIN</command>符合 SQL 标准。
  </para>
<!-- pgdoc-cn_end sig_en=064e16b69fb6c10cc42ab44ae46fb2ed -->
 </refsect1>

 <refsect1 id="sql-createdomain-see-also">
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>另见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-alterdomain"/></member>
   <member><xref linkend="sql-dropdomain"/></member>
  </simplelist>
 </refsect1>

</refentry>
