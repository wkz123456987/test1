<!--
doc/src/sgml/ref/alter_type.sgml
PostgreSQL documentation
-->

<refentry id="sql-altertype">
<!-- pgdoc-cn_start sig_en=5aeb76ec0cc4750a13b71ff32239df11 sig_cn_org=None source=14.1 
 <indexterm zone="sql-altertype">
  <primary>ALTER TYPE</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="sql-altertype">
  <primary>ALTER TYPE</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=5aeb76ec0cc4750a13b71ff32239df11 -->

 <refmeta>
  <refentrytitle>ALTER TYPE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!-- pgdoc-cn_start sig_en=1239020192d74596bf1051f6f8d3a3eb sig_cn_org=None source=14.1 
 <refnamediv>
  <refname>ALTER TYPE</refname>
  <refpurpose>
   change the definition of a type
  </refpurpose>
 </refnamediv>
________________________________________________________-->
 <refnamediv>
  <refname>ALTER TYPE</refname>
  <refpurpose>
   更改一个类型的定义
  </refpurpose>
 </refnamediv>
<!-- pgdoc-cn_end sig_en=1239020192d74596bf1051f6f8d3a3eb -->

 <refsynopsisdiv>
<!-- pgdoc-cn_start sig_en=1c2945d745b158cd9308e5208d5777bd sig_cn_org=None source=14.1 
<synopsis>
ALTER TYPE <replaceable class="parameter">name</replaceable> OWNER TO { <replaceable class="parameter">new_owner</replaceable> | CURRENT_ROLE | CURRENT_USER | SESSION_USER }
ALTER TYPE <replaceable class="parameter">name</replaceable> RENAME TO <replaceable class="parameter">new_name</replaceable>
ALTER TYPE <replaceable class="parameter">name</replaceable> SET SCHEMA <replaceable class="parameter">new_schema</replaceable>
ALTER TYPE <replaceable class="parameter">name</replaceable> RENAME ATTRIBUTE <replaceable class="parameter">attribute_name</replaceable> TO <replaceable class="parameter">new_attribute_name</replaceable> [ CASCADE | RESTRICT ]
ALTER TYPE <replaceable class="parameter">name</replaceable> <replaceable class="parameter">action</replaceable> [, ... ]
ALTER TYPE <replaceable class="parameter">name</replaceable> ADD VALUE [ IF NOT EXISTS ] <replaceable class="parameter">new_enum_value</replaceable> [ { BEFORE | AFTER } <replaceable class="parameter">neighbor_enum_value</replaceable> ]
ALTER TYPE <replaceable class="parameter">name</replaceable> RENAME VALUE <replaceable class="parameter">existing_enum_value</replaceable> TO <replaceable class="parameter">new_enum_value</replaceable>
ALTER TYPE <replaceable class="parameter">name</replaceable> SET ( <replaceable class="parameter">property</replaceable> = <replaceable class="parameter">value</replaceable> [, ... ] )

<phrase>where <replaceable class="parameter">action</replaceable> is one of:</phrase>

    ADD ATTRIBUTE <replaceable class="parameter">attribute_name</replaceable> <replaceable class="parameter">data_type</replaceable> [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ CASCADE | RESTRICT ]
    DROP ATTRIBUTE [ IF EXISTS ] <replaceable class="parameter">attribute_name</replaceable> [ CASCADE | RESTRICT ]
    ALTER ATTRIBUTE <replaceable class="parameter">attribute_name</replaceable> [ SET DATA ] TYPE <replaceable class="parameter">data_type</replaceable> [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ CASCADE | RESTRICT ]
</synopsis>
________________________________________________________-->
<synopsis>
ALTER TYPE <replaceable class="parameter">name</replaceable> OWNER TO { <replaceable class="parameter">new_owner</replaceable> | CURRENT_ROLE | CURRENT_USER | SESSION_USER }
ALTER TYPE <replaceable class="parameter">name</replaceable> RENAME TO <replaceable class="parameter">new_name</replaceable>
ALTER TYPE <replaceable class="parameter">name</replaceable> SET SCHEMA <replaceable class="parameter">new_schema</replaceable>
ALTER TYPE <replaceable class="parameter">name</replaceable> RENAME ATTRIBUTE <replaceable class="parameter">attribute_name</replaceable> TO <replaceable class="parameter">new_attribute_name</replaceable> [ CASCADE | RESTRICT ]
ALTER TYPE <replaceable class="parameter">name</replaceable> <replaceable class="parameter">action</replaceable> [, ... ]
ALTER TYPE <replaceable class="parameter">name</replaceable> ADD VALUE [ IF NOT EXISTS ] <replaceable class="parameter">new_enum_value</replaceable> [ { BEFORE | AFTER } <replaceable class="parameter">neighbor_enum_value</replaceable> ]
ALTER TYPE <replaceable class="parameter">name</replaceable> RENAME VALUE <replaceable class="parameter">existing_enum_value</replaceable> TO <replaceable class="parameter">new_enum_value</replaceable>
ALTER TYPE <replaceable class="parameter">name</replaceable> SET ( <replaceable class="parameter">property</replaceable> = <replaceable class="parameter">value</replaceable> [, ... ] )

<phrase>这里<replaceable class="parameter">action</replaceable> 是以下之一：</phrase>

    ADD ATTRIBUTE <replaceable class="parameter">attribute_name</replaceable> <replaceable class="parameter">data_type</replaceable> [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ CASCADE | RESTRICT ]
    DROP ATTRIBUTE [ IF EXISTS ] <replaceable class="parameter">attribute_name</replaceable> [ CASCADE | RESTRICT ]
    ALTER ATTRIBUTE <replaceable class="parameter">attribute_name</replaceable> [ SET DATA ] TYPE <replaceable class="parameter">data_type</replaceable> [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ CASCADE | RESTRICT ]
</synopsis>
<!-- pgdoc-cn_end sig_en=1c2945d745b158cd9308e5208d5777bd -->
 </refsynopsisdiv>

 <refsect1>
<!-- pgdoc-cn_start sig_en=59d6e86f3a60db4f1e08d0d6e639924e sig_cn_org=None source=14.1 
  <title>Description</title>
________________________________________________________-->
  <title>描述</title>
<!-- pgdoc-cn_end sig_en=59d6e86f3a60db4f1e08d0d6e639924e -->

<!-- pgdoc-cn_start sig_en=92602ddd2672ad68edbc50d2ea6fdf41 sig_cn_org=None source=14.1 
  <para>
   <command>ALTER TYPE</command> changes the definition of an existing type.
   There are several subforms:

  <variablelist>
   <varlistentry>
    <term><literal>OWNER</literal></term>
    <listitem>
     <para>
      This form changes the owner of the type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME</literal></term>
    <listitem>
     <para>
      This form changes the name of the type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
      This form moves the type into another schema.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME ATTRIBUTE</literal></term>
    <listitem>
     <para>
      This form is only usable with composite types.
      It changes the name of an individual attribute of the type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD ATTRIBUTE</literal></term>
    <listitem>
     <para>
      This form adds a new attribute to a composite type, using the same syntax as
      <link linkend="sql-createtype"><command>CREATE TYPE</command></link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP ATTRIBUTE [ IF EXISTS ]</literal></term>
    <listitem>
     <para>
      This form drops an attribute from a composite type.
      If <literal>IF EXISTS</literal> is specified and the attribute
      does not exist, no error is thrown. In this case a notice
      is issued instead.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ALTER ATTRIBUTE ... SET DATA TYPE</literal></term>
    <listitem>
     <para>
      This form changes the type of an attribute of a composite type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD VALUE [ IF NOT EXISTS ] [ BEFORE | AFTER ]</literal></term>
    <listitem>
     <para>
      This form adds a new value to an enum type.  The new value's place in
      the enum's ordering can be specified as being <literal>BEFORE</literal>
      or <literal>AFTER</literal> one of the existing values.  Otherwise,
      the new item is added at the end of the list of values.
     </para>
     <para>
      If <literal>IF NOT EXISTS</literal> is specified, it is not an error if
      the type already contains the new value: a notice is issued but no other
      action is taken. Otherwise, an error will occur if the new value is
      already present.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME VALUE</literal></term>
    <listitem>
     <para>
      This form renames a value of an enum type.
      The value's place in the enum's ordering is not affected.
      An error will occur if the specified value is not present or the new
      name is already present.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>SET ( <replaceable class="parameter">property</replaceable> = <replaceable class="parameter">value</replaceable> [, ... ] )</literal>
    </term>
    <listitem>
     <para>
      This form is only applicable to base types.  It allows adjustment of a
      subset of the base-type properties that can be set in <command>CREATE
      TYPE</command>.  Specifically, these properties can be changed:
      <itemizedlist>
       <listitem>
        <para>
         <literal>RECEIVE</literal> can be set to the name of a binary input
         function, or <literal>NONE</literal> to remove the type's binary
         input function.  Using this option requires superuser privilege.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>SEND</literal> can be set to the name of a binary output
         function, or <literal>NONE</literal> to remove the type's binary
         output function.  Using this option requires superuser privilege.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>TYPMOD_IN</literal> can be set to the name of a type
         modifier input function, or <literal>NONE</literal> to remove the
         type's type modifier input function.  Using this option requires
         superuser privilege.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>TYPMOD_OUT</literal> can be set to the name of a type
         modifier output function, or <literal>NONE</literal> to remove the
         type's type modifier output function.  Using this option requires
         superuser privilege.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>ANALYZE</literal> can be set to the name of a type-specific
         statistics collection function, or <literal>NONE</literal> to remove
         the type's statistics collection function.  Using this option
         requires superuser privilege.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>SUBSCRIPT</literal> can be set to the name of a type-specific
         subscripting handler function, or <literal>NONE</literal> to remove
         the type's subscripting handler function.  Using this option
         requires superuser privilege.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>STORAGE</literal><indexterm>
          <primary>TOAST</primary>
          <secondary>per-type storage settings</secondary>
         </indexterm>
         can be set to <literal>plain</literal>,
         <literal>extended</literal>, <literal>external</literal>,
         or <literal>main</literal> (see <xref linkend="storage-toast"/> for
         more information about what these mean).  However, changing
         from <literal>plain</literal> to another setting requires superuser
         privilege (because it requires that the type's C functions all be
         TOAST-ready), and changing to <literal>plain</literal> from another
         setting is not allowed at all (since the type may already have
         TOASTed values present in the database).  Note that changing this
         option doesn't by itself change any stored data, it just sets the
         default TOAST strategy to be used for table columns created in the
         future.  See <xref linkend="sql-altertable"/> to change the TOAST
         strategy for existing table columns.
        </para>
       </listitem>
      </itemizedlist>
      See <xref linkend="sql-createtype"/> for more details about these
      type properties.  Note that where appropriate, a change in these
      properties for a base type will be propagated automatically to domains
      based on that type.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  </para>
________________________________________________________-->
  <para>
   <command>ALTER TYPE</command>更改一种现有类型的定义。
   它有几种形式：

  <variablelist>
   <varlistentry>
    <term><literal>OWNER</literal></term>
    <listitem>
     <para>
      此表单更改类型的所有者。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME</literal></term>
    <listitem>
     <para>
      此表单更改类型的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
      这种形式将类型移动到另一个模式。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME ATTRIBUTE</literal></term>
    <listitem>
     <para>
      该形式仅可用于复合类型。它更改类型的单个属性的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD ATTRIBUTE</literal></term>
    <listitem>
     <para>
      这种形式为一种组合类型增加一个新属性，使用的语法和
      <link linkend="sql-createtype"><command>CREATE TYPE</command></link>相同。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP ATTRIBUTE [ IF EXISTS ]</literal></term>
    <listitem>
     <para>
      这种形式从一种组合类型删除一个属性。如果指定了
      <literal>IF EXISTS</literal>并且该属性不存在，则不会抛出错误。
      这种情况下会发出一个提示。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ALTER ATTRIBUTE ... SET DATA TYPE</literal></term>
    <listitem>
     <para>
      这种形式更改一种组合类型的一个属性类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD VALUE [ IF NOT EXISTS ] [ BEFORE | AFTER ]</literal></term>
    <listitem>
     <para>
      这种形式为一种枚举类型增加一个新值。可以用<literal>BEFORE</literal>或者
      <literal>AFTER</literal>一个现有值来指定新值在枚举顺序中的位置。
      否则，新项会被增加在值列表的最后。
     </para>
     <para>
      如果指定了<literal>IF NOT EXISTS</literal>，该类型已经包含新值时不会发生
      错误：会发出一个提示但是不采取其他行动。否则，如果新值已经存在会发生错误。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME VALUE</literal></term>
    <listitem>
     <para>
      该形式重命名枚举类型的值。该值在枚举排序中的位置不受影响。
    如果指定的值不存在或新名称已存在，则会发生错误。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <literal>SET ( <replaceable class="parameter">property</replaceable> = <replaceable class="parameter">value</replaceable> [, ... ] )</literal>
    </term>
    <listitem>
     <para>
      该表格仅适用于基本类型。 它允许调整可以在<command>CREATE TYPE</command>中设置的基本类型属性的子集。 
      具体来说，可以更改以下属性：
      <itemizedlist>
       <listitem>
        <para>
         可以将<literal>RECEIVE</literal>设置为二进制输入函数的名称，
         或者设置为<literal>NONE</literal>删除类型的二进制输入函数。 
         使用此选项需要超级用户特权。
        </para>
       </listitem>
       <listitem>
        <para>
         可以将<literal>SEND</literal>设置为二进制输出函数的名称，
         或者设置为<literal>NONE</literal>删除类型的二进制输入函数。 
         使用此选项需要超级用户特权。
        </para>
       </listitem>
       <listitem>
        <para>
         可以将<literal>TYPMOD_IN</literal>设置为类型修饰符输入函数的名称，
         或者设置为<literal>NONE</literal>删除类型的类型修饰符输入函数。 
         使用此选项需要超级用户特权。
        </para>
       </listitem>
       <listitem>
        <para>
         可以将<literal>TYPMOD_OUT</literal>设置为类型修饰符输出函数的名称，
         或者设置为<literal>NONE</literal>删除类型的类型修饰符输出函数的名称。 
         使用此选项需要超级用户特权。
        </para>
       </listitem>
       <listitem>
        <para>
         可以将<literal>ANALYZE</literal>设置为特定于类型的统计信息收集功能的名称，
         或者设置为<literal>NONE</literal>删除该类型的统计信息收集功能。 
         使用此选项需要超级用户特权。
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>SUBSCRIPT</literal>可以设置为特定于类型的下标处理程序函数的名称，也可以设置为<literal>NONE</literal>以删除类型的下注处理程序函数。使用此选项需要超级用户权限。
        </para>
       </listitem>
       <listitem>
        <para>
         可以将<literal>STORAGE</literal><indexterm>
          <primary>TOAST</primary>
          <secondary>per-type storage settings</secondary>
         </indexterm>设置为<literal>plain</literal>,
         <literal>extended</literal>, <literal>external</literal>,
         或 <literal>main</literal> (有关这些含义的更多信息参考 <xref linkend="storage-toast"/>)。
         但是，从<literal>plain</literal>更改为另一个设置需要超级用户特权（因为它要求该类型的C函数全部是TOAST-ready），
         而从另一个设置更改为<literal> plain </literal>则不是完全允许（因为类型可能已经在数据库中包含TOASTed值）。
         请注意，更改此选项本身并不会更改任何存储的数据，它只是设置默认的TOAST策略以用于将来创建的表列。 
         请参见<xref linkend="sql-altertable"/>更改现有表列的TOAST策略。
        </para>
       </listitem>
      </itemizedlist>
      有关这些类型属性的更多详细信息，请参见<link linkend="sql-createtype"><command>CREATE TYPE</command></link>。 
      请注意，在适当的情况下，基本类型的这些属性中的更改将自动传播到基于该类型的域。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  </para>
<!-- pgdoc-cn_end sig_en=92602ddd2672ad68edbc50d2ea6fdf41 -->

<!-- pgdoc-cn_start sig_en=e3a139afefacb53325e1ee3ff0faeac7 sig_cn_org=None source=14.1 
  <para>
   The <literal>ADD ATTRIBUTE</literal>, <literal>DROP
   ATTRIBUTE</literal>, and <literal>ALTER ATTRIBUTE</literal> actions
   can be combined into a list of multiple alterations to apply in
   parallel.  For example, it is possible to add several attributes
   and/or alter the type of several attributes in a single command.
  </para>
________________________________________________________-->
  <para>
   <literal>ADD ATTRIBUTE</literal>、<literal>DROP
   ATTRIBUTE</literal>和<literal>ALTER ATTRIBUTE</literal>动作
   可以被整合到一个多个修改组成的列表中，以便被平行应用。例如，
   可以在一个命令中增加多个属性并且/或者修改多个属性的类型。
  </para>
<!-- pgdoc-cn_end sig_en=e3a139afefacb53325e1ee3ff0faeac7 -->

<!-- pgdoc-cn_start sig_en=df4bf2e409abc75d9294411e6d37317b sig_cn_org=None source=14.1 
  <para>
   You must own the type to use <command>ALTER TYPE</command>.
   To change the schema of a type, you must also have
   <literal>CREATE</literal> privilege on the new schema.
   To alter the owner, you must also be a direct or indirect member of the new
   owning role, and that role must have <literal>CREATE</literal> privilege on
   the type's schema.  (These restrictions enforce that altering the owner
   doesn't do anything you couldn't do by dropping and recreating the type.
   However, a superuser can alter ownership of any type anyway.)
   To add an attribute or alter an attribute type, you must also
   have <literal>USAGE</literal> privilege on the attribute's data type.
  </para>
________________________________________________________-->
  <para>
   要使用<command>ALTER TYPE</command>，你必须拥有该类型。要更改
   一个类型的模式，你还必须拥有新模式上的
   <literal>CREATE</literal>特权。要更改拥有者，你还必须
   是新拥有角色的一个直接或者间接成员，并且该角色必须具有该类型的模式上的
   <literal>CREATE</literal>特权（这些限制强制修改拥有者不能做一些通过删除和重
   建该类型做不到的事情。不过，一个超级用户怎么都能更改任何类型的所有权。）。
   要增加一个属性或者修改一个属性类型，你还必须具有该属性数据类型上的
   <literal>USAGE</literal>特权。
  </para>
<!-- pgdoc-cn_end sig_en=df4bf2e409abc75d9294411e6d37317b -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

<!-- pgdoc-cn_start sig_en=f80805a28f696776aec219a1282072aa sig_cn_org=None source=14.1 
   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        The name (possibly schema-qualified) of an existing type to
        alter.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_name</replaceable></term>
      <listitem>
       <para>
        The new name for the type.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_owner</replaceable></term>
      <listitem>
       <para>
        The user name of the new owner of the type.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_schema</replaceable></term>
      <listitem>
       <para>
        The new schema for the type.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">attribute_name</replaceable></term>
      <listitem>
       <para>
        The name of the attribute to add, alter, or drop.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_attribute_name</replaceable></term>
      <listitem>
       <para>
        The new name of the attribute to be renamed.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">data_type</replaceable></term>
      <listitem>
       <para>
        The data type of the attribute to add, or the new type of the
        attribute to alter.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_enum_value</replaceable></term>
      <listitem>
       <para>
        The new value to be added to an enum type's list of values,
        or the new name to be given to an existing value.
        Like all enum literals, it needs to be quoted.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">neighbor_enum_value</replaceable></term>
      <listitem>
       <para>
        The existing enum value that the new value should be added immediately
        before or after in the enum type's sort ordering.
        Like all enum literals, it needs to be quoted.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">existing_enum_value</replaceable></term>
      <listitem>
       <para>
        The existing enum value that should be renamed.
        Like all enum literals, it needs to be quoted.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">property</replaceable></term>
      <listitem>
       <para>
        The name of a base-type property to be modified; see above for
        possible values.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CASCADE</literal></term>
      <listitem>
       <para>
        Automatically propagate the operation to typed tables of the
        type being altered, and their descendants.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>RESTRICT</literal></term>
      <listitem>
       <para>
        Refuse the operation if the type being altered is the type of a
        typed table.  This is the default.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
________________________________________________________-->
   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        要修改的一个现有类型的名称（可能被模式限定）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_name</replaceable></term>
      <listitem>
       <para>
        该类型的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_owner</replaceable></term>
      <listitem>
       <para>
        该类型新拥有者的用户名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_schema</replaceable></term>
      <listitem>
       <para>
        该类型的新模式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">attribute_name</replaceable></term>
      <listitem>
       <para>
        要增加、修改或者删除的属性名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_attribute_name</replaceable></term>
      <listitem>
       <para>
        要被重命名的属性的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">data_type</replaceable></term>
      <listitem>
       <para>
        要增加的属性的数据类型，或者是要修改的属性的新类型。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">new_enum_value</replaceable></term>
      <listitem>
       <para>
        要被增加到一个枚举类型的值列表的新值，或将赋予现有值的新名称。
    和所有枚举文本一样，它需要被引号引用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">neighbor_enum_value</replaceable></term>
      <listitem>
       <para>
        一个现有枚举值，新值应该被增加在紧接着该枚举值之前或者
        之后的位置上。和所有枚举文本一样，它需要被引号引用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">existing_enum_value</replaceable></term>
      <listitem>
       <para>
        现有的应该重命名的枚举值。和所有的枚举文本一样，它需要被引号引用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">property</replaceable></term>
      <listitem>
       <para>
        要修改的基本类型属性的名称； 参见上面的可能值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CASCADE</literal></term>
      <listitem>
       <para>
        自动将操作传播到被更改类型的类型表及其后代。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>RESTRICT</literal></term>
      <listitem>
       <para>
        如果被更改的类型是类型表的类型，则拒绝该操作。这是默认设置。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
<!-- pgdoc-cn_end sig_en=f80805a28f696776aec219a1282072aa -->
  </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

<!-- pgdoc-cn_start sig_en=35be54d2b32fe41e264c9280b872b5a2 sig_cn_org=None source=14.1 
  <para>
   If <command>ALTER TYPE ... ADD VALUE</command> (the form that adds a new
   value to an enum type) is executed inside a transaction block, the new
   value cannot be used until after the transaction has been committed.
  </para>
________________________________________________________-->
  <para>
   如果<command>ALTER TYPE ... ADD VALUE</command>（增加一个新值到枚举类型的形式）
   不能在一个事务块中执行，新值不能被使用直到事务被提交之后。
  </para>
<!-- pgdoc-cn_end sig_en=35be54d2b32fe41e264c9280b872b5a2 -->

<!-- pgdoc-cn_start sig_en=4564f4642d1d157f5c839cd8b229c115 sig_cn_org=1b28fea4ac8f21487ca0fe20c42afec4 source=15.7 
  <para>
   Comparisons involving an added enum value will sometimes be slower than
   comparisons involving only original members of the enum type.  This will
   usually only occur if <literal>BEFORE</literal> or <literal>AFTER</literal>
   is used to set the new value's sort position somewhere other than at the
   end of the list.  However, sometimes it will happen even though the new
   value is added at the end (this occurs if the OID counter <quote>wrapped
   around</quote> since the original creation of the enum type).  The slowdown is
   usually insignificant; but if it matters, optimal performance can be
   regained by dropping and recreating the enum type, or by dumping and
   restoring the database.
  </para>
________________________________________________________-->
  <para>
   涉及添加枚举值的比较有时会比仅涉及枚举类型的原始成员的比较慢。这通常仅在使用 <literal>BEFORE</literal>或<literal>AFTER</literal> 将新值的排序位置设置在列表末尾以外的某个位置时才会发生。
   但是，有时即使将新值添加到末尾也会发生这种情况（如果 OID 计数器自最初创建枚举类型以来<quote>wrapped around</quote>，则会发生这种情况）。
   速度减慢通常微不足道；但如果这很重要，可以通过删除并重新创建枚举类型或转储并恢复数据库来恢复最佳性能。
</para>
<!-- pgdoc-cn_end sig_en=4564f4642d1d157f5c839cd8b229c115 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>示例</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=24adfb202db0872edf746fb8cc0ee6ee sig_cn_org=None source=14.1 
  <para>
   To rename a data type:
<programlisting>
ALTER TYPE electronic_mail RENAME TO email;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   要重命名一个数据类型：
<programlisting>
ALTER TYPE electronic_mail RENAME TO email;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=24adfb202db0872edf746fb8cc0ee6ee -->

<!-- pgdoc-cn_start sig_en=669f6a4a22b1f7525c0436e563907605 sig_cn_org=None source=14.1 
  <para>
   To change the owner of the type <literal>email</literal>
   to <literal>joe</literal>:
<programlisting>
ALTER TYPE email OWNER TO joe;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   把类型<literal>email</literal>的拥有者改为
   <literal>joe</literal>：
<programlisting>
ALTER TYPE email OWNER TO joe;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=669f6a4a22b1f7525c0436e563907605 -->

<!-- pgdoc-cn_start sig_en=fabf12af07cc8cfd282ee038780c33e7 sig_cn_org=None source=14.1 
  <para>
   To change the schema of the type <literal>email</literal>
   to <literal>customers</literal>:
<programlisting>
ALTER TYPE email SET SCHEMA customers;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   把类型<literal>email</literal>的模式改为
   <literal>customers</literal>：
<programlisting>
ALTER TYPE email SET SCHEMA customers;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=fabf12af07cc8cfd282ee038780c33e7 -->

<!-- pgdoc-cn_start sig_en=aff6dcdf687d69e23e4424c690f65408 sig_cn_org=None source=14.1 
  <para>
   To add a new attribute to a composite type:
<programlisting>
ALTER TYPE compfoo ADD ATTRIBUTE f3 int;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   增加一个新属性到一个复合类型：
<programlisting>
ALTER TYPE compfoo ADD ATTRIBUTE f3 int;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=aff6dcdf687d69e23e4424c690f65408 -->

<!-- pgdoc-cn_start sig_en=1dfcf7d5bb36b5f9ed31ff8308853e50 sig_cn_org=None source=14.1 
  <para>
   To add a new value to an enum type in a particular sort position:
<programlisting>
ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
</programlisting>
  </para>
________________________________________________________-->
  <para>
   在一个特定的排序位置上为一个枚举类型增加一个新值：
<programlisting>
ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=1dfcf7d5bb36b5f9ed31ff8308853e50 -->

<!-- pgdoc-cn_start sig_en=e8cb1e84ce583f4abdb34ca116a23224 sig_cn_org=None source=14.1 
  <para>
   To rename an enum value:
<programlisting>
ALTER TYPE colors RENAME VALUE 'purple' TO 'mauve';
</programlisting>
  </para>
________________________________________________________-->
  <para>
   重命名一个枚举值：
<programlisting>
ALTER TYPE colors RENAME VALUE 'purple' TO 'mauve';
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=e8cb1e84ce583f4abdb34ca116a23224 -->

<!-- pgdoc-cn_start sig_en=cea9e2a7e367db6f2bbcb1c94105e229 sig_cn_org=None source=14.1 
  <para>
   To create binary I/O functions for an existing base type:
<programlisting>
CREATE FUNCTION mytypesend(mytype) RETURNS bytea ...;
CREATE FUNCTION mytyperecv(internal, oid, integer) RETURNS mytype ...;
ALTER TYPE mytype SET (
    SEND = mytypesend,
    RECEIVE = mytyperecv
);
</programlisting></para>
________________________________________________________-->
  <para>
   要为现有基本类型创建二进制I/O函数：
<programlisting>
CREATE FUNCTION mytypesend(mytype) RETURNS bytea ...;
CREATE FUNCTION mytyperecv(internal, oid, integer) RETURNS mytype ...;
ALTER TYPE mytype SET (
    SEND = mytypesend,
    RECEIVE = mytyperecv
);
</programlisting></para>
<!-- pgdoc-cn_end sig_en=cea9e2a7e367db6f2bbcb1c94105e229 -->
 </refsect1>

 <refsect1>
<!-- pgdoc-cn_start sig_en=b38d493f3c2d2d5d9a7a49d257da9811 sig_cn_org=None source=14.1 
  <title>Compatibility</title>
________________________________________________________-->
  <title>兼容性</title>
<!-- pgdoc-cn_end sig_en=b38d493f3c2d2d5d9a7a49d257da9811 -->

<!-- pgdoc-cn_start sig_en=f7935a4341db81693ffd453e7c28e111 sig_cn_org=None source=14.1 
  <para>
   The variants to add and drop attributes are part of the SQL
   standard; the other variants are PostgreSQL extensions.
  </para>
________________________________________________________-->
  <para>
   增加和删除属性的变体是 SQL 标准的一部分，而其他变体是
   PostgreSQL 扩展。
  </para>
<!-- pgdoc-cn_end sig_en=f7935a4341db81693ffd453e7c28e111 -->
 </refsect1>

 <refsect1 id="sql-altertype-see-also">
<!-- pgdoc-cn_start sig_en=8b7cc214676b443e6527e3d6bf054420 sig_cn_org=None source=14.1 
  <title>See Also</title>
________________________________________________________-->
  <title>另见</title>
<!-- pgdoc-cn_end sig_en=8b7cc214676b443e6527e3d6bf054420 -->

  <simplelist type="inline">
   <member><xref linkend="sql-createtype"/></member>
   <member><xref linkend="sql-droptype"/></member>
  </simplelist>
 </refsect1>
</refentry>
