<!-- doc/src/sgml/rowtypes.sgml -->

<sect1 id="rowtypes">
<!-- pgdoc-cn_start sig_en=f3b2f5a3e6cd2d4f9d699f2b3ad65cc7 sig_cn_org=None source=14.1 
 <title>Composite Types</title>
________________________________________________________-->
 <title>组合类型</title>
<!-- pgdoc-cn_end sig_en=f3b2f5a3e6cd2d4f9d699f2b3ad65cc7 -->

<!-- pgdoc-cn_start sig_en=7ff61ee67df2326c23e7e47172f34fb5 sig_cn_org=None source=14.1 
 <indexterm>
  <primary>composite type</primary>
 </indexterm>
________________________________________________________-->
 <indexterm>
  <primary>组合类型</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=7ff61ee67df2326c23e7e47172f34fb5 -->

<!-- pgdoc-cn_start sig_en=736157cba8373c15d307e84f66140ce7 sig_cn_org=None source=14.1 
 <indexterm>
  <primary>row type</primary>
 </indexterm>
________________________________________________________-->
 <indexterm>
  <primary>行类型</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=736157cba8373c15d307e84f66140ce7 -->

<!-- pgdoc-cn_start sig_en=952553e1856a1d7dc9cd0c37fef890fc sig_cn_org=None source=14.1 
 <para>
  A <firstterm>composite type</firstterm> represents the structure of a row or record;
  it is essentially just a list of field names and their data types.
  <productname>PostgreSQL</productname> allows  composite types to be
  used in many of the same ways that simple types can be used.  For example, a
  column of a table can be declared to be of a composite type.
 </para>
________________________________________________________-->
 <para>
  一个<firstterm>组合类型</firstterm>表示一行或一个记录的结构，它本质上就是一个域名和它们数据类型的列表。<productname>PostgreSQL</productname>允许把组合类型用在很多能用简单类型的地方。例如，一个表的一列可以被声明为一种组合类型。
 </para>
<!-- pgdoc-cn_end sig_en=952553e1856a1d7dc9cd0c37fef890fc -->

 <sect2 id="rowtypes-declaring">
<!-- pgdoc-cn_start sig_en=70f2d3fa8137968e4e81c9ae80fad021 sig_cn_org=None source=14.1 
  <title>Declaration of Composite Types</title>
________________________________________________________-->
  <title>组合类型的声明</title>
<!-- pgdoc-cn_end sig_en=70f2d3fa8137968e4e81c9ae80fad021 -->

<!-- pgdoc-cn_start sig_en=c9a08b9644f34e9ac659f33803ca7614 sig_cn_org=None source=14.1 
 <para>
  Here are two simple examples of defining composite types:
<programlisting>
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</programlisting>
  The syntax is comparable to <command>CREATE TABLE</command>, except that only
  field names and types can be specified; no constraints (such as <literal>NOT
  NULL</literal>) can presently be included.  Note that the <literal>AS</literal> keyword
  is essential; without it, the system will think a different kind
  of <command>CREATE TYPE</command> command is meant, and you will get odd syntax
  errors.
 </para>
________________________________________________________-->
 <para>
  这里有两个定义组合类型的简单例子：
<programlisting>
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</programlisting>
  该语法堪比<command>CREATE TABLE</command>，不过只能指定域名和类型，当前不能包括约束（例如<literal>NOT NULL</literal>）。注意<literal>AS</literal>关键词是必不可少的，如果没有它，系统将认为用户想要的是一种不同类型的<command>CREATE TYPE</command>命令，并且你将得到奇怪的语法错误。
 </para>
<!-- pgdoc-cn_end sig_en=c9a08b9644f34e9ac659f33803ca7614 -->

<!-- pgdoc-cn_start sig_en=f64b5c9a21c3870872b06b9419dc03fc sig_cn_org=None source=14.1 
 <para>
  Having defined the types, we can use them to create tables:

<programlisting>
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</programlisting>

  or functions:

<programlisting>
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</programlisting>

 </para>
________________________________________________________-->
 <para>
  定义了类型之后，我们可以用它们来创建表：

<programlisting>
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</programlisting>

  或函数:

<programlisting>
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</programlisting>

 </para>
<!-- pgdoc-cn_end sig_en=f64b5c9a21c3870872b06b9419dc03fc -->

<!-- pgdoc-cn_start sig_en=2d970cd256f7b066450d77bb39786a7a sig_cn_org=8c5016ddae9294e56cec8863e6b511a1 source=15.7 
 <para>
  Whenever you create a table, a composite type is also automatically
  created, with the same name as the table, to represent the table's
  row type.  For example, had we said:
<programlisting>
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</programlisting>
  then the same <literal>inventory_item</literal> composite type shown above would
  come into being as a
  byproduct, and could be used just as above.  Note however an important
  restriction of the current implementation: since no constraints are
  associated with a composite type, the constraints shown in the table
  definition <emphasis>do not apply</emphasis> to values of the composite type
  outside the table.  (To work around this, create a
  <glossterm linkend="glossary-domain">domain</glossterm> over the composite
  type, and apply the desired constraints as <literal>CHECK</literal>
  constraints of the domain.)
 </para>
________________________________________________________-->
 <para>
  每当您创建一个表时，还会自动创建一个复合类型，与表同名，用于表示表的行类型。例如，如果我们说：
<programlisting>
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</programlisting>
  那么与上面显示的相同的<literal>inventory_item</literal>复合类型也会随之产生，并且可以像上面那样使用。
  但是请注意当前实现的一个重要限制：由于复合类型没有关联的约束，因此在表之外的复合类型的值上<emphasis>不适用</emphasis>表定义中显示的约束。
  （要解决这个问题，创建一个覆盖复合类型的<literal>CHECK</literal>约束的<glossterm linkend="glossary-domain">域</glossterm>，并将所需的约束应用于该域。）
 </para>
<!-- pgdoc-cn_end sig_en=2d970cd256f7b066450d77bb39786a7a -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=6a8a7bed68ad146b8d31f28fa0a74ff1 sig_cn_org=None source=14.1 
  <title>Constructing Composite Values</title>
________________________________________________________-->
  <title>构造组合值</title>
<!-- pgdoc-cn_end sig_en=6a8a7bed68ad146b8d31f28fa0a74ff1 -->

<!-- pgdoc-cn_start sig_en=72fced5d29c1b130840123cabea2f414 sig_cn_org=None source=14.1 
  <indexterm>
   <primary>composite type</primary>
   <secondary>constant</secondary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>组合类型</primary>
   <secondary>常量</secondary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=72fced5d29c1b130840123cabea2f414 -->

<!-- pgdoc-cn_start sig_en=a1682036d537c2d4eb25731809133be0 sig_cn_org=None source=14.1 
  <para>
   To write a composite value as a literal constant, enclose the field
   values within parentheses and separate them by commas.  You can put double
   quotes around any field value, and must do so if it contains commas or
   parentheses.  (More details appear <link
   linkend="rowtypes-io-syntax">below</link>.)  Thus, the general format of
   a composite constant is the following:
<synopsis>
'( <replaceable>val1</replaceable> , <replaceable>val2</replaceable> , ... )'
</synopsis>
   An example is:
<programlisting>
'("fuzzy dice",42,1.99)'
</programlisting>
   which would be a valid value of the <literal>inventory_item</literal> type
   defined above.  To make a field be NULL, write no characters at all
   in its position in the list.  For example, this constant specifies
   a NULL third field:
<programlisting>
'("fuzzy dice",42,)'
</programlisting>
   If you want an empty string rather than NULL, write double quotes:
<programlisting>
'("",42,)'
</programlisting>
   Here the first field is a non-NULL empty string, the third is NULL.
  </para>
________________________________________________________-->
  <para>
   要把一个组合值写作一个文字常量，将该域值封闭在圆括号中并且用逗号分隔它们。你可以在任何域值周围放上双引号，并且如果该域值包含逗号或圆括号则必须这样做（更多细节见<link linkend="rowtypes-io-syntax">下文</link>）。这样，一个组合常量的一般格式是下面这样的：
<synopsis>
'( <replaceable>val1</replaceable> , <replaceable>val2</replaceable> , ... )'
</synopsis>
   一个例子是：
<programlisting>
'("fuzzy dice",42,1.99)'
</programlisting>
   这将是上文定义的<literal>inventory_item</literal>类型的一个合法值。要让一个域为 NULL，在列表中它的位置上根本不写字符。例如，这个常量指定其第三个域为 NULL：
<programlisting>
'("fuzzy dice",42,)'
</programlisting>
   如果你写一个空字符串而不是 NULL，写上两个引号：
<programlisting>
'("",42,)'
</programlisting>
   这里第一个域是一个非 NULL 空字符串，第三个是 NULL。
  </para>
<!-- pgdoc-cn_end sig_en=a1682036d537c2d4eb25731809133be0 -->

<!-- pgdoc-cn_start sig_en=5d3b616d4e58e536a5897caf012cb0e2 sig_cn_org=None source=14.1 
  <para>
   (These constants are actually only a special case of
   the generic type constants discussed in <xref
   linkend="sql-syntax-constants-generic"/>.  The constant is initially
   treated as a string and passed to the composite-type input conversion
   routine.  An explicit type specification might be necessary to tell
   which type to convert the constant to.)
  </para>
________________________________________________________-->
  <para>
   （这些常量实际上只是<xref linkend="sql-syntax-constants-generic"/>中讨论的一般类型常量的特殊类型。该常量最初被当做一个字符串并且被传递给组合类型输入转换例程。有必要用一次显式类型说明来告知要把该常量转换成何种类型。）。
  </para>
<!-- pgdoc-cn_end sig_en=5d3b616d4e58e536a5897caf012cb0e2 -->

<!-- pgdoc-cn_start sig_en=982c34ad378d3ede5c00f36a2cf37681 sig_cn_org=None source=14.1 
 <para>
  The <literal>ROW</literal> expression syntax can also be used to
  construct composite values.  In most cases this is considerably
  simpler to use than the string-literal syntax since you don't have
  to worry about multiple layers of quoting.  We already used this
  method above:
<programlisting>
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</programlisting>
  The ROW keyword is actually optional as long as you have more than one
  field in the expression, so these can be simplified to:
<programlisting>
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</programlisting>
  The <literal>ROW</literal> expression syntax is discussed in more detail in <xref
  linkend="sql-syntax-row-constructors"/>.
 </para>
________________________________________________________-->
 <para>
  <literal>ROW</literal>表达式也能被用来构建组合值。在大部分情况下，比起使用字符串语法，这相当简单易用，因为你不必担心多层引用。我们已经在上文用过这种方法：
<programlisting>
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</programlisting>
  只要在表达式中有多于一个域，ROW 关键词实际上就是可选的，因此这些可以被简化成：
<programlisting>
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</programlisting>
  <xref linkend="sql-syntax-row-constructors"/>中更加详细地讨论了<literal>ROW</literal>表达式语法。
 </para>
<!-- pgdoc-cn_end sig_en=982c34ad378d3ede5c00f36a2cf37681 -->
 </sect2>

 <sect2 id="rowtypes-accessing">
<!-- pgdoc-cn_start sig_en=6886d265ac7fe216cefcb7822fba53d8 sig_cn_org=None source=14.1 
  <title>Accessing Composite Types</title>
________________________________________________________-->
  <title>访问组合类型</title>
<!-- pgdoc-cn_end sig_en=6886d265ac7fe216cefcb7822fba53d8 -->

<!-- pgdoc-cn_start sig_en=71c92a3cd3edba99c5b13be101975c67 sig_cn_org=None source=14.1 
 <para>
  To access a field of a composite column, one writes a dot and the field
  name, much like selecting a field from a table name.  In fact, it's so
  much like selecting from a table name that you often have to use parentheses
  to keep from confusing the parser.  For example, you might try to select
  some subfields from our <literal>on_hand</literal> example table with something
  like:

<programlisting>
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</programlisting>

  This will not work since the name <literal>item</literal> is taken to be a table
  name, not a column name of <literal>on_hand</literal>, per SQL syntax rules.
  You must write it like this:

<programlisting>
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</programlisting>

  or if you need to use the table name as well (for instance in a multitable
  query), like this:

<programlisting>
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</programlisting>

  Now the parenthesized object is correctly interpreted as a reference to
  the <literal>item</literal> column, and then the subfield can be selected from it.
 </para>
________________________________________________________-->
 <para>
  要访问一个组合列的一个域，可以写成一个点和域的名称，更像从一个表名中选择一个域。事实上，它太像从一个表名中选择，这样我们不得不使用圆括号来避免让解析器混淆。例如，你可能尝试从例子表<literal>on_hand</literal>中选取一些子域：

<programlisting>
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</programlisting>

  这不会有用，因为名称<literal>item</literal>会被当成是一个表名，而不是<literal>on_hand</literal>的一个列名。你必须写成这样：

<programlisting>
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</programlisting>

  或者你还需要使用表名（例如在一个多表查询中），像这样：

<programlisting>
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</programlisting>

  现在加上括号的对象就被正确地解释为对<literal>item</literal>列的引用，然后可以从中选出子域。
 </para>
<!-- pgdoc-cn_end sig_en=71c92a3cd3edba99c5b13be101975c67 -->

<!-- pgdoc-cn_start sig_en=9c2b2145a8c5da11a81fda75f33229da sig_cn_org=None source=14.1 
 <para>
  Similar syntactic issues apply whenever you select a field from a composite
  value.  For instance, to select just one field from the result of a function
  that returns a composite value, you'd need to write something like:

<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>

  Without the extra parentheses, this will generate a syntax error.
 </para>
________________________________________________________-->
 <para>
  只要你从一个组合值中选择一个域，相似的语法问题就适用。例如，要从一个返回组合值的函数的结果中选取一个域，你需要这样写：

<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>

  如果没有额外的圆括号，这将生成一个语法错误。
 </para>
<!-- pgdoc-cn_end sig_en=9c2b2145a8c5da11a81fda75f33229da -->

<!-- pgdoc-cn_start sig_en=999d1ad41bf6e3b8f580396ca82b5083 sig_cn_org=None source=14.1 
 <para>
  The special field name <literal>*</literal> means <quote>all fields</quote>, as
  further explained in <xref linkend="rowtypes-usage"/>.
 </para>
________________________________________________________-->
 <para>
  特殊的域名称<literal>*</literal>表示<quote>所有的域</quote>，<xref linkend="rowtypes-usage"/>中有进一步的解释。
 </para>
<!-- pgdoc-cn_end sig_en=999d1ad41bf6e3b8f580396ca82b5083 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=600084c1a8f350fbe486da715fa9699f sig_cn_org=None source=14.1 
  <title>Modifying Composite Types</title>
________________________________________________________-->
  <title>修改组合类型</title>
<!-- pgdoc-cn_end sig_en=600084c1a8f350fbe486da715fa9699f -->

<!-- pgdoc-cn_start sig_en=1ca68fe358ee227983c1905b09c4979d sig_cn_org=None source=14.1 
 <para>
  Here are some examples of the proper syntax for inserting and updating
  composite columns.
  First, inserting or updating a whole column:

<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>

  The first example omits <literal>ROW</literal>, the second uses it; we
  could have done it either way.
 </para>
________________________________________________________-->
 <para>
  这里有一些插入和更新组合列的正确语法的例子。首先，插入或者更新一整个列：

<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>

  第一个例子忽略<literal>ROW</literal>，第二个例子使用它，我们可以用两者之一完成。
 </para>
<!-- pgdoc-cn_end sig_en=1ca68fe358ee227983c1905b09c4979d -->

<!-- pgdoc-cn_start sig_en=977518903bb14e2b057ae949c3e68b03 sig_cn_org=None source=14.1 
 <para>
  We can update an individual subfield of a composite column:

<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>

  Notice here that we don't need to (and indeed cannot)
  put parentheses around the column name appearing just after
  <literal>SET</literal>, but we do need parentheses when referencing the same
  column in the expression to the right of the equal sign.
 </para>
________________________________________________________-->
 <para>
  我们能够更新一个组合列的单个子域：

<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>

  注意这里我们不需要（事实上也不能）把圆括号放在正好出现在<literal>SET</literal>之后的列名周围，但是当在等号右边的表达式中引用同一列时确实需要圆括号。
 </para>
<!-- pgdoc-cn_end sig_en=977518903bb14e2b057ae949c3e68b03 -->

<!-- pgdoc-cn_start sig_en=2453f49b2c58e9250ca912458e2cb6b8 sig_cn_org=None source=14.1 
 <para>
  And we can specify subfields as targets for <command>INSERT</command>, too:

<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>

  Had we not supplied values for all the subfields of the column, the
  remaining subfields would have been filled with null values.
 </para>
________________________________________________________-->
 <para>
  并且我们也可以指定子域作为<command>INSERT</command>的目标：

<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>

  如果我们没有为该列的所有子域提供值，剩下的子域将用空值填充。
 </para>
<!-- pgdoc-cn_end sig_en=2453f49b2c58e9250ca912458e2cb6b8 -->
 </sect2>

 <sect2 id="rowtypes-usage">
<!-- pgdoc-cn_start sig_en=72db3bf4f5d6c94cff4aa8c6378795fd sig_cn_org=None source=14.1 
  <title>Using Composite Types in Queries</title>
________________________________________________________-->
  <title>在查询中使用组合类型</title>
<!-- pgdoc-cn_end sig_en=72db3bf4f5d6c94cff4aa8c6378795fd -->

<!-- pgdoc-cn_start sig_en=d7094d0d08d24714a53c51282a3dc1d5 sig_cn_org=None source=14.1 
  <para>
   There are various special syntax rules and behaviors associated with
   composite types in queries.  These rules provide useful shortcuts,
   but can be confusing if you don't know the logic behind them.
  </para>
________________________________________________________-->
  <para>
   对于查询中的组合类型有各种特殊的语法规则和行为。这些规则提供了有用的捷径，但是如果你不懂背后的逻辑就会被此困扰。
  </para>
<!-- pgdoc-cn_end sig_en=d7094d0d08d24714a53c51282a3dc1d5 -->

<!-- pgdoc-cn_start sig_en=f2eff949402510882d6da00f7a15626f sig_cn_org=None source=14.1 
  <para>
   In <productname>PostgreSQL</productname>, a reference to a table name (or alias)
   in a query is effectively a reference to the composite value of the
   table's current row.  For example, if we had a table
   <structname>inventory_item</structname> as shown
   <link linkend="rowtypes-declaring">above</link>, we could write:
<programlisting>
SELECT c FROM inventory_item c;
</programlisting>
   This query produces a single composite-valued column, so we might get
   output like:
<programlisting>
           c
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 ("fuzzy dice",42,1.99)
(1 row)
</programlisting>
   Note however that simple names are matched to column names before table
   names, so this example works only because there is no column
   named <structfield>c</structfield> in the query's tables.
  </para>
________________________________________________________-->
  <para>
   在<productname>PostgreSQL</productname>中，查询中对一个表名（或别名）的引用实际上是对该表的当前行的组合值的引用。例如，如果我们有一个如<link linkend="rowtypes-declaring">上</link>所示的表<structname>inventory_item</structname>，我们可以写：
<programlisting>
SELECT c FROM inventory_item c;
</programlisting>
   这个查询产生一个单一组合值列，所以我们会得到这样的输出：
<programlisting>
           c
------------------------
 ("fuzzy dice",42,1.99)
(1 row)
</programlisting>
   不过要注意简单的名称会在表名之前先匹配到列名，因此这个例子可行的原因仅仅是因为在该查询的表中没有名为<structfield>c</structfield>的列。
  </para>
<!-- pgdoc-cn_end sig_en=f2eff949402510882d6da00f7a15626f -->

<!-- pgdoc-cn_start sig_en=391dc211dc765b681475c9c1ec0ac11d sig_cn_org=None source=14.1 
  <para>
   The ordinary qualified-column-name
   syntax <replaceable>table_name</replaceable><literal>.</literal><replaceable>column_name</replaceable>
   can be understood as applying <link linkend="field-selection">field
   selection</link> to the composite value of the table's current row.
   (For efficiency reasons, it's not actually implemented that way.)
  </para>
________________________________________________________-->
  <para>
   普通的限定列名语法<replaceable>table_name</replaceable><literal>.</literal><replaceable>column_name</replaceable>可以理解为把<link linkend="field-selection">字段选择</link>应用在该表的当前行的组合值上（由于效率的原因，实际上不是以这种方式实现）。
  </para>
<!-- pgdoc-cn_end sig_en=391dc211dc765b681475c9c1ec0ac11d -->

<!-- pgdoc-cn_start sig_en=2fb8d7fa1d07aebe0754a92c3950546c sig_cn_org=None source=14.1 
  <para>
   When we write
<programlisting>
SELECT c.* FROM inventory_item c;
</programlisting>
   then, according to the SQL standard, we should get the contents of the
   table expanded into separate columns:
<programlisting>
    name    | supplier_id | price
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-
 fuzzy dice |          42 |  1.99
(1 row)
</programlisting>
   as if the query were
<programlisting>
SELECT c.name, c.supplier_id, c.price FROM inventory_item c;
</programlisting>
   <productname>PostgreSQL</productname> will apply this expansion behavior to
   any composite-valued expression, although as shown <link
   linkend="rowtypes-accessing">above</link>, you need to write parentheses
   around the value that <literal>.*</literal> is applied to whenever it's not a
   simple table name.  For example, if <function>myfunc()</function> is a function
   returning a composite type with columns <structfield>a</structfield>,
   <structfield>b</structfield>, and <structfield>c</structfield>, then these two queries have the
   same result:
<programlisting>
SELECT (myfunc(x)).* FROM some_table;
SELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c FROM some_table;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   当我们写
<programlisting>
SELECT c.* FROM inventory_item c;
</programlisting>
   时，根据SQL标准，我们应该得到该表展开成列的内容：
<programlisting>
    name    | supplier_id | price
------------+-------------+-------
 fuzzy dice |          42 |  1.99
(1 row)
</programlisting>
   就好像查询是
<programlisting>
SELECT c.name, c.supplier_id, c.price FROM inventory_item c;
</programlisting>
   尽管如<link linkend="rowtypes-accessing">上</link>所示，<productname>PostgreSQL</productname>将对任何组合值表达式应用这种展开行为，但只要<literal>.*</literal>所应用的值不是一个简单的表名，你就需要把该值写在圆括号内。例如，如果<function>myfunc()</function>是一个返回组合类型的函数，该组合类型由列<structfield>a</structfield>、<structfield>b</structfield>和<structfield>c</structfield>组成，那么这两个查询有相同的结果：
<programlisting>
SELECT (myfunc(x)).* FROM some_table;
SELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c FROM some_table;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=2fb8d7fa1d07aebe0754a92c3950546c -->

  <tip>
<!-- pgdoc-cn_start sig_en=b6808614941d0f090517c03e0e9184d6 sig_cn_org=None source=14.1 
   <para>
    <productname>PostgreSQL</productname> handles column expansion by
    actually transforming the first form into the second.  So, in this
    example, <function>myfunc()</function> would get invoked three times per row
    with either syntax.  If it's an expensive function you may wish to
    avoid that, which you can do with a query like:
<programlisting>
SELECT m.* FROM some_table, LATERAL myfunc(x) AS m;
</programlisting>
    Placing the function in
    a <literal>LATERAL</literal> <literal>FROM</literal> item keeps it from
    being invoked more than once per row.  <literal>m.*</literal> is still
    expanded into <literal>m.a, m.b, m.c</literal>, but now those variables
    are just references to the output of the <literal>FROM</literal> item.
    (The <literal>LATERAL</literal> keyword is optional here, but we show it
    to clarify that the function is getting <structfield>x</structfield>
    from <structname>some_table</structname>.)
   </para>
________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>实际上通过将第一种形式转换为第二种来处理列展开。因此，在这个例子中，用两种语法时对每行都会调用<function>myfunc()</function>三次。如果它是一个开销很大的函数，你可能希望避免这样做，所以可以用一个这样的查询：
<programlisting>
SELECT m.* FROM some_table, LATERAL myfunc(x) AS m;
</programlisting>
    把该函数放在一个<literal>LATERAL</literal> <literal>FROM</literal>项中会防止它对每一行被调用超过一次。<literal>m.*</literal>仍然会被展开为<literal>m.a, m.b, m.c</literal>，但现在那些变量只是对这个<literal>FROM</literal>项的输出的引用（这里关键词<literal>LATERAL</literal>是可选的，但我们在这里写上它是为了说明该函数从<structname>some_table</structname>中得到<structfield>x</structfield>）。
   </para>
<!-- pgdoc-cn_end sig_en=b6808614941d0f090517c03e0e9184d6 -->
  </tip>

<!-- pgdoc-cn_start sig_en=aa81553b5c28955d7c3ef341325ffefb sig_cn_org=None source=14.1 
  <para>
   The <replaceable>composite_value</replaceable><literal>.*</literal> syntax results in
   column expansion of this kind when it appears at the top level of
   a <link linkend="queries-select-lists"><command>SELECT</command> output
   list</link>, a <link linkend="dml-returning"><literal>RETURNING</literal>
   list</link> in <command>INSERT</command>/<command>UPDATE</command>/<command>DELETE</command>,
   a <link linkend="queries-values"><literal>VALUES</literal> clause</link>, or
   a <link linkend="sql-syntax-row-constructors">row constructor</link>.
   In all other contexts (including when nested inside one of those
   constructs), attaching <literal>.*</literal> to a composite value does not
   change the value, since it means <quote>all columns</quote> and so the
   same composite value is produced again.  For example,
   if <function>somefunc()</function> accepts a composite-valued argument,
   these queries are the same:

<programlisting>
SELECT somefunc(c.*) FROM inventory_item c;
SELECT somefunc(c) FROM inventory_item c;
</programlisting>

   In both cases, the current row of <structname>inventory_item</structname> is
   passed to the function as a single composite-valued argument.
   Even though <literal>.*</literal> does nothing in such cases, using it is good
   style, since it makes clear that a composite value is intended.  In
   particular, the parser will consider <literal>c</literal> in <literal>c.*</literal> to
   refer to a table name or alias, not to a column name, so that there is
   no ambiguity; whereas without <literal>.*</literal>, it is not clear
   whether <literal>c</literal> means a table name or a column name, and in fact
   the column-name interpretation will be preferred if there is a column
   named <literal>c</literal>.
  </para>
________________________________________________________-->
  <para>
   当<replaceable>composite_value</replaceable><literal>.*</literal>出现在一个<link linkend="queries-select-lists"><command>SELECT</command>输出列表</link>的顶层中、<command>INSERT</command>/<command>UPDATE</command>/<command>DELETE</command>中的一个<link linkend="dml-returning"><literal>RETURNING</literal>列表</link>中、一个<link linkend="queries-values"><literal>VALUES</literal>子句</link>中或者一个<link linkend="sql-syntax-row-constructors">行构造器</link>中时，该语法会导致这种类型的列展开。在所有其他上下文（包括被嵌入在那些结构之一中时）中，把<literal>.*</literal>附加到一个组合值不会改变该值，因为它表示<quote>所有的列</quote>并且因此同一个组合值会被再次产生。例如，如果<function>somefunc()</function>接受一个组合值参数，这些查询是相同的：

<programlisting>
SELECT somefunc(c.*) FROM inventory_item c;
SELECT somefunc(c) FROM inventory_item c;
</programlisting>

   在两种情况中，<structname>inventory_item</structname>的当前行被传递给该函数作为一个单一的组合值参数。即使<literal>.*</literal>在这类情况中什么也不做，使用它也是一种好的风格，因为它说清了一个组合值的目的是什么。特别地，解析器将会认为<literal>c.*</literal>中的<literal>c</literal>是引用一个表名或别名，而不是一个列名，这样就不会出现混淆。而如果没有<literal>.*</literal>，就弄不清楚<literal>c</literal>到底是表示一个表名还是一个列名，并且在有一个名为<literal>c</literal>的列时会优先选择按列名来解释。
  </para>
<!-- pgdoc-cn_end sig_en=aa81553b5c28955d7c3ef341325ffefb -->

<!-- pgdoc-cn_start sig_en=bb379508580190b1207f7c1fa32d7378 sig_cn_org=None source=14.1 
  <para>
   Another example demonstrating these concepts is that all these queries
   mean the same thing:
<programlisting>
SELECT * FROM inventory_item c ORDER BY c;
SELECT * FROM inventory_item c ORDER BY c.*;
SELECT * FROM inventory_item c ORDER BY ROW(c.*);
</programlisting>
   All of these <literal>ORDER BY</literal> clauses specify the row's composite
   value, resulting in sorting the rows according to the rules described
   in <xref linkend="composite-type-comparison"/>.  However,
   if <structname>inventory_item</structname> contained a column
   named <structfield>c</structfield>, the first case would be different from the
   others, as it would mean to sort by that column only.  Given the column
   names previously shown, these queries are also equivalent to those above:
<programlisting>
SELECT * FROM inventory_item c ORDER BY ROW(c.name, c.supplier_id, c.price);
SELECT * FROM inventory_item c ORDER BY (c.name, c.supplier_id, c.price);
</programlisting>
   (The last case uses a row constructor with the key word <literal>ROW</literal>
   omitted.)
  </para>
________________________________________________________-->
  <para>
   另一个演示这些概念的例子是下面这些查询，它们表示相同的东西：
<programlisting>
SELECT * FROM inventory_item c ORDER BY c;
SELECT * FROM inventory_item c ORDER BY c.*;
SELECT * FROM inventory_item c ORDER BY ROW(c.*);
</programlisting>
   所有这些<literal>ORDER BY</literal>子句指定该行的组合值，导致根据<xref linkend="composite-type-comparison"/>中介绍的规则对行进行排序。不过，如果<structname>inventory_item</structname>包含一个名为<structfield>c</structfield>的列，第一种情况会不同于其他情况，因为它表示仅按那一列排序。给定之前所示的列名，下面这些查询也等效于上面的那些查询：
<programlisting>
SELECT * FROM inventory_item c ORDER BY ROW(c.name, c.supplier_id, c.price);
SELECT * FROM inventory_item c ORDER BY (c.name, c.supplier_id, c.price);
</programlisting>
   （最后一种情况使用了一个省略关键字<literal>ROW</literal>的行构造器）。
  </para>
<!-- pgdoc-cn_end sig_en=bb379508580190b1207f7c1fa32d7378 -->

<!-- pgdoc-cn_start sig_en=881b6b7302377baaf4484797bfc877fc sig_cn_org=None source=14.1 
  <para>
   Another special syntactical behavior associated with composite values is
   that we can use <firstterm>functional notation</firstterm> for extracting a field
   of a composite value.  The simple way to explain this is that
   the notations <literal><replaceable>field</replaceable>(<replaceable>table</replaceable>)</literal>
   and <literal><replaceable>table</replaceable>.<replaceable>field</replaceable></literal>
   are interchangeable.  For example, these queries are equivalent:

<programlisting>
SELECT c.name FROM inventory_item c WHERE c.price &gt; 1000;
SELECT name(c) FROM inventory_item c WHERE price(c) &gt; 1000;
</programlisting>

   Moreover, if we have a function that accepts a single argument of a
   composite type, we can call it with either notation.  These queries are
   all equivalent:

<programlisting>
SELECT somefunc(c) FROM inventory_item c;
SELECT somefunc(c.*) FROM inventory_item c;
SELECT c.somefunc FROM inventory_item c;
</programlisting>
  </para>
________________________________________________________-->
  <para>
   另一种与组合值相关的特殊语法行为是，我们可以使用<firstterm>函数记法</firstterm>来抽取一个组合值的字段。解释这种行为的简单方式是记法<literal><replaceable>field</replaceable>(<replaceable>table</replaceable>)</literal>和<literal><replaceable>table</replaceable>.<replaceable>field</replaceable></literal>是可以互换的。例如，这些查询是等效的：

<programlisting>
SELECT c.name FROM inventory_item c WHERE c.price &gt; 1000;
SELECT name(c) FROM inventory_item c WHERE price(c) &gt; 1000;
</programlisting>

   此外，如果我们有一个函数接受单一的组合类型参数，我们可以以任意一种记法来调用它。这些查询全都是等效的：

<programlisting>
SELECT somefunc(c) FROM inventory_item c;
SELECT somefunc(c.*) FROM inventory_item c;
SELECT c.somefunc FROM inventory_item c;
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=881b6b7302377baaf4484797bfc877fc -->

<!-- pgdoc-cn_start sig_en=5cc5072a0f2b97ae178eca63d84706f3 sig_cn_org=None source=14.1 
  <para>
   This equivalence between functional notation and field notation
   makes it possible to use functions on composite types to implement
   <quote>computed fields</quote>.
   <indexterm>
    <primary>computed field</primary>
   </indexterm>
   <indexterm>
    <primary>field</primary>
    <secondary>computed</secondary>
   </indexterm>
   An application using the last query above wouldn't need to be directly
   aware that <literal>somefunc</literal> isn't a real column of the table.
  </para>
________________________________________________________-->
  <para>
   这种函数记法和字段记法之间的等效性使得我们可以在组合类型上使用函数来实现<quote>计算字段</quote>。
   <indexterm>
    <primary>computed field</primary>
   </indexterm>
   <indexterm>
    <primary>field</primary>
    <secondary>computed</secondary>
   </indexterm>
   一个使用上述最后一种查询的应用不会直接意识到<literal>somefunc</literal>不是一个真实的表列。
  </para>
<!-- pgdoc-cn_end sig_en=5cc5072a0f2b97ae178eca63d84706f3 -->

  <tip>
<!-- pgdoc-cn_start sig_en=0143e1b166c060a2ac63a080550de927 sig_cn_org=None source=14.1 
   <para>
    Because of this behavior, it's unwise to give a function that takes a
    single composite-type argument the same name as any of the fields of
    that composite type.  If there is ambiguity, the field-name
    interpretation will be chosen if field-name syntax is used, while the
    function will be chosen if function-call syntax is used.  However,
    <productname>PostgreSQL</productname> versions before 11 always chose the
    field-name interpretation, unless the syntax of the call required it to
    be a function call.  One way to force the function interpretation in
    older versions is to schema-qualify the function name, that is, write
    <literal><replaceable>schema</replaceable>.<replaceable>func</replaceable>(<replaceable>compositevalue</replaceable>)</literal>.
   </para>
________________________________________________________-->
   <para>
    由于这种行为，让一个接受单一组合类型参数的函数与该组合类型的任意字段具有相同的名称是不明智的。出现歧义时，如果使用了字段名语法，则字段名解释将被选择，而如果使用的是函数调用语法则会选择函数解释。不过，<productname>PostgreSQL</productname>在版本11之前总是选择字段名解释，除非该调用的语法要求它是一个函数调用。在老的版本中强制函数解释的一种方法是用方案限定函数名，也就是写成<literal><replaceable>schema</replaceable>.<replaceable>func</replaceable>(<replaceable>compositevalue</replaceable>)</literal>。
   </para>
<!-- pgdoc-cn_end sig_en=0143e1b166c060a2ac63a080550de927 -->
  </tip>
 </sect2>

 <sect2 id="rowtypes-io-syntax">
<!-- pgdoc-cn_start sig_en=ad88911c56576ed7c10557d301d64f96 sig_cn_org=None source=14.1 
  <title>Composite Type Input and Output Syntax</title>
________________________________________________________-->
  <title>组合类型输入和输出语法</title>
<!-- pgdoc-cn_end sig_en=ad88911c56576ed7c10557d301d64f96 -->

<!-- pgdoc-cn_start sig_en=157c0f3346dcaea5061e4f6fcaf43a8f sig_cn_org=None source=14.1 
  <para>
   The external text representation of a composite value consists of items that
   are interpreted according to the I/O conversion rules for the individual
   field types, plus decoration that indicates the composite structure.
   The decoration consists of parentheses (<literal>(</literal> and <literal>)</literal>)
   around the whole value, plus commas (<literal>,</literal>) between adjacent
   items.  Whitespace outside the parentheses is ignored, but within the
   parentheses it is considered part of the field value, and might or might not be
   significant depending on the input conversion rules for the field data type.
   For example, in:
<programlisting>
'(  42)'
</programlisting>
   the whitespace will be ignored if the field type is integer, but not if
   it is text.
  </para>
________________________________________________________-->
  <para>
   一个组合值的外部文本表达由根据域类型的 I/O 转换规则解释的项，外加指示组合结构的装饰组成。装饰由整个值周围的圆括号（<literal>(</literal>和<literal>)</literal>），外加相邻项之间的逗号（<literal>,</literal>）组成。圆括号之外的空格会被忽略，但是在圆括号之内空格会被当成域值的一部分，并且根据域数据类型的输入转换规则可能有意义，也可能没有意义。例如，在
<programlisting>
'(  42)'
</programlisting>
   中，如果域类型是整数则空格会被忽略，而如果是文本则空格不会被忽略。
  </para>
<!-- pgdoc-cn_end sig_en=157c0f3346dcaea5061e4f6fcaf43a8f -->

<!-- pgdoc-cn_start sig_en=23823ebf07fbc7d615232eb3b8b32d53 sig_cn_org=None source=14.1 
  <para>
   As shown previously, when writing a composite value you can write double
   quotes around any individual field value.
   You <emphasis>must</emphasis> do so if the field value would otherwise
   confuse the composite-value parser.  In particular, fields containing
   parentheses, commas, double quotes, or backslashes must be double-quoted.
   To put a double quote or backslash in a quoted composite field value,
   precede it with a backslash.  (Also, a pair of double quotes within a
   double-quoted field value is taken to represent a double quote character,
   analogously to the rules for single quotes in SQL literal strings.)
   Alternatively, you can avoid quoting and use backslash-escaping to
   protect all data characters
   that would otherwise be taken as composite syntax.
  </para>
________________________________________________________-->
  <para>
   如前所示，在写一个组合值时，你可以在任意域值周围写上双引号。如果不这样做会让域值迷惑组合值解析器，你就<emphasis>必须</emphasis>这么做。特别地，包含圆括号、逗号、双引号或反斜线的域必须用双引号引用。要把一个双引号或者反斜线放在一个被引用的组合域值中，需要在它前面放上一个反斜线（还有，一个双引号引用的域值中的一对双引号被认为是表示一个双引号字符，这和 SQL 字符串中单引号的规则类似）。另一种办法是，你可以避免引用以及使用反斜线转义来保护所有可能被当作组合语法的数据字符。
  </para>
<!-- pgdoc-cn_end sig_en=23823ebf07fbc7d615232eb3b8b32d53 -->

<!-- pgdoc-cn_start sig_en=b9d0e1e2c48f531ffc1a97c28f29977d sig_cn_org=None source=14.1 
  <para>
   A completely empty field value (no characters at all between the commas
   or parentheses) represents a NULL.  To write a value that is an empty
   string rather than NULL, write <literal>""</literal>.
  </para>
________________________________________________________-->
  <para>
   一个全空的域值（在逗号或圆括号之间完全没有字符）表示一个 NULL。要写一个空字符串值而不是 NULL，可以写成<literal>""</literal>。
  </para>
<!-- pgdoc-cn_end sig_en=b9d0e1e2c48f531ffc1a97c28f29977d -->

<!-- pgdoc-cn_start sig_en=23e65e88e11a28817b1b75ecd8e573b0 sig_cn_org=None source=14.1 
  <para>
   The composite output routine will put double quotes around field values
   if they are empty strings or contain parentheses, commas,
   double quotes, backslashes, or white space.  (Doing so for white space
   is not essential, but aids legibility.)  Double quotes and backslashes
   embedded in field values will be doubled.
  </para>
________________________________________________________-->
  <para>
   如果域值是空串或者包含圆括号、逗号、双引号、反斜线或空格，组合输出例程将在域值周围放上双引号（对空格这样处理并不是不可缺少的，但是可以提高可读性）。嵌入在域值中的双引号及反斜线将被双写。
  </para>
<!-- pgdoc-cn_end sig_en=23e65e88e11a28817b1b75ecd8e573b0 -->

 <note>
<!-- pgdoc-cn_start sig_en=f164d8321a207326d27a1176ed9da8ac sig_cn_org=None source=14.1 
  <para>
   Remember that what you write in an SQL command will first be interpreted
   as a string literal, and then as a composite.  This doubles the number of
   backslashes you need (assuming escape string syntax is used).
   For example, to insert a <type>text</type> field
   containing a double quote and a backslash in a composite
   value, you'd need to write:
<programlisting>
INSERT ... VALUES ('("\"\\")');
</programlisting>
   The string-literal processor removes one level of backslashes, so that
   what arrives at the composite-value parser looks like
   <literal>("\"\\")</literal>.  In turn, the string
   fed to the <type>text</type> data type's input routine
   becomes <literal>"\</literal>.  (If we were working
   with a data type whose input routine also treated backslashes specially,
   <type>bytea</type> for example, we might need as many as eight backslashes
   in the command to get one backslash into the stored composite field.)
   Dollar quoting (see <xref linkend="sql-syntax-dollar-quoting"/>) can be
   used to avoid the need to double backslashes.
  </para>
________________________________________________________-->
  <para>
   记住你在一个 SQL 命令中写的东西将首先被解释为一个字符串，然后才会被解释为一个组合。这就让你所需要的反斜线数量翻倍（假定使用了转义字符串语法）。例如，要在组合值中插入一个含有一个双引号和一个反斜线的<type>text</type>域，你需要写成：
<programlisting>
INSERT ... VALUES ('("\"\\")');
</programlisting>
   字符串处理器会移除一层反斜线，这样在组合值解析器那里看到的就会是<literal>("\"\\")</literal>。接着，字符串被交给<type>text</type>数据类型的输入例程并且变成<literal>"\</literal>（如果我们使用的数据类型的输入例程也会特别处理反斜线，例如<type>bytea</type>，在命令中我们可能需要八个反斜线用来在组合域中存储一个反斜线）。美元引用（见<xref linkend="sql-syntax-dollar-quoting"/>）可以被用来避免双写反斜线。
  </para>
<!-- pgdoc-cn_end sig_en=f164d8321a207326d27a1176ed9da8ac -->
 </note>

 <tip>
<!-- pgdoc-cn_start sig_en=aa67bdea3cbce75ec507fa7a0d20cb6d sig_cn_org=None source=14.1 
  <para>
   The <literal>ROW</literal> constructor syntax is usually easier to work with
   than the composite-literal syntax when writing composite values in SQL
   commands.
   In <literal>ROW</literal>, individual field values are written the same way
   they would be written when not members of a composite.
  </para>
________________________________________________________-->
  <para>
   当在 SQL 命令中书写组合值时，<literal>ROW</literal>构造器语法通常比组合文字语法更容易使用。在<literal>ROW</literal>中，单个域值可以按照平时不是组合值成员的写法来写。
  </para>
<!-- pgdoc-cn_end sig_en=aa67bdea3cbce75ec507fa7a0d20cb6d -->
 </tip>
 </sect2>

</sect1>
