<!-- doc/src/sgml/installation.sgml -->
<!--

The standalone version has some portions that are different from the version
that is integrated into the full documentation set, in particular as regards
links, so that INSTALL.html can be created without links to the main
documentation.  See standalone-profile.xsl for details.

-->

<chapter id="installation">
<!-- pgdoc-cn_start sig_en=fd5f5d8e6c9c75f0d479b85eee2151b7 sig_cn_org=None source=14.1 
 <title>Installation from Source Code</title>
________________________________________________________-->
 <title>从源代码安装</title>
<!-- pgdoc-cn_end sig_en=fd5f5d8e6c9c75f0d479b85eee2151b7 -->

<!-- pgdoc-cn_start sig_en=1762bbe069cba17d6f07a33ca0b2b3ed sig_cn_org=None source=14.1 
 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=1762bbe069cba17d6f07a33ca0b2b3ed -->

 <!-- See also the version of this text in standalone-install.xml -->
<!-- pgdoc-cn_start sig_en=8c502f2dd7747e4249b5662b09f30bde sig_cn_org=None source=14.1 
 <para>
  This chapter describes the installation of
  <productname>PostgreSQL</productname> using the source code
  distribution.  If you are installing a pre-packaged distribution,
  such as an RPM or Debian package, ignore this chapter
  and see <xref linkend="install-binaries" /> instead.
 </para>
________________________________________________________-->
 <para>
  本章的内容描述从源代码发布安装<productname>PostgreSQL</productname>。如果你安装的是打包好的版本如RPM或Debian包，那么请略过这一章，参见<xref linkend="install-binaries" />。
 </para>
<!-- pgdoc-cn_end sig_en=8c502f2dd7747e4249b5662b09f30bde -->

<!-- pgdoc-cn_start sig_en=0bbef2b59e1c03d51e91ddb3bdfa621d sig_cn_org=None source=14.1 
 <para>
  If you are building <productname>PostgreSQL</productname> for Microsoft
  Windows, read this chapter if you intend to build with MinGW or Cygwin;
  but if you intend to build with Microsoft's <productname>Visual
  C++</productname>, see <xref linkend="install-windows"/> instead.
 </para>
________________________________________________________-->
 <para>
  如果在微软Windows上构建PostgreSQL，如果你打算使用MinGW或Cygwin构建，请阅读本章;
  但是如果你打算使用微软的<productname>Visual C++</productname>构建，请参见<xref linkend="install-windows"/>。
 </para>
<!-- pgdoc-cn_end sig_en=0bbef2b59e1c03d51e91ddb3bdfa621d -->

 <sect1 id="install-short">
<!-- pgdoc-cn_start sig_en=5d0a37df4193f52cc0daa18d663bf8d5 sig_cn_org=None source=14.1 
  <title>Short Version</title>
________________________________________________________-->
  <title>简单版</title>
<!-- pgdoc-cn_end sig_en=5d0a37df4193f52cc0daa18d663bf8d5 -->

<!-- pgdoc-cn_start sig_en=f15a90df6d3c0215cf93ebc76c5c9e30 sig_cn_org=c14eafbf3af77932178f12160bbcd56c source=15.7 
  <para>
<synopsis>
./configure
make
su
make install
adduser postgres
mkdir -p /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
   The long version is the rest of this
   <phrase>chapter</phrase>.
  </para>
________________________________________________________-->
  <para>
<synopsis>
./configure
make
su
make install
adduser postgres
mkdir -p /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
   长版本是这个<phrase>章节</phrase>的其余部分。
</para>
<!-- pgdoc-cn_end sig_en=f15a90df6d3c0215cf93ebc76c5c9e30 -->
 </sect1>


 <sect1 id="install-requirements">
<!-- pgdoc-cn_start sig_en=e804d40235801c80bb53864c62e8d042 sig_cn_org=None source=14.1 
  <title>Requirements</title>
________________________________________________________-->
  <title>要求</title>
<!-- pgdoc-cn_end sig_en=e804d40235801c80bb53864c62e8d042 -->

<!-- pgdoc-cn_start sig_en=919a8a0f47495625bd80319fde80924f sig_cn_org=None source=14.1 
  <para>
   In general, a modern Unix-compatible platform should be able to run
   <productname>PostgreSQL</productname>.
   The platforms that had received specific testing at the
   time of release are described in <xref linkend="supported-platforms"/>
   below.
  </para>
________________________________________________________-->
  <para>
   一般说来，一个现代的与 Unix 兼容的平台应该就能运行<productname>PostgreSQL</productname>。 到发布为止已经明确测试过的平台的列表在 <xref linkend="supported-platforms"/>中进行了描述。
  </para>
<!-- pgdoc-cn_end sig_en=919a8a0f47495625bd80319fde80924f -->

<!-- pgdoc-cn_start sig_en=ddb07ec92aac5bec9a5c14b82b141825 sig_cn_org=0c84e2ec0c41be3dc58000ab3c6cccc3 source=15.7 
  <para>
   The following software packages are required for building
   <productname>PostgreSQL</productname>:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

      <acronym>GNU</acronym> <application>make</application> version 3.81 or newer is required; other
      <application>make</application> programs or older <acronym>GNU</acronym> <application>make</application> versions will <emphasis>not</emphasis> work.
      (<acronym>GNU</acronym> <application>make</application> is sometimes installed under
      the name <filename>gmake</filename>.)  To test for <acronym>GNU</acronym>
      <application>make</application> enter:
<screen>
<userinput>make -&minus;version</userinput>
</screen>
     </para>
    </listitem>

    <listitem>
     <para>
      You need an <acronym>ISO</acronym>/<acronym>ANSI</acronym> C compiler (at least
      C99-compliant). Recent
      versions of <productname>GCC</productname> are recommended, but
      <productname>PostgreSQL</productname> is known to build using a wide variety
      of compilers from different vendors.
     </para>
    </listitem>

    <listitem>
     <para>
      <application>tar</application> is required to unpack the source
      distribution, in addition to either
      <application>gzip</application> or <application>bzip2</application>.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

      The <acronym>GNU</acronym> <productname>Readline</productname> library is used by
      default.  It allows <application>psql</application> (the
      PostgreSQL command line SQL interpreter) to remember each
      command you type, and allows you to use arrow keys to recall and
      edit previous commands.  This is very helpful and is strongly
      recommended.  If you don't want to use it then you must specify
      the <option>-&minus;without-readline</option> option to
      <filename>configure</filename>. As an alternative, you can often use the
      BSD-licensed <filename>libedit</filename> library, originally
      developed on <productname>NetBSD</productname>. The
      <filename>libedit</filename> library is
      GNU <productname>Readline</productname>-compatible and is used if
      <filename>libreadline</filename> is not found, or if
      <option>-&minus;with-libedit-preferred</option> is used as an
      option to <filename>configure</filename>. If you are using a package-based
      Linux distribution, be aware that you need both the
      <literal>readline</literal> and <literal>readline-devel</literal> packages, if
      those are separate in your distribution.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

      The <productname>zlib</productname> compression library is
      used by default. If you don't want to use it then you must
      specify the <option>-&minus;without-zlib</option> option to
      <filename>configure</filename>. Using this option disables
      support for compressed archives in <application>pg_dump</application> and
      <application>pg_restore</application>.
     </para>
    </listitem>
   </itemizedlist>
  </para>
________________________________________________________-->
  <para>
   构建<productname>PostgreSQL</productname>需要以下软件包：

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

      需要<acronym>GNU</acronym> <application>make</application>版本3.81或更新版本；其他
      <application>make</application>程序或旧版<acronym>GNU</acronym> <application>make</application>将<emphasis>无法</emphasis>工作。
      （<acronym>GNU</acronym> <application>make</application>有时安装为
      名称<filename>gmake</filename>。）要测试<acronym>GNU</acronym>
      <application>make</application>是否安装，输入：
<screen>
<userinput>make --version</userinput>
</screen>
     </para>
    </listitem>

    <listitem>
     <para>
      需要一个<acronym>ISO</acronym>/<acronym>ANSI</acronym> C编译器（至少符合C99标准）。推荐使用
      最新版本的<productname>GCC</productname>，但
      已知<productname>PostgreSQL</productname>可以使用来自不同供应商的各种编译器进行构建。
     </para>
    </listitem>

    <listitem>
     <para>
      需要<application>tar</application>来解压源代码
      发行版，还需要<application>gzip</application>或<application>bzip2</application>之一。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

      默认使用<acronym>GNU</acronym> <productname>Readline</productname>库。它允许<application>psql</application>（
      PostgreSQL命令行SQL解释器）记住您输入的每个命令，并允许您使用箭头键来回忆和
      编辑以前的命令。这非常有帮助，强烈推荐使用。如果您不想使用它，则必须在
      <filename>configure</filename>中指定<option>--without-readline</option>选项。
      作为替代，您通常可以使用BSD许可的<filename>libedit</filename>库，最初
      在<productname>NetBSD</productname>上开发。如果找不到<filename>libreadline</filename>，或者
      使用<option>--with-libedit-preferred</option>作为
      <filename>configure</filename>的选项，则使用<filename>libedit</filename>库。
      如果您使用基于软件包的Linux发行版，请注意您需要
      <literal>readline</literal>和<literal>readline-devel</literal>包，如果
      在您的发行版中是分开的。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

      默认使用<productname>zlib</productname>压缩库。如果您不想使用它，则必须
      在<filename>configure</filename>中指定<option>--without-zlib</option>选项。
      使用此选项将禁用<application>pg_dump</application>和
      <application>pg_restore</application>中的压缩归档支持。
     </para>
    </listitem>
   </itemizedlist>
  </para>
<!-- pgdoc-cn_end sig_en=ddb07ec92aac5bec9a5c14b82b141825 -->

<!-- pgdoc-cn_start sig_en=ead9b7d038abf1ef5d5378bb70927498 sig_cn_org=cda0a29d3693b27e510c7e0f3e1693ef source=15.7 
  <para>
   The following packages are optional.  They are not required in the
   default configuration, but they are needed when certain build
   options are enabled, as explained below:

   <itemizedlist>
    <listitem>
________________________________________________________-->
  <para>
  以下软件包是可选的。它们在默认配置中不是必需的，但在启用某些构建选项时是必需的，如下所述：

   <itemizedlist>
    <listitem>
<!-- pgdoc-cn_end sig_en=ead9b7d038abf1ef5d5378bb70927498 -->
<!-- pgdoc-cn_start sig_en=8e095bc829abaadd827d77b340866ab3 sig_cn_org=f74ea4f4788cd7f6276e64de920c9194 source=15.7 
     <para>
      To build the server programming language
      <application>PL/Perl</application> you need a full
      <productname>Perl</productname> installation, including the
      <filename>libperl</filename> library and the header files.
      The minimum required version is <productname>Perl</productname> 5.8.3.
      Since <application>PL/Perl</application> will be a shared
      library, the <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename> library must be a shared library
      also on most platforms.  This appears to be the default in
      recent <productname>Perl</productname> versions, but it was not
      in earlier versions, and in any case it is the choice of whomever
      installed Perl at your site.  <filename>configure</filename> will fail
      if building <application>PL/Perl</application> is selected but it cannot
      find a shared <filename>libperl</filename>.  In that case, you will have
      to rebuild and install <productname>Perl</productname> manually to be
      able to build <application>PL/Perl</application>.  During the
      configuration process for <productname>Perl</productname>, request a
      shared library.
     </para>
________________________________________________________-->
     <para>
      要构建服务器编程语言<application>PL/Perl</application>，您需要完整的<productname>Perl</productname>安装，
	  包括<filename>libperl</filename>库和头文件。最低要求版本是<productname>Perl</productname> 5.8.3。
	  由于<application>PL/Perl</application>将是一个共享库，在大多数平台上<indexterm><primary>libperl</primary></indexterm>
	  <filename>libperl</filename>库也必须是一个共享库。这似乎是最近<productname>Perl</productname>版本的默认设置，
	  但在早期版本中不是这样，在任何情况下，这是在您的站点安装Perl的人的选择。<filename>configure</filename>将失败，
	  如果选择构建<application>PL/Perl</application>但找不到共享<filename>libperl</filename>。在这种情况下，
	  您将不得不手动重新构建和安装<productname>Perl</productname>以便能够构建<application>PL/Perl</application>。
	  在为<productname>Perl</productname>的配置过程中，请求一个共享库。
     </para>
<!-- pgdoc-cn_end sig_en=8e095bc829abaadd827d77b340866ab3 -->

<!-- pgdoc-cn_start sig_en=cbc4857f1b2b750d8e64996243ad6935 sig_cn_org=ab778dcd46e8d007e585005b78fc335e source=15.7 
     <para>
      If you intend to make more than incidental use of
      <application>PL/Perl</application>, you should ensure that the
      <productname>Perl</productname> installation was built with the
      <literal>usemultiplicity</literal> option enabled (<literal>perl -V</literal>
      will show whether this is the case).
     </para>
________________________________________________________-->
     <para>
      如果您打算更多地使用<application>PL/Perl</application>，您应该确保<productname>Perl</productname>安装是使用<literal>usemultiplicity</literal>选项构建的（<literal>perl -V</literal>将显示是否是这种情况）。
     </para>
<!-- pgdoc-cn_end sig_en=cbc4857f1b2b750d8e64996243ad6935 -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=07fc7b2c38ce9d09d496b31b44400f7a sig_cn_org=6b6d19bbeebef6194597cf879e77f7dc source=15.7 
     <para>
      To build the <application>PL/Python</application> server programming
      language, you need a <productname>Python</productname>
      installation with the header files and
      the <application>sysconfig</application> module.  The minimum
      required version is <productname>Python</productname> 3.2.
     </para>
________________________________________________________-->
     <para>
      要构建<application>PL/Python</application>服务器编程语言，您需要安装<productname>Python</productname>
      并具有头文件以及<application>sysconfig</application>模块。所需的最低版本是<productname>Python</productname> 3.2。
</para>
<!-- pgdoc-cn_end sig_en=07fc7b2c38ce9d09d496b31b44400f7a -->

<!-- pgdoc-cn_start sig_en=27abb1dfe1cd0fdd8ffc715217cf5a49 sig_cn_org=4a395e77ad9050f3935a748f9cc9e188 source=15.7 
     <para>
      Since <application>PL/Python</application> will be a shared
      library, the <indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename> library must be a shared library
      also on most platforms.  This is not the case in a default
      <productname>Python</productname> installation built from source, but a
      shared library is available in many operating system
      distributions.  <filename>configure</filename> will fail if
      building <application>PL/Python</application> is selected but it cannot
      find a shared <filename>libpython</filename>.  That might mean that you
      either have to install additional packages or rebuild (part of) your
      <productname>Python</productname> installation to provide this shared
      library.  When building from source, run <productname>Python</productname>'s
      configure with the <literal>-&minus;enable-shared</literal> flag.
     </para>
________________________________________________________-->
     <para>
      由于<application>PL/Python</application>将是一个共享库，<indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename>库在大多数平台上也必须是一个共享库。这在默认的
      <productname>Python</productname>源码构建的安装中并非如此，但在许多操作系统
      发行版中提供了一个共享库。<filename>configure</filename>如果选择构建
      <application>PL/Python</application>但找不到共享的<filename>libpython</filename>，将会失败。
      这可能意味着您需要安装额外的软件包或重新构建（部分）<productname>Python</productname>安装以提供这个共享库。
      在从源代码构建时，使用<productname>Python</productname>的configure命令带上<literal>--enable-shared</literal>标志。
     </para>
<!-- pgdoc-cn_end sig_en=27abb1dfe1cd0fdd8ffc715217cf5a49 -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=71acb49de0874edb61c8a89351628feb sig_cn_org=81885b4fb861fe805842fb2acd72ee8a source=15.7 
     <para>
      To build the <application>PL/Tcl</application>
      procedural language, you of course need a <productname>Tcl</productname>
      installation.  The minimum required version is
      <productname>Tcl</productname> 8.4.
     </para>
________________________________________________________-->
     <para>
      要构建<application>PL/Tcl</application>过程语言，您当然需要安装<productname>Tcl</productname>。
      最低要求的版本是<productname>Tcl</productname> 8.4。
</para>
<!-- pgdoc-cn_end sig_en=71acb49de0874edb61c8a89351628feb -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=10d5c02238cfc17a1ad1fc8ba1f1ab0e sig_cn_org=5d8d6e49fb28972e93cd4e689c4e8e4e source=15.7 
     <para>
      To enable Native Language Support (<acronym>NLS</acronym>), that
      is, the ability to display a program's messages in a language
      other than English, you need an implementation of the
      <application>Gettext</application> <acronym>API</acronym>.  Some operating
      systems have this built-in (e.g., <systemitem
      class="osname">Linux</systemitem>, <systemitem class="osname">NetBSD</systemitem>,
      <systemitem class="osname">Solaris</systemitem>), for other systems you
      can download an add-on package from <ulink
      url="https://www.gnu.org/software/gettext/"></ulink>.
      If you are using the <application>Gettext</application> implementation in
      the <acronym>GNU</acronym> C library then you will additionally
      need the <productname>GNU Gettext</productname> package for some
      utility programs.  For any of the other implementations you will
      not need it.
     </para>
________________________________________________________-->
     <para>
      要启用本地语言支持（<acronym>NLS</acronym>），也就是能够以英语以外的语言显示程序的消息，您需要一个<application>Gettext</application> <acronym>API</acronym>的实现。
	  一些操作系统已经内置了这个功能（例如，<systemitem class="osname">Linux</systemitem>，<systemitem class="osname">NetBSD</systemitem>，<systemitem class="osname">Solaris</systemitem>），
	  对于其他系统，您可以从<ulink url="https://www.gnu.org/software/gettext/"></ulink>下载一个附加包。
	  如果您正在使用<application>Gettext</application>在<acronym>GNU</acronym> C库中的实现，那么您还需要一些实用程序的<productname>GNU Gettext</productname>包。
	  对于其他任何实现，您将不需要它。
     </para>
<!-- pgdoc-cn_end sig_en=10d5c02238cfc17a1ad1fc8ba1f1ab0e -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=71a9bc991ed5495ccd1999601cebfd56 sig_cn_org=f90ea13a5efb666a3429e9860d8d8246 source=15.7 
     <para>
      You need <productname>OpenSSL</productname>, if you want to support
      encrypted client connections.  <productname>OpenSSL</productname> is
      also required for random number generation on platforms that do not
      have <filename>/dev/urandom</filename> (except Windows).  The minimum
      required version is 1.0.1.
     </para>
________________________________________________________-->
     <para>
      如果您想支持加密客户端连接，您需要<productname>OpenSSL</productname>。
      在没有<filename>/dev/urandom</filename>（除了Windows）的平台上，
      也需要<productname>OpenSSL</productname>来生成随机数。最低要求版本为1.0.1。
     </para>
<!-- pgdoc-cn_end sig_en=71a9bc991ed5495ccd1999601cebfd56 -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=64299361e3b88351551bb8e7ec346818 sig_cn_org=e56391cb6ee4f24f92425a500fc9fb38 source=15.7 
     <para>
      You need <application>Kerberos</application>, <productname>OpenLDAP</productname>,
      and/or <application>PAM</application>, if you want to support authentication
      using those services.
     </para>
________________________________________________________-->
     <para>
      您需要<application>Kerberos</application>，<productname>OpenLDAP</productname>，
      和/或<application>PAM</application>，如果您想要支持使用这些服务进行身份验证。
     </para>
<!-- pgdoc-cn_end sig_en=64299361e3b88351551bb8e7ec346818 -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=6f23194e55dfbac16da8b39c7f78f00a sig_cn_org=5351fa4f48cb8b21eb3318d01262b636 source=15.7 
     <para>
      You need <productname>LZ4</productname>, if you want to support
      compression of data with that method; see
      <xref linkend="guc-default-toast-compression"/> and
      <xref linkend="guc-wal-compression"/>.
     </para>
________________________________________________________-->
     <para>
      如果您想要支持使用该方法对数据进行压缩，您需要<productname>LZ4</productname>；请参见
      <xref linkend="guc-default-toast-compression"/>和
      <xref linkend="guc-wal-compression"/>。
     </para>
<!-- pgdoc-cn_end sig_en=6f23194e55dfbac16da8b39c7f78f00a -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=07d3c8bf3e41925f448f7a1bcadae674 sig_cn_org=500f82b422a3fc1fcb20bd0ec80f4941 source=15.7 
     <para>
      You need <productname>Zstandard</productname>, if you want to support
      compression of data with that method; see
      <xref linkend="guc-wal-compression"/>.
      The minimum required version is 1.4.0.
     </para>
________________________________________________________-->
     <para>
      如果您想要支持使用该方法对数据进行压缩，您需要<productname>Zstandard</productname>；请参见<xref linkend="guc-wal-compression"/>。
      最低要求版本为1.4.0。
     </para>
<!-- pgdoc-cn_end sig_en=07d3c8bf3e41925f448f7a1bcadae674 -->
    </listitem>

    <listitem>
<!-- pgdoc-cn_start sig_en=24fe749232594f8d9fa3149efae9e7a0 sig_cn_org=624122ef4a34e01870b5414158f4e6af source=15.7 
     <para>
      To build the <productname>PostgreSQL</productname> documentation,
      there is a separate set of requirements; see
      <xref linkend="docguide-toolsets"/>.
     </para>
________________________________________________________-->
     <para>
      要构建<productname>PostgreSQL</productname>文档，需要满足一组单独的要求；请参见<xref linkend="docguide-toolsets"/>。
     </para>
<!-- pgdoc-cn_end sig_en=24fe749232594f8d9fa3149efae9e7a0 -->
    </listitem>
   </itemizedlist>
  </para>

<!-- pgdoc-cn_start sig_en=a458e952dd2900b7f844028666c55690 sig_cn_org=None source=14.1 
  <para>
   If you are building from a <productname>Git</productname> tree instead of
   using a released source package, or if you want to do server development,
   you also need the following packages:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

      <application>Flex</application> and <application>Bison</application>
      are needed to build from a Git checkout, or if you changed the actual
      scanner and parser definition files. If you need them, be sure
      to get <application>Flex</application> 2.5.31 or later and
      <application>Bison</application> 1.875 or later. Other <application>lex</application>
      and <application>yacc</application> programs cannot be used.
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

      <application>Perl</application> 5.8.3 or later is needed to build from a Git checkout,
      or if you changed the input files for any of the build steps that
      use Perl scripts.  If building on Windows you will need
      <application>Perl</application> in any case.  <application>Perl</application> is
      also required to run some test suites.
     </para>
    </listitem>
   </itemizedlist>
  </para>
________________________________________________________-->
  <para>
   如果你正从<productname>Git</productname>树而不是使用发布的源代码包进行编译，或者你想做服务器端开发， 那么你还需要下面的包：

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

      如果你需要从 Git 检出中编译，或者你修改了实际的扫描器和分析器的定义文件， 那么你需要 GNU <application>Flex</application>和<application>Bison</application>。 如果你需要它们，那么确保自己拿到的是<application>Flex</application> 2.5.31 或更新的版本， 以及<application>Bison</application> 1.875 或者更新的版本。不能使用其他<application>lex</application>和<application>yacc</application>程序。
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

      如果需要从 Git 检出中编译，或者你修改了任何使用 Perl 脚本的编译步骤的输入文件，那么你需要<application>Perl</application> 5.8.3或以后的版本。如果你在 Windows 上编译，你在任何情况下都需要<application>Perl</application>。运行一些测试套件时也需要<application>Perl</application>。
     </para>
    </listitem>
   </itemizedlist>
  </para>
<!-- pgdoc-cn_end sig_en=a458e952dd2900b7f844028666c55690 -->

<!-- pgdoc-cn_start sig_en=4d3df20c6a85da0e2316eaf1d0cc8a3a sig_cn_org=None source=14.1 
  <para>
   If you need to get a <acronym>GNU</acronym> package, you can find
   it at your local <acronym>GNU</acronym> mirror site (see <ulink
   url="https://www.gnu.org/prep/ftp"></ulink>
   for a list) or at <ulink
   url="ftp://ftp.gnu.org/gnu/"></ulink>.
  </para>
________________________________________________________-->
  <para>
   如果你需要获取<acronym>GNU</acronym>包，你可以在你的本地<acronym>GNU</acronym>镜像站点 （看看 <ulink url="https://www.gnu.org/prep/ftp"></ulink>或<ulink url="ftp://ftp.gnu.org/gnu/"></ulink>找到它们。
  </para>
<!-- pgdoc-cn_end sig_en=4d3df20c6a85da0e2316eaf1d0cc8a3a -->

<!-- pgdoc-cn_start sig_en=4861e09470777d1b44d47f255e896090 sig_cn_org=None source=14.1 
  <para>
   Also check that you have sufficient disk space. You will need about
   350 MB for the source tree during compilation and about 60 MB for
   the installation directory. An empty database cluster takes about
   40 MB; databases take about five times the amount of space that a
   flat text file with the same data would take. If you are going to
   run the regression tests you will temporarily need up to an extra
   300 MB. Use the <command>df</command> command to check free disk
   space.
  </para>
________________________________________________________-->
  <para>
   还要检查一下你是否有足够的磁盘空间。你将大概需要近 350 MB 用于存放编译过程中的源码树和大约 40 MB 用于安装目录。
   一个空数据库集簇大概需要 35 MB。一个数据库所占的空间大约是存储同样数据的平面文件所占空间的五倍。
   如果你要运行回归测试，还临时需要额外的 300 MB。请用<command>df</command>命令检查剩余磁盘空间。
  </para>
<!-- pgdoc-cn_end sig_en=4861e09470777d1b44d47f255e896090 -->
 </sect1>

 <sect1 id="install-getsource">
<!-- pgdoc-cn_start sig_en=f0d84c727c276b1e006b1eb4e3e7ec6f sig_cn_org=None source=14.1 
  <title>Getting the Source</title>
________________________________________________________-->
  <title>获取源码</title>
<!-- pgdoc-cn_end sig_en=f0d84c727c276b1e006b1eb4e3e7ec6f -->

<!-- pgdoc-cn_start sig_en=da1bbd651adcc165973266551cf51234 sig_cn_org=efa6b1b2735ead44bb653d274d249c0f source=15.7 
  <para>
   The <productname>PostgreSQL</productname> source code for released versions
   can be obtained from the download section of our website:
   <ulink url="https://www.postgresql.org/ftp/source/"></ulink>.
   Download the
   <filename>postgresql-<replaceable>version</replaceable>.tar.gz</filename>
   or <filename>postgresql-<replaceable>version</replaceable>.tar.bz2</filename>
   file you're interested in, then unpack it:
<screen>
<userinput>tar xf postgresql-<replaceable>version</replaceable>.tar.bz2</userinput>
</screen>
   This will create a directory
   <filename>postgresql-<replaceable>version</replaceable></filename> under
   the current directory with the <productname>PostgreSQL</productname> sources.
   Change into that directory for the rest of the installation procedure.
  </para>
________________________________________________________-->
  <para>
   发布版本的<productname>PostgreSQL</productname>源代码可以从我们网站的下载部分获取：
   <ulink url="https://www.postgresql.org/ftp/source/"></ulink>。
   下载您感兴趣的<filename>postgresql-<replaceable>version</replaceable>.tar.gz</filename>
   或<filename>postgresql-<replaceable>version</replaceable>.tar.bz2</filename>文件，然后解压缩：
<screen>
<userinput>tar xf postgresql-<replaceable>version</replaceable>.tar.bz2</userinput>
</screen>
   这将在当前目录下创建一个名为<filename>postgresql-<replaceable>version</replaceable></filename>的目录，其中包含<productname>PostgreSQL</productname>源代码。
   进入该目录进行安装程序的其余部分。
</para>
<!-- pgdoc-cn_end sig_en=da1bbd651adcc165973266551cf51234 -->

<!-- pgdoc-cn_start sig_en=106c73f707b45a998c4f873490001fa0 sig_cn_org=9ab07ab1f5b133f469449db61c291010 source=15.7 
  <para>
   Alternatively, you can use the Git version control system; see
   <xref linkend="git"/> for more information.
  </para>
________________________________________________________-->
  <para>
   或者，您可以使用Git版本控制系统；请参阅<xref linkend="git"/>获取更多信息。
</para>
<!-- pgdoc-cn_end sig_en=106c73f707b45a998c4f873490001fa0 -->
 </sect1>

 <sect1 id="install-procedure">
<!-- pgdoc-cn_start sig_en=c7acea51e47ae829e513c2d3db91d5fe sig_cn_org=None source=14.1 
  <title>Installation Procedure</title>
________________________________________________________-->
  <title>安装过程</title>
<!-- pgdoc-cn_end sig_en=c7acea51e47ae829e513c2d3db91d5fe -->

  <procedure>

  <step id="configure">
<!-- pgdoc-cn_start sig_en=78fd6ae8f68f7c009e14488907792dde sig_cn_org=None source=14.1 
   <title>Configuration</title>
________________________________________________________-->
   <title>配置</title>
<!-- pgdoc-cn_end sig_en=78fd6ae8f68f7c009e14488907792dde -->

<!-- pgdoc-cn_start sig_en=c99e1ec42220ac5d19408a4845cc15e1 sig_cn_org=None source=14.1 
   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=c99e1ec42220ac5d19408a4845cc15e1 -->

<!-- pgdoc-cn_start sig_en=c62a89c28619d61698e62f23f3e3553e sig_cn_org=None source=14.1 
   <para>
    The first step of the installation procedure is to configure the
    source tree for your system and choose the options you would like.
    This is done by running the <filename>configure</filename> script. For a
    default installation simply enter:
<screen>
<userinput>./configure</userinput>
</screen>
    This script will run a number of tests to determine values for various
    system dependent variables and detect any quirks of your
    operating system, and finally will create several files in the
    build tree to record what it found.
   </para>
________________________________________________________-->
   <para>
    安装过程的第一步就是为你的系统配置源代码树并选择你喜欢的选项。这个工作是通过运行<filename>configure</filename>脚本实现的，对于默认安装，你只需要简单地输入：
<screen>
<userinput>./configure</userinput>
</screen>
    该脚本将运行一些测试来决定一些系统相关的变量， 并检测你的操作系统的特殊设置，并且最后将在编译树中创建一些文件以记录它找到了什么。
   </para>
<!-- pgdoc-cn_end sig_en=c62a89c28619d61698e62f23f3e3553e -->

<!-- pgdoc-cn_start sig_en=dcb603b40f89777e023352a44c6e672f sig_cn_org=None source=14.1 
   <para>
    You can also run <filename>configure</filename> in a directory outside
    the source tree, and then build there, if you want to keep the build
    directory separate from the original source files.  This procedure is
    called a
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    build.  Here's how:
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<userinput>/path/to/source/tree/configure [options go here]</userinput>
<userinput>make</userinput>
</screen>
   </para>
________________________________________________________-->
   <para>
    如果你想保持编译目录的独立，你也可以在一个源码树之外的目录中运行<filename>configure</filename> ，然后在那里构建。这个过程也被称为一个<indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>编译。做法如下：
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<userinput>/path/to/source/tree/configure [options go here]</userinput>
<userinput>make</userinput>
</screen>
   </para>
<!-- pgdoc-cn_end sig_en=dcb603b40f89777e023352a44c6e672f -->

<!-- pgdoc-cn_start sig_en=51762e7c36f61ed9366f40e94c2dee08 sig_cn_org=None source=14.1 
   <para>
    The default configuration will build the server and utilities, as
    well as all client applications and interfaces that require only a
    C compiler. All files will be installed under
    <filename>/usr/local/pgsql</filename> by default.
   </para>
________________________________________________________-->
   <para>
    默认设置将编译服务器和辅助程序，还有只需要 C 编译器的所有客户端程序和接口。默认时所有文件都将安装到<filename>/usr/local/pgsql</filename>。
   </para>
<!-- pgdoc-cn_end sig_en=51762e7c36f61ed9366f40e94c2dee08 -->

<!-- pgdoc-cn_start sig_en=4861df718936191ff39ddecf933476bf sig_cn_org=None source=14.1 
   <para>
    You can customize the build and installation process by supplying one
    or more command line options to <filename>configure</filename>.
    Typically you would customize the install location, or the set of
    optional features that are built.  <filename>configure</filename>
    has a large number of options, which are described in
    <xref linkend="configure-options"/>.
   </para>
________________________________________________________-->
   <para>
    您可以通过向<filename>configure</filename>提供一个或多个命令行选项来自定义构建和安装过程。
    通常，您会自定义安装位置或构建的一组可选功能。<filename>configure</filename>有大量的选项，
    在<xref linkend="configure-options"/>中有描述。
   </para>
<!-- pgdoc-cn_end sig_en=4861df718936191ff39ddecf933476bf -->

<!-- pgdoc-cn_start sig_en=a632dc49dfaa915ff28b361a40765706 sig_cn_org=None source=14.1 
   <para>
    Also, <filename>configure</filename> responds to certain environment
    variables, as described in <xref linkend="configure-envvars"/>.
    These provide additional ways to customize the configuration.
   </para>
________________________________________________________-->
   <para>
    此外，<filename>configure</filename>响应某些环境变量，如<xref linkend="configure-envvars"/>中所述。
    这些提供了自定义配置的其他方法。
   </para>
<!-- pgdoc-cn_end sig_en=a632dc49dfaa915ff28b361a40765706 -->
  </step>

  <step id="build">
<!-- pgdoc-cn_start sig_en=3fbc456e71aae7715255d812487ae1a2 sig_cn_org=None source=14.1 
   <title>Build</title>
________________________________________________________-->
   <title>Build</title>
<!-- pgdoc-cn_end sig_en=3fbc456e71aae7715255d812487ae1a2 -->

<!-- pgdoc-cn_start sig_en=c4113067678b863a8169a18e1956e6e6 sig_cn_org=None source=14.1 
   <para>
    To start the build, type either of:
<screen>
<userinput>make</userinput>
<userinput>make all</userinput>
</screen>
    (Remember to use <acronym>GNU</acronym> <application>make</application>.)
    The build will take a few minutes depending on your
    hardware.
   </para>
________________________________________________________-->
   <para>
    要开始构建，请键入：
<screen>
<userinput>make</userinput>
<userinput>make all</userinput>
</screen>
    （记得使用<acronym>GNU</acronym> <application>make</application>。）
    构建将需要几分钟时间，具体取决于您的硬件。
   </para>
<!-- pgdoc-cn_end sig_en=c4113067678b863a8169a18e1956e6e6 -->

<!-- pgdoc-cn_start sig_en=9745b33535f70f7e6193d5ead563a338 sig_cn_org=None source=14.1 
  <para>
   If you want to build everything that can be built, including the
   documentation (HTML and man pages), and the additional modules
   (<filename>contrib</filename>), type instead:
<screen>
<userinput>make world</userinput>
</screen>
  </para>
________________________________________________________-->
  <para>
   如果您想构建可以构建的所有内容，包括文档（HTML 和手册页）和附加模块（<filename>contrib</filename>），请改为键入：
<screen>
<userinput>make world</userinput>
</screen>
  </para>
<!-- pgdoc-cn_end sig_en=9745b33535f70f7e6193d5ead563a338 -->

<!-- pgdoc-cn_start sig_en=cd489455c97cbc38758fbbc5f97ad998 sig_cn_org=None source=14.1 
  <para>
   If you want to build everything that can be built, including the
   additional modules (<filename>contrib</filename>), but without
   the documentation, type instead:
<screen>
<userinput>make world-bin</userinput>
</screen>
   </para>
________________________________________________________-->
  <para>
   如果您想构建可以构建的所有内容，和附加模块，除了文档，请改为键入：
<screen>
<userinput>make world-bin</userinput>
</screen>
   </para>
<!-- pgdoc-cn_end sig_en=cd489455c97cbc38758fbbc5f97ad998 -->

<!-- pgdoc-cn_start sig_en=fd0ce00c832dc8a7adc71aea094bff41 sig_cn_org=None source=14.1 
   <para>
    If you want to invoke the build from another makefile rather than
    manually, you must unset <varname>MAKELEVEL</varname> or set it to zero,
    for instance like this:
<programlisting>
build-postgresql:
        $(MAKE) -C postgresql MAKELEVEL=0 all
</programlisting>
    Failure to do that can lead to strange error messages, typically about
    missing header files.
   </para>
________________________________________________________-->
   <para>
    如果要从另一个 makefile 调用构建而不是手动调用，则必须取消设置<varname>MAKELEVEL</varname>或将其设置为零，例如：
<programlisting>
build-postgresql:
        $(MAKE) -C postgresql MAKELEVEL=0 all
</programlisting>
    不这样做可能会导致奇怪的错误消息，通常是关于缺少头文件。
   </para>
<!-- pgdoc-cn_end sig_en=fd0ce00c832dc8a7adc71aea094bff41 -->
  </step>

  <step>
<!-- pgdoc-cn_start sig_en=6769bdcd94492cefcf5a6600b5cce8b6 sig_cn_org=None source=14.1 
   <title>Regression Tests</title>
________________________________________________________-->
   <title>回归测试</title>
<!-- pgdoc-cn_end sig_en=6769bdcd94492cefcf5a6600b5cce8b6 -->

<!-- pgdoc-cn_start sig_en=c0a3098025c2aae135a2bbd1c6a07adc sig_cn_org=None source=14.1 
   <indexterm>
    <primary>regression test</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>回归测试</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=c0a3098025c2aae135a2bbd1c6a07adc -->

<!-- pgdoc-cn_start sig_en=cc68db689d9a35971ab0f1b0927c4bac sig_cn_org=None source=14.1 
   <para>
    If you want to test the newly built server before you install it,
    you can run the regression tests at this point. The regression
    tests are a test suite to verify that <productname>PostgreSQL</productname>
    runs on your machine in the way the developers expected it
    to. Type:
<screen>
<userinput>make check</userinput>
</screen>
    (This won't work as root; do it as an unprivileged user.)
    See <xref linkend="regress"/> for
    detailed information about interpreting the test results. You can
    repeat this test at any later time by issuing the same command.
   </para>
________________________________________________________-->
   <para>
    如果您想在安装之前测试新构建的服务器，您可以在此时运行回归测试。
    回归测试是一个测试套件，用于验证<productname>PostgreSQL</productname>
    是否以开发人员期望的方式在您的机器上运行。输入：
<screen>
<userinput>make check</userinput>
</screen>
    （这不会以 root 身份运行；以非特权用户身份进行。）有关解释测试结果的详细信息，
    请参阅<xref linkend="regress"/>。您可以在以后的任何时间通过发出相同的命令重复此测试。
   </para>
<!-- pgdoc-cn_end sig_en=cc68db689d9a35971ab0f1b0927c4bac -->
  </step>

  <step id="install">
<!-- pgdoc-cn_start sig_en=5f34bc3e673a88440a3c2a121ead847e sig_cn_org=None source=14.1 
   <title>Installing the Files</title>
________________________________________________________-->
   <title>安装文件</title>
<!-- pgdoc-cn_end sig_en=5f34bc3e673a88440a3c2a121ead847e -->

   <note>
<!-- pgdoc-cn_start sig_en=51ff5e86e63e63360924083a069ddf5a sig_cn_org=None source=14.1 
    <para>
     If you are upgrading an existing system be sure to read
     <xref linkend="upgrading"/>,
     which has instructions about upgrading a
     cluster.
    </para>
________________________________________________________-->
    <para>
     如果您要升级现有系统，请务必阅读<xref linkend="upgrading"/>，其中包含有关升级集群的说明。
    </para>
<!-- pgdoc-cn_end sig_en=51ff5e86e63e63360924083a069ddf5a -->
   </note>

<!-- pgdoc-cn_start sig_en=08581e22fd5e49864dcb47624e4fd19b sig_cn_org=None source=14.1 
   <para>
    To install <productname>PostgreSQL</productname> enter:
<screen>
<userinput>make install</userinput>
</screen>
    This will install files into the directories that were specified
    in <xref linkend="configure"/>. Make sure that you have appropriate
    permissions to write into that area. Normally you need to do this
    step as root. Alternatively, you can create the target
    directories in advance and arrange for appropriate permissions to
    be granted.
   </para>
________________________________________________________-->
   <para>
    要安装<productname>PostgreSQL</productname>，请输入：
<screen>
<userinput>make install</userinput>
</screen>
    这会将文件安装到<xref linkend="configure"/>中指定的目录中。
    确保您具有写入该区域的适当权限。通常，您需要以 root 身份执行此步骤。
    或者，您可以提前创建目标目录并安排授予适当的权限。
   </para>
<!-- pgdoc-cn_end sig_en=08581e22fd5e49864dcb47624e4fd19b -->

<!-- pgdoc-cn_start sig_en=8363edd9e1778cdfe2327b833842d734 sig_cn_org=None source=14.1 
   <para>
    To install the documentation (HTML and man pages), enter:
<screen>
<userinput>make install-docs</userinput>
</screen>
   </para>
________________________________________________________-->
   <para>
    要安装文档（HTML 和手册页），请输入：
<screen>
<userinput>make install-docs</userinput>
</screen>
   </para>
<!-- pgdoc-cn_end sig_en=8363edd9e1778cdfe2327b833842d734 -->

<!-- pgdoc-cn_start sig_en=04baee876e296fffe0070792b2cc9123 sig_cn_org=None source=14.1 
   <para>
    If you built the world above, type instead:
<screen>
<userinput>make install-world</userinput>
</screen>
    This also installs the documentation.
   </para>
________________________________________________________-->
   <para>
    如果您构建了上面的文档，请输入：
<screen>
<userinput>make install-world</userinput>
</screen>
    这也会安装文档。
   </para>
<!-- pgdoc-cn_end sig_en=04baee876e296fffe0070792b2cc9123 -->

<!-- pgdoc-cn_start sig_en=9a36dcd11e6897398118e2816101a7b1 sig_cn_org=None source=14.1 
   <para>
    If you built the world without the documentation above, type instead:
<screen>
<userinput>make install-world-bin</userinput>
</screen>
   </para>
________________________________________________________-->
   <para>
       如果您构建除上述文档之外的所有内容，请输入：
   <screen>
   <userinput>make install-world-bin</userinput>
   </screen>
      </para>
<!-- pgdoc-cn_end sig_en=9a36dcd11e6897398118e2816101a7b1 -->

<!-- pgdoc-cn_start sig_en=5308f83a4f909c6c906c804b638b6075 sig_cn_org=None source=14.1 
   <para>
    You can use <literal>make install-strip</literal> instead of
    <literal>make install</literal> to strip the executable files and
    libraries as they are installed.  This will save some space.  If
    you built with debugging support, stripping will effectively
    remove the debugging support, so it should only be done if
    debugging is no longer needed.  <literal>install-strip</literal>
    tries to do a reasonable job saving space, but it does not have
    perfect knowledge of how to strip every unneeded byte from an
    executable file, so if you want to save all the disk space you
    possibly can, you will have to do manual work.
   </para>
________________________________________________________-->
   <para>
    您可以使用<literal>make install-strip</literal>而不是
    <literal>make install</literal>来剥离安装的可执行文件和库。这将节省一些空间。
    如果您使用调试支持构建，剥离将有效地移除调试支持，因此只有在不再需要调试时才应该这样做。
    <literal>install-strip</literal>试图做一个合理的工作来节省空间，
    但它不知道如何从可执行文件中去除每个不需要的字节，所以如果你想节省所有的磁盘空间，
    你可能可以，你将不得不做手工工作。
   </para>
<!-- pgdoc-cn_end sig_en=5308f83a4f909c6c906c804b638b6075 -->

<!-- pgdoc-cn_start sig_en=0f2d033eb88993c93c9dd32e0ad68e59 sig_cn_org=None source=14.1 
   <para>
    The standard installation provides all the header files needed for client
    application development as well as for server-side program
    development, such as custom functions or data types written in C.
   </para>
________________________________________________________-->
   <para>
    标准安装提供客户端应用程序开发以及服务器端程序开发所需的所有头文件，例如用 C 编写的自定义函数或数据类型。
   </para>
<!-- pgdoc-cn_end sig_en=0f2d033eb88993c93c9dd32e0ad68e59 -->

   <formalpara>
<!-- pgdoc-cn_start sig_en=ebd8166fc8565e60f26a035ff41cd1e1 sig_cn_org=None source=14.1 
    <title>Client-only installation:</title>
________________________________________________________-->
    <title>仅客户端安装：</title>
<!-- pgdoc-cn_end sig_en=ebd8166fc8565e60f26a035ff41cd1e1 -->
<!-- pgdoc-cn_start sig_en=fdf5ef032b715f950b0346af4fccd99c sig_cn_org=None source=14.1 
    <para>
     If you want to install only the client applications and
     interface libraries, then you can use these commands:
<screen>
<userinput>make -C src/bin install</userinput>
<userinput>make -C src/include install</userinput>
<userinput>make -C src/interfaces install</userinput>
<userinput>make -C doc install</userinput>
</screen>
    <filename>src/bin</filename> has a few binaries for server-only use,
    but they are small.
    </para>
________________________________________________________-->
    <para>
     如果只想安装客户端应用程序和接口库，则可以使用以下命令：
<screen>
<userinput>make -C src/bin install</userinput>
<userinput>make -C src/include install</userinput>
<userinput>make -C src/interfaces install</userinput>
<userinput>make -C doc install</userinput>
</screen>
    <filename>src/bin</filename>有一些仅供服务器使用的二进制文件，但它们很小。
    </para>
<!-- pgdoc-cn_end sig_en=fdf5ef032b715f950b0346af4fccd99c -->
   </formalpara>
  </step>
  </procedure>

  <formalpara>
<!-- pgdoc-cn_start sig_en=524cdca5452261607dc57372175d5e40 sig_cn_org=None source=14.1 
   <title>Uninstallation:</title>
________________________________________________________-->
   <title>卸载：</title>
<!-- pgdoc-cn_end sig_en=524cdca5452261607dc57372175d5e40 -->
<!-- pgdoc-cn_start sig_en=bf96ab2c2d79b0532191a7f81cb4c1f7 sig_cn_org=None source=14.1 
   <para>
    To undo the installation use the command <command>make
    uninstall</command>. However, this will not remove any created directories.
   </para>
________________________________________________________-->
   <para>
    要撤消安装，请使用命令<command>make uninstall</command>。但是，这不会删除任何创建的目录。
   </para>
<!-- pgdoc-cn_end sig_en=bf96ab2c2d79b0532191a7f81cb4c1f7 -->
  </formalpara>

  <formalpara>
<!-- pgdoc-cn_start sig_en=4a75c52d82fc6fc48ef9e32ee8eb4e24 sig_cn_org=None source=14.1 
   <title>Cleaning:</title>
________________________________________________________-->
   <title>清理：</title>
<!-- pgdoc-cn_end sig_en=4a75c52d82fc6fc48ef9e32ee8eb4e24 -->

<!-- pgdoc-cn_start sig_en=1b6281582d3083675b6ea1f2ac9ae9bc sig_cn_org=None source=14.1 
   <para>
    After the installation you can free disk space by removing the built
    files from the source tree with the command <command>make
    clean</command>. This will preserve the files made by the <command>configure</command>
    program, so that you can rebuild everything with <command>make</command>
    later on. To reset the source tree to the state in which it was
    distributed, use <command>make distclean</command>. If you are going to
    build for several platforms within the same source tree you must do
    this and re-configure for each platform.  (Alternatively, use
    a separate build tree for each platform, so that the source tree
    remains unmodified.)
   </para>
________________________________________________________-->
   <para>
    安装后，您可以通过使用命令<command>make clean</command>从源树中删除构建的文件来释放磁盘空间。
    这将保留<command>configure</command>程序生成的文件，以便您稍后可以使用<command>make</command>重建所有内容。
    要将代码树重置为分发时的状态，请使用<command>make distclean</command>。如果要在同一源代码树中为多个平台构建，
    则必须执行此操作并为每个平台重新配置。（或者，为每个平台使用单独的构建树，以便源树保持不变。）
   </para>
<!-- pgdoc-cn_end sig_en=1b6281582d3083675b6ea1f2ac9ae9bc -->
  </formalpara>

<!-- pgdoc-cn_start sig_en=e4d7113542b2ff38b215312c0438e1f8 sig_cn_org=None source=14.1 
  <para>
   If you perform a build and then discover that your <command>configure</command>
   options were wrong, or if you change anything that <command>configure</command>
   investigates (for example, software upgrades), then it's a good
   idea to do <command>make distclean</command> before reconfiguring and
   rebuilding.  Without this, your changes in configuration choices
   might not propagate everywhere they need to.
  </para>
________________________________________________________-->
  <para>
   如果您执行构建然后发现您的<command>configure</command>选项错误，或者如果您更改了<command>configure</command>调查的任何内容（例如，软件升级），那么在重新配置和重建之前执行<command>make distclean</command>是个好主意。 没有这个，您对配置选择的更改可能不会传播到他们需要的任何地方。
  </para>
<!-- pgdoc-cn_end sig_en=e4d7113542b2ff38b215312c0438e1f8 -->

  <sect2 id="configure-options">
<!-- pgdoc-cn_start sig_en=2d95340a8c68471f914e178e41ca4f58 sig_cn_org=None source=14.1 
   <title><filename>configure</filename> Options</title>
________________________________________________________-->
   <title><filename>configure</filename> 选项</title>
<!-- pgdoc-cn_end sig_en=2d95340a8c68471f914e178e41ca4f58 -->

<!-- pgdoc-cn_start sig_en=ff2482dcd26819abde9e61a25534d5a3 sig_cn_org=None source=14.1 
   <indexterm zone="configure-options">
    <primary>configure options</primary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="configure-options">
    <primary>配置选项</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=ff2482dcd26819abde9e61a25534d5a3 -->

<!-- pgdoc-cn_start sig_en=f5d1a23ce2de87124e5c2831a0e89e78 sig_cn_org=None source=14.1 
   <para>
    <command>configure</command>'s command line options are explained below.
    This list is not exhaustive (use <literal>./configure -&minus;help</literal>
    to get one that is).  The options not covered here are meant for
    advanced use-cases such as cross-compilation, and are documented in
    the standard Autoconf documentation.
   </para>
________________________________________________________-->
   <para>
    <command>configure</command>的命令行选项解释如下。 这个列表并不详尽（使用<literal>./configure --help</literal>
    来获得一个）。此处未涵盖的选项适用于交叉编译等高级用例，并记录在标准Autoconf文档中。
   </para>
<!-- pgdoc-cn_end sig_en=f5d1a23ce2de87124e5c2831a0e89e78 -->

   <sect3 id="configure-options-locations">
<!-- pgdoc-cn_start sig_en=8465ade5559153a001e89868cbf1610e sig_cn_org=None source=14.1 
    <title>Installation Locations</title>
________________________________________________________-->
    <title>安装位置</title>
<!-- pgdoc-cn_end sig_en=8465ade5559153a001e89868cbf1610e -->

<!-- pgdoc-cn_start sig_en=0ab8d05af82c560028bd0107e1e8b715 sig_cn_org=None source=14.1 
     <para>
      These options control where <literal>make install</literal> will put
      the files.  The <option>-&minus;prefix</option> option is sufficient for
      most cases.  If you have special needs, you can customize the
      installation subdirectories with the other options described in this
      section.  Beware however that changing the relative locations of the
      different subdirectories may render the installation non-relocatable,
      meaning you won't be able to move it after installation.
      (The <literal>man</literal> and <literal>doc</literal> locations are
      not affected by this restriction.)  For relocatable installs, you
      might want to use the <literal>-&minus;disable-rpath</literal> option
      described later.
     </para>
________________________________________________________-->
     <para>
      这些选项控制<literal>make install</literal>将放置文件的位置。
      <option>--prefix</option>选项在大多数情况下就足够了。
      如果您有特殊需要，可以使用本节中描述的其他选项自定义安装子目录。 但是请注意，更改不同子目录的相对位置可能会使安装不可重定位，这意味着您将无法在安装后移动它。
      （<literal>man</literal>和<literal>doc</literal> 位置不受此限制的影响。）
      对于可重定位安装，您可能需要使用<literal>--disable-rpath</literal>选项稍后描述。
     </para>
<!-- pgdoc-cn_end sig_en=0ab8d05af82c560028bd0107e1e8b715 -->

     <variablelist>
      <varlistentry>
       <term><option>--prefix=<replaceable>PREFIX</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=2351f22a8dad08850c86413410c222bb sig_cn_org=None source=14.1 
        <para>
         Install all files under the directory <replaceable>PREFIX</replaceable>
         instead of <filename>/usr/local/pgsql</filename>. The actual
         files will be installed into various subdirectories; no files
         will ever be installed directly into the
         <replaceable>PREFIX</replaceable> directory.
        </para>
________________________________________________________-->
        <para>
         把所有文件装在目录<replaceable>PREFIX</replaceable>中而不是<filename>/usr/local/pgsql</filename>中。 实际的文件会安装到数个子目录中；没有一个文件会直接安装到<replaceable>PREFIX</replaceable>目录里。
        </para>
<!-- pgdoc-cn_end sig_en=2351f22a8dad08850c86413410c222bb -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--exec-prefix=<replaceable>EXEC-PREFIX</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=f6fa09f267c168997f4d4cc827417a4a sig_cn_org=None source=14.1 
        <para>
         You can install architecture-dependent files under a
         different prefix, <replaceable>EXEC-PREFIX</replaceable>, than what
         <replaceable>PREFIX</replaceable> was set to. This can be useful to
         share architecture-independent files between hosts. If you
         omit this, then <replaceable>EXEC-PREFIX</replaceable> is set equal to
         <replaceable>PREFIX</replaceable> and both architecture-dependent and
         independent files will be installed under the same tree,
         which is probably what you want.
        </para>
________________________________________________________-->
        <para>
         你可以把体系相关的文件安装到一个不同的前缀下（<replaceable>EXEC-PREFIX</replaceable>），而不是<replaceable>PREFIX</replaceable>中设置的地方。 这样做可以比较方便地在不同主机之间共享体系相关的文件。 如果你省略这些，那么<replaceable>EXEC-PREFIX</replaceable>就会被设置为等于 <replaceable>PREFIX</replaceable>并且体系相关和体系无关的文件都会安装到同一棵目录树下，这也可能是你想要的。
        </para>
<!-- pgdoc-cn_end sig_en=f6fa09f267c168997f4d4cc827417a4a -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--bindir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=a189e72f7f823d27bd7b372eafd6b5ef sig_cn_org=None source=14.1 
        <para>
         Specifies the directory for executable programs. The default
         is <filename><replaceable>EXEC-PREFIX</replaceable>/bin</filename>, which
         normally means <filename>/usr/local/pgsql/bin</filename>.
        </para>
________________________________________________________-->
        <para>
         为可执行程序指定目录。默认是<filename><replaceable>EXEC-PREFIX</replaceable>/bin</filename>， 通常也就是<filename>/usr/local/pgsql/bin</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=a189e72f7f823d27bd7b372eafd6b5ef -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--sysconfdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=2c34ec18e8948515a92a89fb0a1fb5d8 sig_cn_org=None source=14.1 
        <para>
         Sets the directory for various configuration files,
         <filename><replaceable>PREFIX</replaceable>/etc</filename> by default.
        </para>
________________________________________________________-->
        <para>
         用于各种各样配置文件的目录，默认为<filename><replaceable>PREFIX</replaceable>/etc</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=2c34ec18e8948515a92a89fb0a1fb5d8 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--libdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=72b5341ac28d81d10bbbcee08b8d102f sig_cn_org=None source=14.1 
        <para>
         Sets the location to install libraries and dynamically loadable
         modules. The default is
         <filename><replaceable>EXEC-PREFIX</replaceable>/lib</filename>.
        </para>
________________________________________________________-->
        <para>
         设置安装库和动态装载模块的目录。默认是<filename><replaceable>EXEC-PREFIX</replaceable>/lib</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=72b5341ac28d81d10bbbcee08b8d102f -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--includedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=877fd243bf9fc87614bcad9914869cbd sig_cn_org=None source=14.1 
        <para>
         Sets the directory for installing C and C++ header files. The
         default is <filename><replaceable>PREFIX</replaceable>/include</filename>.
        </para>
________________________________________________________-->
        <para>
         C 和 C++ 头文件的目录。默认是<filename><replaceable>PREFIX</replaceable>/include</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=877fd243bf9fc87614bcad9914869cbd -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datarootdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=0354b7009ff66f0a131721dc85dcb241 sig_cn_org=None source=14.1 
        <para>
         Sets the root directory for various types of read-only data
         files.  This only sets the default for some of the following
         options.  The default is
         <filename><replaceable>PREFIX</replaceable>/share</filename>.
        </para>
________________________________________________________-->
        <para>
         设置多种只读数据文件的根目录。这只为后面的某些选项设置默认值。默认值为<filename><replaceable>PREFIX</replaceable>/share</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=0354b7009ff66f0a131721dc85dcb241 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datadir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=553428729b040ec31fd4a7a1a7b277a5 sig_cn_org=None source=14.1 
        <para>
         Sets the directory for read-only data files used by the
         installed programs. The default is
         <filename><replaceable>DATAROOTDIR</replaceable></filename>. Note that this has
         nothing to do with where your database files will be placed.
        </para>
________________________________________________________-->
        <para>
         设置被安装的程序使用的只读数据文件的目录。默认值为<filename><replaceable>DATAROOTDIR</replaceable></filename>。注意这不会对你的数据库文件被放置的位置产生任何影响。
        </para>
<!-- pgdoc-cn_end sig_en=553428729b040ec31fd4a7a1a7b277a5 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--localedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=951fd2458d82d150ab6ff6da08da60ea sig_cn_org=None source=14.1 
        <para>
         Sets the directory for installing locale data, in particular
         message translation catalog files.  The default is
         <filename><replaceable>DATAROOTDIR</replaceable>/locale</filename>.
        </para>
________________________________________________________-->
        <para>
         设置安装区域数据的目录，特别是消息翻译目录文件。默认值为<filename><replaceable>DATAROOTDIR</replaceable>/locale</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=951fd2458d82d150ab6ff6da08da60ea -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--mandir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=154627c2b4801d6dba658dc93af339c8 sig_cn_org=None source=14.1 
        <para>
         The man pages that come with <productname>PostgreSQL</productname> will be installed under
         this directory, in their respective
         <filename>man<replaceable>x</replaceable></filename> subdirectories.
         The default is <filename><replaceable>DATAROOTDIR</replaceable>/man</filename>.
        </para>
________________________________________________________-->
        <para>
         <productname>PostgreSQL</productname>自带的手册页将安装到这个目录，它们被安装在相应的<filename>man<replaceable>x</replaceable></filename>子目录里。 默认是<filename><replaceable>DATAROOTDIR</replaceable>/man</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=154627c2b4801d6dba658dc93af339c8 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--docdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=b24809269456219eefa783976b44d21d sig_cn_org=None source=14.1 
        <para>
         Sets the root directory for installing documentation files,
         except <quote>man</quote> pages.  This only sets the default for
         the following options.  The default value for this option is
         <filename><replaceable>DATAROOTDIR</replaceable>/doc/postgresql</filename>.
        </para>
________________________________________________________-->
        <para>
         设置安装文档文件的根目录，<quote>man</quote>页不包含在内。这只为后续选项设置默认值。这个选项的默认值为<filename><replaceable>DATAROOTDIR</replaceable>/doc/postgresql</filename>。
        </para>
<!-- pgdoc-cn_end sig_en=b24809269456219eefa783976b44d21d -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--htmldir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=e008b6171bddc094dae08547e9ce20e8 sig_cn_org=None source=14.1 
        <para>
         The HTML-formatted documentation for
         <productname>PostgreSQL</productname> will be installed under
         this directory.  The default is
         <filename><replaceable>DATAROOTDIR</replaceable></filename>.
        </para>
________________________________________________________-->
        <para>
         <productname>PostgreSQL</productname>的HTML格式的文档将被安装在这个目录中。默认值为<filename><replaceable>DATAROOTDIR</replaceable></filename>。
        </para>
<!-- pgdoc-cn_end sig_en=e008b6171bddc094dae08547e9ce20e8 -->
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
<!-- pgdoc-cn_start sig_en=42d1596a19726e8518915a06a194c7f9 sig_cn_org=None source=14.1 
      <para>
       Care has been taken to make it possible to install
       <productname>PostgreSQL</productname> into shared installation locations
       (such as <filename>/usr/local/include</filename>) without
       interfering with the namespace of the rest of the system. First,
       the string <quote><literal>/postgresql</literal></quote> is
       automatically appended to <varname>datadir</varname>,
       <varname>sysconfdir</varname>, and <varname>docdir</varname>,
       unless the fully expanded directory name already contains the
       string <quote><literal>postgres</literal></quote> or
       <quote><literal>pgsql</literal></quote>. For example, if you choose
       <filename>/usr/local</filename> as prefix, the documentation will
       be installed in <filename>/usr/local/doc/postgresql</filename>,
       but if the prefix is <filename>/opt/postgres</filename>, then it
       will be in <filename>/opt/postgres/doc</filename>. The public C
       header files of the client interfaces are installed into
       <varname>includedir</varname> and are namespace-clean. The
       internal header files and the server header files are installed
       into private directories under <varname>includedir</varname>. See
       the documentation of each interface for information about how to
       access its header files. Finally, a private subdirectory will
       also be created, if appropriate, under <varname>libdir</varname>
       for dynamically loadable modules.
      </para>
________________________________________________________-->
      <para>
       为了让<productname>PostgreSQL</productname>能够安装在一些共享的安装位置（例如<filename>/usr/local/include</filename>）， 同时又不至于和系统其它部分产生名字空间干扰，我们特别做了一些处理。 首先，安装脚本会自动给<varname>datadir</varname>、<varname>sysconfdir</varname>和<varname>docdir</varname>后面附加上<quote><literal>/postgresql</literal></quote>字符串， 除非展开的完整路径名已经包含字符串<quote><literal>postgres</literal></quote>或者<quote><literal>pgsql</literal></quote>。 例如，如果你选择<filename>/usr/local</filename>作为前缀， 那么文档将安装在<filename>/usr/local/doc/postgresql</filename>，但如果前缀是<filename>/opt/postgres</filename>， 那么它将被放到<filename>/opt/postgres/doc</filename>。客户接口的公共 C 头文件安装到了<varname>includedir</varname>，并且是名字空间无关的。内部的头文件和服务器头文件都安装在<varname>includedir</varname>下的私有目录中。参考每种接口的文档获取关于如何访问头文件的信息。最后，如果合适，那么也会在<varname>libdir</varname>下创建一个私有的子目录用于动态可装载的模块。
      </para>
<!-- pgdoc-cn_end sig_en=42d1596a19726e8518915a06a194c7f9 -->
     </note>

   </sect3>

   <sect3 id="configure-options-features">
<!-- pgdoc-cn_start sig_en=7bb7bc6e9d89361602f2565d15eb942d sig_cn_org=None source=14.1 
    <title><productname>PostgreSQL</productname> Features</title>
________________________________________________________-->
    <title><productname>PostgreSQL</productname> 特性</title>
<!-- pgdoc-cn_end sig_en=7bb7bc6e9d89361602f2565d15eb942d -->

<!-- pgdoc-cn_start sig_en=b89d970ccd4173ccffbf9843cf3374da sig_cn_org=None source=14.1 
    <para>
     The options described in this section enable building of
     various <productname>PostgreSQL</productname> features that are not
     built by default.  Most of these are non-default only because they
     require additional software, as described in
     <xref linkend="install-requirements"/>.
    </para>
________________________________________________________-->
    <para>
     本节中描述的选项支持构建默认情况下未构建的各种<productname>PostgreSQL</productname>功能。
     其中大部分是非默认的，只是因为它们需要额外的软件，如<xref linkend="install-requirements"/>中所述。
    </para>
<!-- pgdoc-cn_end sig_en=b89d970ccd4173ccffbf9843cf3374da -->

     <variablelist>

      <varlistentry>
       <term><option>--enable-nls<optional>=<replaceable>LANGUAGES</replaceable></optional></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=333efcb66dc5435a312a24d5991980e3 sig_cn_org=None source=14.1 
        <para>
         Enables Native Language Support (<acronym>NLS</acronym>),
         that is, the ability to display a program's messages in a
         language other than English.
         <replaceable>LANGUAGES</replaceable> is an optional space-separated
         list of codes of the languages that you want supported, for
         example <literal>-&minus;enable-nls='de fr'</literal>.  (The intersection
         between your list and the set of actually provided
         translations will be computed automatically.)  If you do not
         specify a list, then all available translations are
         installed.
        </para>
________________________________________________________-->
        <para>
         打开本地语言支持（<acronym>NLS</acronym>），也就是以非英文显示程序消息的能力。<replaceable>LANGUAGES</replaceable>是一个空格分隔的语言代码列表， 表示你想支持的语言。例如<literal>--enable-nls='de fr'</literal> （你提供的列表和实际支持的列表之间的交集将会自动计算出来）。如果你没有声明一个列表，那么就会安装所有可用的翻译。
        </para>
<!-- pgdoc-cn_end sig_en=333efcb66dc5435a312a24d5991980e3 -->

<!-- pgdoc-cn_start sig_en=dd6ea0a6caf638e29c9e9f0014412c61 sig_cn_org=None source=14.1 
        <para>
         To use this option, you will need an implementation of the
         <application>Gettext</application> API.
        </para>
________________________________________________________-->
        <para>
         要使用这个选项，你需要一个<application>Gettext</application> API 的实现。
        </para>
<!-- pgdoc-cn_end sig_en=dd6ea0a6caf638e29c9e9f0014412c61 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-perl</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=9853b785d8318cb9f6971e7ba0b25733 sig_cn_org=None source=14.1 
        <para>
         Build the <application>PL/Perl</application> server-side language.
        </para>
________________________________________________________-->
        <para>
         制作<application>PL/Perl</application>服务器端编程语言。
        </para>
<!-- pgdoc-cn_end sig_en=9853b785d8318cb9f6971e7ba0b25733 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-python</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=063c3c02fffbfb8a8127634eb19b346c sig_cn_org=None source=14.1 
        <para>
         Build the <application>PL/Python</application> server-side language.
        </para>
________________________________________________________-->
        <para>
         制作<application>PL/Python</application>服务器端编程语言。
        </para>
<!-- pgdoc-cn_end sig_en=063c3c02fffbfb8a8127634eb19b346c -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tcl</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=f70d3dc9c7c98061e4b85e205b72e5fd sig_cn_org=None source=14.1 
        <para>
         Build the <application>PL/Tcl</application> server-side language.
        </para>
________________________________________________________-->
        <para>
         制作<application>PL/Tcl</application>服务器编程语言。
        </para>
<!-- pgdoc-cn_end sig_en=f70d3dc9c7c98061e4b85e205b72e5fd -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tclconfig=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=63be626bb46f6ebffe281f0b33d96ba0 sig_cn_org=None source=14.1 
        <para>
         Tcl installs the file <filename>tclConfig.sh</filename>, which
         contains configuration information needed to build modules
         interfacing to Tcl. This file is normally found automatically
         at a well-known location, but if you want to use a different
         version of Tcl you can specify the directory in which to look
         for <filename>tclConfig.sh</filename>.
        </para>
________________________________________________________-->
        <para>
         Tcl 安装文件<filename>tclConfig.sh</filename>，其中里面包含编译与 Tcl 接口的模块的配置信息。该文件通常可以自动地在一个众所周知的位置找到，但是如果你需要一个不同版本的 Tcl，
         您可以指定在其中查找<filename>tclConfig.sh</filename>的目录。
        </para>
<!-- pgdoc-cn_end sig_en=63be626bb46f6ebffe281f0b33d96ba0 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-icu</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=69ab9080b62f4a4247efb6aed579eac9 sig_cn_org=None source=14.1 
        <para>
         Build with support for
         the <productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>
         library, enabling use of ICU collation
         features<phrase condition="standalone-ignore"> (see
         <xref linkend="collation"/>)</phrase>.
         This requires the <productname>ICU4C</productname> package
         to be installed.  The minimum required version
         of <productname>ICU4C</productname> is currently 4.2.
        </para>
________________________________________________________-->
        <para>
         构建时支持<productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>
         库，从而能够使用 ICU 整理功能<phrase condition="standalone-ignore">（请参阅
         <xref linkend="collation"/>)</phrase>。 这需要安装<productname>ICU4C</productname>包。
         <productname>ICU4C</productname>的最低要求版本目前是 4.2。
        </para>
<!-- pgdoc-cn_end sig_en=69ab9080b62f4a4247efb6aed579eac9 -->

<!-- pgdoc-cn_start sig_en=b9b581d587822bce84bbcc2812d29faf sig_cn_org=None source=14.1 
        <para>
         By default,
         <productname>pkg-config</productname><indexterm><primary>pkg-config</primary></indexterm>
         will be used to find the required compilation options.  This is
         supported for <productname>ICU4C</productname> version 4.6 and later.
         For older versions, or if <productname>pkg-config</productname> is
         not available, the variables <envar>ICU_CFLAGS</envar>
         and <envar>ICU_LIBS</envar> can be specified
         to <filename>configure</filename>, like in this example:
<programlisting>
./configure ... -&minus;with-icu ICU_CFLAGS='-I/some/where/include' ICU_LIBS='-L/some/where/lib -licui18n -licuuc -licudata'
</programlisting>
         (If <productname>ICU4C</productname> is in the default search path
         for the compiler, then you still need to specify nonempty strings in
         order to avoid use of <productname>pkg-config</productname>, for
         example, <literal>ICU_CFLAGS=' '</literal>.)
        </para>
________________________________________________________-->
        <para>
         默认情况下，<productname>pkg-config</productname><indexterm><primary>pkg-config</primary></indexterm>
         将用于查找所需的编译选项。<productname>ICU4C</productname>4.6 及更高版本支持此功能。
         对于旧版本，或者如果<productname>pkg-config</productname> 不可用，可以将变量<envar>ICU_CFLAGS</envar>
         和<envar>ICU_LIBS</envar>指定为<filename>configure</filename>，就像在这个例子中：
<programlisting>
./configure ... --with-icu ICU_CFLAGS='-I/some/where/include' ICU_LIBS='-L/some/where/lib -licui18n -licuuc -licudata'
</programlisting>
         （如果<productname>ICU4C</productname>在编译器的默认搜索路径中，
         那么您仍然需要指定非空字符串以避免使用<productname>pkg-config</productname>，
         例如，<literal>ICU_CFLAGS=' '</literal>。）
        </para>
<!-- pgdoc-cn_end sig_en=b9b581d587822bce84bbcc2812d29faf -->
       </listitem>
      </varlistentry>

      <varlistentry id="configure-with-llvm">
       <term><option>--with-llvm</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=409e052db1b650738094a51704399a8d sig_cn_org=None source=14.1 
        <para>
         Build with support for <productname>LLVM</productname> based
         <acronym>JIT</acronym> compilation<phrase
         condition="standalone-ignore"> (see <xref
         linkend="jit"/>)</phrase>.  This
         requires the <productname>LLVM</productname> library to be installed.
         The minimum required version of <productname>LLVM</productname> is
         currently 3.9.
        </para>
________________________________________________________-->
        <para>
         支持基于<productname>LLVM</productname>的<acronym>JIT</acronym>编译
         <phrase condition="standalone-ignore">（请参阅<xref linkend ="jit"/>）</phrase>。 
         这需要安装<productname>LLVM</productname>库。
         当前<productname>LLVM</productname>的最低要求版本是3.9。
        </para>
<!-- pgdoc-cn_end sig_en=409e052db1b650738094a51704399a8d -->
<!-- pgdoc-cn_start sig_en=19c525db74aa6278437ce8ab0b0d6d0a sig_cn_org=None source=14.1 
        <para>
         <command>llvm-config</command><indexterm><primary>llvm-config</primary></indexterm>
         will be used to find the required compilation options.
         <command>llvm-config</command>, and then
         <command>llvm-config-$major-$minor</command> for all supported
         versions, will be searched for in your <envar>PATH</envar>.  If
         that would not yield the desired program,
         use <envar>LLVM_CONFIG</envar> to specify a path to the
         correct <command>llvm-config</command>. For example
<programlisting>
./configure ... -&minus;with-llvm LLVM_CONFIG='/path/to/llvm/bin/llvm-config'
</programlisting>
        </para>
________________________________________________________-->
        <para>
        <command>llvm-config</command><indexterm><primary>llvm-config</primary></indexterm>
        可用于查找所需的编译选项。<command>llvm-config</command>会在<envar>PATH</envar>
        上搜索所有受支持版本的<command>llvm-config-$major-$minor</command>。
        如果这不会产生所需的程序，请使用<envar>LLVM_CONFIG</envar>指定正确的
        <command>llvm-config</command>的路径。例如：
<programlisting>
./configure ... --with-llvm LLVM_CONFIG='/path/to/llvm/bin/llvm-config'
</programlisting>
        </para>
<!-- pgdoc-cn_end sig_en=19c525db74aa6278437ce8ab0b0d6d0a -->

<!-- pgdoc-cn_start sig_en=01c618186f6f0eaba8597e526d944388 sig_cn_org=None source=14.1 
        <para>
         <productname>LLVM</productname> support requires a compatible
         <command>clang</command> compiler (specified, if necessary, using the
         <envar>CLANG</envar> environment variable), and a working C++
         compiler (specified, if necessary, using the <envar>CXX</envar>
         environment variable).
        </para>
________________________________________________________-->
        <para>
         <productname>LLVM</productname>支持需要兼容的<command>clang</command>编译器
         （必要时使用<envar>CLANG</envar>环境变量指定）和有效的C++编译器
         （必要时使用使用<envar>CXX</envar>环境变量指定）。
        </para>
<!-- pgdoc-cn_end sig_en=01c618186f6f0eaba8597e526d944388 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-lz4</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=0a046a26782d4d196b70b385dc0227c9 sig_cn_org=77c9226be527d37bae2e517c8a004f2d source=15.7 
        <para>
         Build with <productname>LZ4</productname> compression support.
        </para>
________________________________________________________-->
        <para>
         使用<productname>LZ4</productname>压缩支持构建。
        </para>
<!-- pgdoc-cn_end sig_en=0a046a26782d4d196b70b385dc0227c9 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-zstd</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=22d663029ef8b86f7ce9e39602e7641a sig_cn_org=43c83c130f1a6303def9b44739eb373a source=15.7 
        <para>
         Build with <productname>Zstandard</productname> compression support.
        </para>
________________________________________________________-->
        <para>
         使用<productname>Zstandard</productname>压缩支持构建。
        </para>
<!-- pgdoc-cn_end sig_en=22d663029ef8b86f7ce9e39602e7641a -->
       </listitem>
      </varlistentry>

      <varlistentry>
<!-- pgdoc-cn_start sig_en=254166f2667b9a5ab55b32a83835a106 sig_cn_org=None source=14.1 
       <term><option>-&minus;with-ssl=<replaceable>LIBRARY</replaceable></option>
       <indexterm>
        <primary>OpenSSL</primary>
        <seealso>SSL</seealso>
       </indexterm>
       </term>
________________________________________________________-->
       <term><option>--with-ssl=<replaceable>LIBRARY</replaceable></option>
       <indexterm>
        <primary>OpenSSL</primary>
        <seealso>SSL</seealso>
       </indexterm>
       </term>
<!-- pgdoc-cn_end sig_en=254166f2667b9a5ab55b32a83835a106 -->
       <listitem>
<!-- pgdoc-cn_start sig_en=6a807167ca4ba957f1c546e83e361bf1 sig_cn_org=None source=14.1 
        <para>
         Build with support for <acronym>SSL</acronym> (encrypted)
         connections. The only <replaceable>LIBRARY</replaceable>
         supported is <option>openssl</option>. This requires the
         <productname>OpenSSL</productname> package to be installed.
         <filename>configure</filename> will check for the required
         header files and libraries to make sure that your
         <productname>OpenSSL</productname> installation is sufficient
         before proceeding.
        </para>
________________________________________________________-->
        <para>
         编译<acronym>SSL</acronym>（加密）连接支持。唯一支持的<replaceable>LIBRARY</replaceable>是 <option>openssl</option>。这个选项需要安装<productname>OpenSSL</productname>包。<filename>configure</filename>将会检查所需的头文件和库以确保你的 <productname>OpenSSL</productname>安装足以让配置继续下去。
        </para>
<!-- pgdoc-cn_end sig_en=6a807167ca4ba957f1c546e83e361bf1 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-openssl</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=4094cf8e7754a2e3a6aa721eb2866d09 sig_cn_org=None source=14.1 
        <para>
         Obsolete equivalent of <literal>-&minus;with-ssl=openssl</literal>.
        </para>
________________________________________________________-->
        <para>
               相当于以前的 <literal>--with-ssl=openssl</literal>.
              </para>
<!-- pgdoc-cn_end sig_en=4094cf8e7754a2e3a6aa721eb2866d09 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-gssapi</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=54f657e1d2f973260807bf87c903171b sig_cn_org=None source=14.1 
        <para>
         Build with support for GSSAPI authentication. On many systems, the
         GSSAPI system (usually a part of the Kerberos installation) is not
         installed in a location
         that is searched by default (e.g., <filename>/usr/include</filename>,
         <filename>/usr/lib</filename>), so you must use the options
         <option>-&minus;with-includes</option> and <option>-&minus;with-libraries</option> in
         addition to this option.  <filename>configure</filename> will check
         for the required header files and libraries to make sure that
         your GSSAPI installation is sufficient before proceeding.
        </para>
________________________________________________________-->
        <para>
         构建支持 GSSAPI 身份验证。在许多系统上，GSSAPI 系统（通常是 Kerberos 安装的一部分）
         并未安装在默认搜索的位置（例如，<filename>/usr/include</filename>、
         <filename>/usr/lib</filename>)，因此除此选项外，您还必须使用选项
         <option>--with-includes</option>和<option>--with-libraries</option>。
         <filename>configure</filename>将检查所需的头文件和库，以确保您的 GSSAPI 安装足够，然后再继续。
        </para>
<!-- pgdoc-cn_end sig_en=54f657e1d2f973260807bf87c903171b -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ldap</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=9e14f06ae714fa4c3e88b842b8353758 sig_cn_org=None source=14.1 
        <para>
         Build with <acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm>
         support for authentication and connection parameter lookup (see
         <phrase id="install-ldap-links"><xref linkend="libpq-ldap"/> and
         <xref linkend="auth-ldap"/></phrase> for more information). On Unix,
         this requires the <productname>OpenLDAP</productname> package to be
         installed. On Windows, the default <productname>WinLDAP</productname>
         library is used.  <filename>configure</filename> will check for the required
         header files and libraries to make sure that your
         <productname>OpenLDAP</productname> installation is sufficient before
         proceeding.
        </para>
________________________________________________________-->
        <para>
         为认证和连接参数查找编译<acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm>支持
         （详见<xref linkend="libpq-ldap"/>和<xref linkend="auth-ldap"/>）。在 Unix 上，这需要安装<productname>OpenLDAP</productname>包。在 Windows 上将使用默认的<productname>WinLDAP</productname>库。<filename>configure</filename>将会检查所需的头文件和库以确保你的 <productname>OpenLDAP</productname>安装足以让配置继续下去。
        </para>
<!-- pgdoc-cn_end sig_en=9e14f06ae714fa4c3e88b842b8353758 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pam</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=7c7004da090cc35bec53114703fe7bf1 sig_cn_org=None source=14.1 
        <para>
         Build with <acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>
         (Pluggable Authentication Modules) support.
        </para>
________________________________________________________-->
        <para>
         使用<acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>（可插拔身份验证模块）支持构建。
        </para>
<!-- pgdoc-cn_end sig_en=7c7004da090cc35bec53114703fe7bf1 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-bsd-auth</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=4b17c6c11ac3854c2cd076d1cffb38b6 sig_cn_org=None source=14.1 
        <para>
         Build with BSD Authentication support.
         (The BSD Authentication framework is
         currently only available on OpenBSD.)
        </para>
________________________________________________________-->
        <para>
         使用 BSD 身份验证支持构建。（BSD 身份验证框架目前仅在 OpenBSD 上可用。）
        </para>
<!-- pgdoc-cn_end sig_en=4b17c6c11ac3854c2cd076d1cffb38b6 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-systemd</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=01749c48850d00d7a614c42804a690a8 sig_cn_org=None source=14.1 
        <para>
         Build with support
         for <application>systemd</application><indexterm><primary>systemd</primary></indexterm>
         service notifications.  This improves integration if the server
         is started under <application>systemd</application> but has no impact
         otherwise<phrase condition="standalone-ignore">; see <xref linkend="server-start"/> for more
         information</phrase>.  <application>libsystemd</application> and the
         associated header files need to be installed to use this option.
        </para>
________________________________________________________-->
        <para>
         编译对<application>systemd</application><indexterm><primary>systemd</primary></indexterm>
         服务通知的支持。如果服务器是在<application>systemd</application>
         机制下被启动，这可以提高集成度，否则不会有影响
         否则，<phrase condition="standalone-ignore">; 参考 <xref linkend="server-start"/> 查看更多信息
         </phrase>。要使用这个选项，必须安装<application>libsystemd</application>
         以及相关的头文件。
        </para>
<!-- pgdoc-cn_end sig_en=01749c48850d00d7a614c42804a690a8 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-bonjour</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=87531fcc134cf8961e9d9758c76eb57b sig_cn_org=None source=14.1 
        <para>
         Build with support for Bonjour automatic service discovery.
         This requires Bonjour support in your operating system.
         Recommended on macOS.
        </para>
________________________________________________________-->
        <para>
         构建支持 Bonjour 自动服务发现。这需要您的操作系统支持 Bonjour。推荐在 macOS 上使用。
        </para>
<!-- pgdoc-cn_end sig_en=87531fcc134cf8961e9d9758c76eb57b -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-uuid=<replaceable>LIBRARY</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=db5b64f910ea8c177cc1725aafdbb95c sig_cn_org=None source=14.1 
        <para>
         Build the <xref linkend="uuid-ossp"/> module
         (which provides functions to generate UUIDs), using the specified
         UUID library.<indexterm><primary>UUID</primary></indexterm>
         <replaceable>LIBRARY</replaceable> must be one of:
        </para>
________________________________________________________-->
        <para>
         使用指定的 UUID 库编译<xref linkend="uuid-ossp"/>模块（提供生成 UUID 的函数）。
         <indexterm><primary>UUID</primary></indexterm>
         <replaceable>LIBRARY</replaceable>必须是下列之一：
        </para>
<!-- pgdoc-cn_end sig_en=db5b64f910ea8c177cc1725aafdbb95c -->
        <itemizedlist>
         <listitem>
<!-- pgdoc-cn_start sig_en=68129dc5d9f78922b88d68c6466f12ec sig_cn_org=177965b6dd78872283c25cb8e002ab43 source=15.7 
          <para>
           <option>bsd</option> to use the UUID functions found in FreeBSD
           and some other BSD-derived systems
          </para>
________________________________________________________-->
          <para>
           使用<option>bsd</option>来使用在FreeBSD和其他一些基于BSD的系统中找到的UUID函数
          </para>
<!-- pgdoc-cn_end sig_en=68129dc5d9f78922b88d68c6466f12ec -->
         </listitem>
         <listitem>
<!-- pgdoc-cn_start sig_en=2f41a90cb051668703c091178ab9b382 sig_cn_org=None source=14.1 
          <para>
           <option>e2fs</option> to use the UUID library created by
           the <literal>e2fsprogs</literal> project; this library is present in most
           Linux systems and in macOS, and can be obtained for other
           platforms as well
          </para>
________________________________________________________-->
          <para>
           <option>e2fs</option>，用来使用<literal>e2fsprogs</literal>项目创建的 UUID 库，
           这个库出现在大部分的 Linux 系统和 macOS 中，并且也能找到用于其他平台的
           版本
          </para>
<!-- pgdoc-cn_end sig_en=2f41a90cb051668703c091178ab9b382 -->
         </listitem>
         <listitem>
<!-- pgdoc-cn_start sig_en=dc7dfef14275e678d81619604f5c71fd sig_cn_org=None source=14.1 
          <para>
           <option>ossp</option> to use the <ulink
           url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUID library</ulink>
          </para>
________________________________________________________-->
          <para>
           <option>ossp</option>，用来使用<ulink
           url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUID library</ulink>
          </para>
<!-- pgdoc-cn_end sig_en=dc7dfef14275e678d81619604f5c71fd -->
         </listitem>
        </itemizedlist>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ossp-uuid</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=a90a2e5a2158a257880d227db04a397c sig_cn_org=None source=14.1 
        <para>
         Obsolete equivalent of <literal>-&minus;with-uuid=ossp</literal>.
        </para>
________________________________________________________-->
        <para>
         <literal>--with-uuid=ossp</literal>的已废弃的等效选项。
        </para>
<!-- pgdoc-cn_end sig_en=a90a2e5a2158a257880d227db04a397c -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxml</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=50f6369f1af9adaa7cab4d8d86b24e9f sig_cn_org=None source=14.1 
        <para>
         Build with libxml2, enabling SQL/XML support.  Libxml2 version 2.6.23 or
         later is required for this feature.
        </para>
________________________________________________________-->
        <para>
         使用 libxml2 构建，启用 SQL/XML 支持。 此功能需要 Libxml2 版本 2.6.23 或更高版本。
        </para>
<!-- pgdoc-cn_end sig_en=50f6369f1af9adaa7cab4d8d86b24e9f -->

<!-- pgdoc-cn_start sig_en=5fd20ae762019000887d3a65df4f8433 sig_cn_org=None source=14.1 
        <para>
         To detect the required compiler and linker options, PostgreSQL will
         query <command>pkg-config</command>, if that is installed and knows
         about libxml2.  Otherwise the program <command>xml2-config</command>,
         which is installed by libxml2, will be used if it is found.  Use
         of <command>pkg-config</command> is preferred, because it can deal
         with multi-architecture installations better.
        </para>
________________________________________________________-->
        <para>
         为了检测所需的编译器和链接器选项，PostgreSQL 将查询<command>pkg-config</command>，如果它已安装并且知道 libxml2。
         否则，libxml2 安装的程序<command>xml2-config</command>将在找到时使用。
         首选使用<command>pkg-config</command>，因为它可以更好地处理多架构安装。
        </para>
<!-- pgdoc-cn_end sig_en=5fd20ae762019000887d3a65df4f8433 -->

<!-- pgdoc-cn_start sig_en=1f87ca7a6d09f4120a4a715ab124206a sig_cn_org=None source=14.1 
        <para>
         To use a libxml2 installation that is in an unusual location, you
         can set <command>pkg-config</command>-related environment
         variables (see its documentation), or set the environment variable
         <envar>XML2_CONFIG</envar> to point to
         the <command>xml2-config</command> program belonging to the libxml2
         installation, or set the variables <envar>XML2_CFLAGS</envar>
         and <envar>XML2_LIBS</envar>.  (If <command>pkg-config</command> is
         installed, then to override its idea of where libxml2 is you must
         either set <envar>XML2_CONFIG</envar> or set
         both <envar>XML2_CFLAGS</envar> and <envar>XML2_LIBS</envar> to
         nonempty strings.)
        </para>
________________________________________________________-->
        <para>
         要使用位于不寻常位置的 libxml2 安装，您可以设置与<command>pkg-config</command>相关的环境变量（请参阅其文档），或将环境变量<envar>XML2_CONFIG</envar>设置为指向 到属于 libxml2 安装的<command>xml2-config</command>程序，或设置变量<envar>XML2_CFLAGS</envar>
         和<envar>XML2_LIBS</envar>。 （如果安装了<command>pkg-config</command>，那么要覆盖它的 libxml2 位置的想法，您必须设置<envar>XML2_CONFIG</envar>或同时设置<envar>XML2_CFLAGS</envar>和<envar>XML2_LIBS</envar>到非空字符串。）
        </para>
<!-- pgdoc-cn_end sig_en=1f87ca7a6d09f4120a4a715ab124206a -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxslt</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=a42e66026bbd80afb9c99286d1479c92 sig_cn_org=None source=14.1 
        <para>
         Build with libxslt, enabling the
         <xref linkend="xml2"/>
         module to perform XSL transformations of XML.
         <option>-&minus;with-libxml</option> must be specified as well.
        </para>
________________________________________________________-->
        <para>
         使用 libxslt 构建，使<xref linkend="xml2"/>模块能够执行 XML 的 XSL 转换。
         <option>--with-libxml</option>也必须指定。
        </para>
<!-- pgdoc-cn_end sig_en=a42e66026bbd80afb9c99286d1479c92 -->
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-anti-features">
<!-- pgdoc-cn_start sig_en=a1ce33e20f0d541a917e059155f355c9 sig_cn_org=None source=14.1 
    <title>Anti-Features</title>
________________________________________________________-->
    <title>Anti-Features</title>
<!-- pgdoc-cn_end sig_en=a1ce33e20f0d541a917e059155f355c9 -->

<!-- pgdoc-cn_start sig_en=5e238869791a6edc7141a1d227429e28 sig_cn_org=None source=14.1 
    <para>
     The options described in this section allow disabling
     certain <productname>PostgreSQL</productname> features that are built
     by default, but which might need to be turned off if the required
     software or system features are not available.  Using these options is
     not recommended unless really necessary.
    </para>
________________________________________________________-->
    <para>
     本节中描述的选项允许禁用默认构建的某些<productname>PostgreSQL</productname>功能，
     但如果所需的软件或系统功能不可用，则可能需要关闭这些功能。除非确实有必要，否则不建议使用这些选项。
    </para>
<!-- pgdoc-cn_end sig_en=5e238869791a6edc7141a1d227429e28 -->

     <variablelist>

      <varlistentry>
       <term><option>--without-readline</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=9154a6a9335ad1b357e9682904b71c79 sig_cn_org=None source=14.1 
        <para>
         Prevents use of the <application>Readline</application> library
         (and <application>libedit</application> as well).  This option disables
         command-line editing and history in
         <application>psql</application>.
        </para>
________________________________________________________-->
        <para>
         防止使用<application>Readline</application>库（以及<application>libedit</application>）。
         此选项禁用<application>psql</application>中的命令行编辑和历史记录。
        </para>
<!-- pgdoc-cn_end sig_en=9154a6a9335ad1b357e9682904b71c79 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libedit-preferred</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=8ae43c3ce651de35e2659ee3c7f425dd sig_cn_org=None source=14.1 
        <para>
         Favors the use of the BSD-licensed <application>libedit</application> library
         rather than GPL-licensed <application>Readline</application>.  This option
         is significant only if you have both libraries installed; the
         default in that case is to use <application>Readline</application>.
        </para>
________________________________________________________-->
        <para>
         赞成使用 BSD 许可的<application>libedit</application>库而不是 GPL 许可的<application>Readline</application>。 仅当您安装了两个库时，此选项才有意义； 这种情况下的默认设置是使用<application>Readline</application>。
        </para>
<!-- pgdoc-cn_end sig_en=8ae43c3ce651de35e2659ee3c7f425dd -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-zlib</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=8dda687b4341c3fd489e16c6da162de6 sig_cn_org=None source=14.1 
        <para>
         <indexterm>
          <primary>zlib</primary>
         </indexterm>
         Prevents use of the <application>Zlib</application> library.
         This disables
         support for compressed archives in <application>pg_dump</application>
         and <application>pg_restore</application>.
        </para>
________________________________________________________-->
        <para>
         <indexterm>
          <primary>zlib</primary>
         </indexterm>
         防止使用<application>Zlib</application>库。这将禁用对<application>pg_dump</application>
         和<application>pg_restore</application>中压缩档案的支持。
        </para>
<!-- pgdoc-cn_end sig_en=8dda687b4341c3fd489e16c6da162de6 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-spinlocks</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=e840d782033bfadffc1d9f8c07c135b6 sig_cn_org=None source=14.1 
        <para>
         Allow the build to succeed even if <productname>PostgreSQL</productname>
         has no CPU spinlock support for the platform.  The lack of
         spinlock support will result in very poor performance; therefore,
         this option should only be used if the build aborts and
         informs you that the platform lacks spinlock support. If this
         option is required to build <productname>PostgreSQL</productname> on
         your platform, please report the problem to the
         <productname>PostgreSQL</productname> developers.
        </para>
________________________________________________________-->
        <para>
         即便<productname>PostgreSQL</productname>对于该平台没有 CPU 自旋锁支持，也允许编译成功。自旋锁支持的缺乏会导致非常差的性能，因此这个选项只有当编译终端或者通知你该平台缺乏自旋锁支持时才应被使用。如果在你的平台上要求使用该选项来编译<productname>PostgreSQL</productname>，请将此问题报告给<productname>PostgreSQL</productname>的开发者。
        </para>
<!-- pgdoc-cn_end sig_en=e840d782033bfadffc1d9f8c07c135b6 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-atomics</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=f0f1d7dfbdf480dce0ded7961126ac64 sig_cn_org=None source=14.1 
        <para>
         Disable use of CPU atomic operations.  This option does nothing on
         platforms that lack such operations.  On platforms that do have
         them, this will result in poor performance.  This option is only
         useful for debugging or making performance comparisons.
        </para>
________________________________________________________-->
        <para>
         禁用 CPU 原子操作。 此选项在缺少此类操作的平台上不起作用。 在具有它们的平台上，这将导致性能不佳。 此选项仅用于调试或进行性能比较。
        </para>
<!-- pgdoc-cn_end sig_en=f0f1d7dfbdf480dce0ded7961126ac64 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-thread-safety</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=3ef1aac57a9aaaeca15a628766c4a022 sig_cn_org=None source=14.1 
        <para>
         Disable the thread-safety of client libraries.  This prevents
         concurrent threads in <application>libpq</application> and
         <application>ECPG</application> programs from safely controlling
         their private connection handles.  Use this only on platforms
         with deficient threading support.
        </para>
________________________________________________________-->
        <para>
         禁用客户端库的线程安全性。这会阻止<application>libpq</application>和<application>ECPG</application>程序中的并发线程安全地控制它们私有的连接句柄。仅在线程支持不足的平台上使用它。
        </para>
<!-- pgdoc-cn_end sig_en=3ef1aac57a9aaaeca15a628766c4a022 -->
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-build-process">
<!-- pgdoc-cn_start sig_en=c7fe987b91225f5b5a2ef8c597994d79 sig_cn_org=None source=14.1 
    <title>Build Process Details</title>
________________________________________________________-->
    <title>构建过程详细信息</title>
<!-- pgdoc-cn_end sig_en=c7fe987b91225f5b5a2ef8c597994d79 -->

     <variablelist>

      <varlistentry>
       <term><option>--with-includes=<replaceable>DIRECTORIES</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=34217d9da7ff6b29d60e8b4ddd21a35b sig_cn_org=None source=14.1 
        <para>
         <replaceable>DIRECTORIES</replaceable> is a colon-separated list of
         directories that will be added to the list the compiler
         searches for header files. If you have optional packages
         (such as GNU <application>Readline</application>) installed in a non-standard
         location,
         you have to use this option and probably also the corresponding
         <option>-&minus;with-libraries</option> option.
        </para>
________________________________________________________-->
        <para>
         <replaceable>DIRECTORIES</replaceable>是一个以冒号分隔的目录列表，这些目录将被添加到编译器搜索头文件的列表中。
         如果您在非标准位置安装了可选包（例如 GNU<application>Readline</application>），则必须使用此选项，并且可能还必须使用相应的<option>--with-libraries</option>选项。
        </para>
<!-- pgdoc-cn_end sig_en=34217d9da7ff6b29d60e8b4ddd21a35b -->
<!-- pgdoc-cn_start sig_en=59f5e5ff21e46bc9d0c277ad177feeb0 sig_cn_org=None source=14.1 
        <para>
         Example: <literal>-&minus;with-includes=/opt/gnu/include:/usr/sup/include</literal>.
        </para>
________________________________________________________-->
        <para>
         例子：<literal>--with-includes=/opt/gnu/include:/usr/sup/include</literal>.
        </para>
<!-- pgdoc-cn_end sig_en=59f5e5ff21e46bc9d0c277ad177feeb0 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libraries=<replaceable>DIRECTORIES</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=3da78499f538b5f2ddd31daf7912eca2 sig_cn_org=None source=14.1 
        <para>
         <replaceable>DIRECTORIES</replaceable> is a colon-separated list of
         directories to search for libraries. You will probably have
         to use this option (and the corresponding
         <option>-&minus;with-includes</option> option) if you have packages
         installed in non-standard locations.
        </para>
________________________________________________________-->
        <para>
         <replaceable>DIRECTORIES</replaceable>是用于搜索库的以冒号分隔的目录列表。
         如果您在非标准位置安装了软件包，您可能必须使用此选项（以及相应的<option>--with-includes</option>选项）。
         installed in non-standard locations.
        </para>
<!-- pgdoc-cn_end sig_en=3da78499f538b5f2ddd31daf7912eca2 -->
<!-- pgdoc-cn_start sig_en=872a7987ba071725fdf4bb7a3b93c4bf sig_cn_org=None source=14.1 
        <para>
         Example: <literal>-&minus;with-libraries=/opt/gnu/lib:/usr/sup/lib</literal>.
        </para>
________________________________________________________-->
        <para>
         例子：<literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</literal>.
        </para>
<!-- pgdoc-cn_end sig_en=872a7987ba071725fdf4bb7a3b93c4bf -->
       </listitem>
      </varlistentry>

      <varlistentry>
<!-- pgdoc-cn_start sig_en=a9e000bc7671aae4ff0a9fa1cd017647 sig_cn_org=None source=14.1 
       <term><option>-&minus;with-system-tzdata=<replaceable>DIRECTORY</replaceable></option>
       <indexterm>
        <primary>time zone data</primary>
       </indexterm>
       </term>
________________________________________________________-->
       <term><option>--with-system-tzdata=<replaceable>DIRECTORY</replaceable></option>
       <indexterm>
        <primary>time zone data</primary>
       </indexterm>
       </term>
<!-- pgdoc-cn_end sig_en=a9e000bc7671aae4ff0a9fa1cd017647 -->
       <listitem>
<!-- pgdoc-cn_start sig_en=ea93081c3e4f5b44e960b14c5c5c56ae sig_cn_org=None source=14.1 
        <para>
         <productname>PostgreSQL</productname> includes its own time zone database,
         which it requires for date and time operations.  This time zone
         database is in fact compatible with the IANA time zone
         database provided by many operating systems such as FreeBSD,
         Linux, and Solaris, so it would be redundant to install it again.
         When this option is used, the system-supplied time zone database
         in <replaceable>DIRECTORY</replaceable> is used instead of the one
         included in the PostgreSQL source distribution.
         <replaceable>DIRECTORY</replaceable> must be specified as an
         absolute path.  <filename>/usr/share/zoneinfo</filename> is a
         likely directory on some operating systems.  Note that the
         installation routine will not detect mismatching or erroneous time
         zone data.  If you use this option, you are advised to run the
         regression tests to verify that the time zone data you have
         pointed to works correctly with <productname>PostgreSQL</productname>.
        </para>
________________________________________________________-->
        <para>
         <productname>PostgreSQL</productname>包含它自己的时区数据库，它被用于日期和时间操作。这个时区数据库实际上是和 IANA 时区数据库相兼容的，后者在很多操作系统如 FreeBSD、Linux和Solaris上都有提供，因此再次安装它可能是冗余的。当这个选项被使用时，将不会使用<replaceable>DIRECTORY</replaceable>中系统提供的时区数据库，而是使用包括在 PostgreSQL 源码发布中的时区数据库。<replaceable>DIRECTORY</replaceable>必须被指定为一个绝对路径。<filename>/usr/share/zoneinfo</filename>在某些操作系统上是一个很有可能的路径。注意安装例程将不会检测不匹配或错误的时区数据。如果你使用这个选项，建议你运行回归测试来验证你指定的时区数据能正常地工作在<productname>PostgreSQL</productname>中。
        </para>
<!-- pgdoc-cn_end sig_en=ea93081c3e4f5b44e960b14c5c5c56ae -->

<!-- pgdoc-cn_start sig_en=eba44d55f8ffcc94334b680275910e44 sig_cn_org=None source=14.1 
        <indexterm><primary>cross compilation</primary></indexterm>
________________________________________________________-->
        <indexterm><primary>交叉编译</primary></indexterm>
<!-- pgdoc-cn_end sig_en=eba44d55f8ffcc94334b680275910e44 -->

<!-- pgdoc-cn_start sig_en=eda8efc70ba2b15fb7a0bd5184f02101 sig_cn_org=None source=14.1 
        <para>
         This option is mainly aimed at binary package distributors
         who know their target operating system well.  The main
         advantage of using this option is that the PostgreSQL package
         won't need to be upgraded whenever any of the many local
         daylight-saving time rules change.  Another advantage is that
         PostgreSQL can be cross-compiled more straightforwardly if the
         time zone database files do not need to be built during the
         installation.
        </para>
________________________________________________________-->
        <para>
         这个选项主要针对那些很了解他们的目标操作系统的二进制包发布者。使用这个选项主要优点是不管何时当众多本地夏令时规则之一改变时， PostgreSQL 包不需要被升级。另一个优点是如果时区数据库文件在安装时不需要被编译， PostgreSQL 可以被更直接地交叉编译。
        </para>
<!-- pgdoc-cn_end sig_en=eda8efc70ba2b15fb7a0bd5184f02101 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-extra-version=<replaceable>STRING</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=cf22d0c93fec5b0059731c46de096370 sig_cn_org=None source=14.1 
        <para>
         Append <replaceable>STRING</replaceable> to the PostgreSQL version number.  You
         can use this, for example, to mark binaries built from unreleased Git
         snapshots or containing custom patches with an extra version string,
         such as a <command>git describe</command> identifier or a
         distribution package release number.
        </para>
________________________________________________________-->
        <para>
         将<replaceable>STRING</replaceable>附加到 PostgreSQL 版本号。 例如，您可以使用它来标记从未发布的 Git 快照构建的二进制文件或包含带有额外版本字符串的自定义补丁，例如<command>git describe</command>标识符或分发包版本号。
        </para>
<!-- pgdoc-cn_end sig_en=cf22d0c93fec5b0059731c46de096370 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-rpath</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=c1f9f446f006d95bf381efb60d614ebd sig_cn_org=None source=14.1 
        <para>
         Do not mark <productname>PostgreSQL</productname>'s executables
         to indicate that they should search for shared libraries in the
         installation's library directory (see <option>-&minus;libdir</option>).
         On most platforms, this marking uses an absolute path to the
         library directory, so that it will be unhelpful if you relocate
         the installation later.  However, you will then need to provide
         some other way for the executables to find the shared libraries.
         Typically this requires configuring the operating system's
         dynamic linker to search the library directory; see
         <xref linkend="install-post-shlibs"/> for more detail.
        </para>
________________________________________________________-->
        <para>
         不要标记<productname>PostgreSQL</productname>的可执行文件以表明它们应该在安装的库目录中搜索共享库（请参阅<option>--libdir</option>）。
         在大多数平台上，此标记使用库目录的绝对路径，因此如果您稍后重新定位安装将无济于事。但是，您随后需要为可执行文件提供一些其他方式来查找共享库。
         通常这需要配置操作系统的动态链接器来搜索库目录； 有关更多详细信息，请参阅<xref linkend="install-post-shlibs"/>。
        </para>
<!-- pgdoc-cn_end sig_en=c1f9f446f006d95bf381efb60d614ebd -->
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-misc">
<!-- pgdoc-cn_start sig_en=206e0a143b1df5269eea2d914c2ff0d6 sig_cn_org=None source=14.1 
    <title>Miscellaneous</title>
________________________________________________________-->
    <title>杂项</title>
<!-- pgdoc-cn_end sig_en=206e0a143b1df5269eea2d914c2ff0d6 -->

<!-- pgdoc-cn_start sig_en=f11dce5614f252532fd55ab593e30cb2 sig_cn_org=None source=14.1 
    <para>
     It's fairly common, particularly for test builds, to adjust the
     default port number with <option>-&minus;with-pgport</option>.
     The other options in this section are recommended only for advanced
     users.
    </para>
________________________________________________________-->
    <para>
     使用<option>--with-pgport</option>调整默认端口号是相当常见的，尤其是对于测试版本。
     本节中的其他选项仅建议高级用户使用。
    </para>
<!-- pgdoc-cn_end sig_en=f11dce5614f252532fd55ab593e30cb2 -->

     <variablelist>

      <varlistentry>
       <term><option>--with-pgport=<replaceable>NUMBER</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=66187329e359a9c34f3eb735a3e8e5e5 sig_cn_org=None source=14.1 
        <para>
         Set <replaceable>NUMBER</replaceable> as the default port number for
         server and clients. The default is 5432. The port can always
         be changed later on, but if you specify it here then both
         server and clients will have the same default compiled in,
         which can be very convenient.  Usually the only good reason
         to select a non-default value is if you intend to run multiple
         <productname>PostgreSQL</productname> servers on the same machine.
        </para>
________________________________________________________-->
        <para>
         将<replaceable>NUMBER</replaceable>设置为服务器和客户端的默认端口号。默认为 5432。
         以后可以随时更改端口，但是如果您在此处指定它，那么服务器和客户端都将编译相同的默认值，这会非常方便。
         通常选择非默认值的唯一理由是如果您打算在同一台机器上运行多个<productname>PostgreSQL</productname>服务器。
        </para>
<!-- pgdoc-cn_end sig_en=66187329e359a9c34f3eb735a3e8e5e5 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-krb-srvnam=<replaceable>NAME</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=415804d4a20624d5b3ba1b891ad2f960 sig_cn_org=None source=14.1 
        <para>
         The default name of the Kerberos service principal used
         by GSSAPI.
         <literal>postgres</literal> is the default. There's usually no
         reason to change this unless you are building for a Windows
         environment, in which case it must be set to upper case
         <literal>POSTGRES</literal>.
        </para>
________________________________________________________-->
        <para>
         GSSAPI 使用的 Kerberos 服务主体的默认名称。<literal>postgres</literal>是默认值。
         通常没有理由更改它，除非您是为 Windows 环境构建的，在这种情况下，它必须设置为大写<literal>POSTGRES</literal>。
        </para>
<!-- pgdoc-cn_end sig_en=415804d4a20624d5b3ba1b891ad2f960 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=885a6475887a359cb694909e2bdbc052 sig_cn_org=None source=14.1 
        <para>
         Set the <firstterm>segment size</firstterm>, in gigabytes.  Large tables are
         divided into multiple operating-system files, each of size equal
         to the segment size.  This avoids problems with file size limits
         that exist on many platforms.  The default segment size, 1 gigabyte,
         is safe on all supported platforms.  If your operating system has
         <quote>largefile</quote> support (which most do, nowadays), you can use
         a larger segment size.  This can be helpful to reduce the number of
         file descriptors consumed when working with very large tables.
         But be careful not to select a value larger than is supported
         by your platform and the file systems you intend to use.  Other
         tools you might wish to use, such as <application>tar</application>, could
         also set limits on the usable file size.
         It is recommended, though not absolutely required, that this value
         be a power of 2.
         Note that changing this value breaks on-disk database compatibility,
         meaning you cannot use <command>pg_upgrade</command> to upgrade to
         a build with a different segment size.
        </para>
________________________________________________________-->
        <para>
         设置<firstterm>segment size</firstterm>，以千兆字节为单位。大表被分成多个操作系统文件，每个文件的大小等于段的大小。
         这避免了许多平台上存在的文件大小限制问题。默认段大小 1 GB 在所有支持的平台上都是安全的。
         如果您的操作系统支持<quote>largefile</quote>（现在大多数都支持），您可以使用更大的段大小。
         这有助于减少处理非常大的表时消耗的文件描述符的数量。但请注意不要选择大于您的平台和您打算使用的文件系统支持的值。
         您可能希望使用的其他工具，例如<application>tar</application>，也可以设置可用文件大小的限制。
         建议（虽然不是绝对要求）此值是 2 的幂。
         请注意，更改此值会破坏磁盘数据库兼容性，这意味着您不能使用<command>pg_upgrade</command>升级到具有不同段大小。
        </para>
<!-- pgdoc-cn_end sig_en=885a6475887a359cb694909e2bdbc052 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=9f7a3eff25fd2ec063fe7265517af973 sig_cn_org=None source=14.1 
        <para>
         Set the <firstterm>block size</firstterm>, in kilobytes.  This is the unit
         of storage and I/O within tables.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 32 (kilobytes).
         Note that changing this value breaks on-disk database compatibility,
         meaning you cannot use <command>pg_upgrade</command> to upgrade to
         a build with a different block size.
        </para>
________________________________________________________-->
        <para>
         设置<firstterm>block size</firstterm>，以千字节为单位。这是表中的存储和 I/O 
         默认值为 8 KB，适用于大多数情况； 但其他值在特殊情况下可能有用。
         该值必须是 1 到 32（千字节）之间的 2 的幂。
         请注意，更改此值会破坏磁盘数据库兼容性，这意味着您不能使用<command>pg_upgrade</command>升级到具有不同块大小的构建。
        </para>
<!-- pgdoc-cn_end sig_en=9f7a3eff25fd2ec063fe7265517af973 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=30a5853a3d9e1bb85d8e070639880f91 sig_cn_org=None source=14.1 
        <para>
         Set the <firstterm>WAL block size</firstterm>, in kilobytes.  This is the unit
         of storage and I/O within the WAL log.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 64 (kilobytes).
         Note that changing this value breaks on-disk database compatibility,
         meaning you cannot use <command>pg_upgrade</command> to upgrade to
         a build with a different WAL block size.
        </para>
________________________________________________________-->
        <para>
         设置<firstterm>WAL block size</firstterm>，以千字节为单位。这是 WAL 日志中的存储和 I/O 单元。
         默认值为 8 KB，适用于大多数情况； 但其他值在特殊情况下可能有用。该值必须是 1 到 64（千字节）之间的 2 的幂。
         请注意，更改此值会破坏磁盘数据库兼容性，这意味着您不能使用<command>pg_upgrade</command>升级到具有不同 WAL 块大小的构建。
        </para>
<!-- pgdoc-cn_end sig_en=30a5853a3d9e1bb85d8e070639880f91 -->
       </listitem>
      </varlistentry>

     </variablelist>

   </sect3>

   <sect3 id="configure-options-devel">
<!-- pgdoc-cn_start sig_en=1a1a64edb3187572a4d5e87127c5110f sig_cn_org=None source=14.1 
    <title>Developer Options</title>
________________________________________________________-->
    <title>Developer Options</title>
<!-- pgdoc-cn_end sig_en=1a1a64edb3187572a4d5e87127c5110f -->

<!-- pgdoc-cn_start sig_en=9a05b7835cac048ac8ae61b9d679238c sig_cn_org=None source=14.1 
    <para>
     Most of the options in this section are only of interest for
     developing or debugging <productname>PostgreSQL</productname>.
     They are not recommended for production builds, except
     for <option>-&minus;enable-debug</option>, which can be useful to enable
     detailed bug reports in the unlucky event that you encounter a bug.
     On platforms supporting DTrace, <option>-&minus;enable-dtrace</option>
     may also be reasonable to use in production.
    </para>
________________________________________________________-->
    <para>
     本节中的大多数选项仅适用于开发或调试<productname>PostgreSQL</productname>。
     除了<option>--enable-debug</option>之外，不建议将它们用于生产版本，这对于在遇到错误的不幸事件中启用详细的错误报告非常有用。
     在支持 DTrace 的平台上，在生产中使用<option>--enable-dtrace</option>也可能是合理的。
    </para>
<!-- pgdoc-cn_end sig_en=9a05b7835cac048ac8ae61b9d679238c -->

<!-- pgdoc-cn_start sig_en=7a437ab9dabaea5c2c949166bc67f8b5 sig_cn_org=None source=14.1 
    <para>
     When building an installation that will be used to develop code inside
     the server, it is recommended to use at least the
     options <option>-&minus;enable-debug</option>
     and <option>-&minus;enable-cassert</option>.
    </para>
________________________________________________________-->
    <para>
     在构建将用于在服务器内部开发代码的安装时，建议至少使用选项<option>--enable-debug</option>
     和<option>--enable-cassert</option>。
    </para>
<!-- pgdoc-cn_end sig_en=7a437ab9dabaea5c2c949166bc67f8b5 -->

     <variablelist>

      <varlistentry>
       <term><option>--enable-debug</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=d45a5362900e605b549dc9e485739bfe sig_cn_org=None source=14.1 
        <para>
         Compiles all programs and libraries with debugging symbols.
         This means that you can run the programs in a debugger
         to analyze problems. This enlarges the size of the installed
         executables considerably, and on non-GCC compilers it usually
         also disables compiler optimization, causing slowdowns. However,
         having the symbols available is extremely helpful for dealing
         with any problems that might arise.  Currently, this option is
         recommended for production installations only if you use GCC.
         But you should always have it on if you are doing development work
         or running a beta version.
        </para>
________________________________________________________-->
        <para>
         把所有程序和库以带有调试符号的方式编译。这意味着你可以通过一个调试器运行程序来分析问题。 这样做显著增大了最后安装的可执行文件的大小，并且在非 GCC 的编译器上，这么做通常还要关闭编译器优化， 这些都导致速度的下降。但是，如果有这些符号的话，就可以非常有效地帮助定位可能发生问题的位置。目前，我们只是在你使用 GCC 的情况下才建议在生产安装中使用这个选项。但是如果你正在进行开发工作，或者正在使用 beta 版本，那么你就应该总是打开它。
        </para>
<!-- pgdoc-cn_end sig_en=d45a5362900e605b549dc9e485739bfe -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-cassert</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=90279aa74e2a4915fb03c955a2f4cb6e sig_cn_org=None source=14.1 
        <para>
         Enables <firstterm>assertion</firstterm> checks in the server, which test for
         many <quote>cannot happen</quote> conditions.  This is invaluable for
         code development purposes, but the tests can slow down the
         server significantly.
         Also, having the tests turned on won't necessarily enhance the
         stability of your server!  The assertion checks are not categorized
         for severity, and so what might be a relatively harmless bug will
         still lead to server restarts if it triggers an assertion
         failure.  This option is not recommended for production use, but
         you should have it on for development work or when running a beta
         version.
        </para>
________________________________________________________-->
        <para>
         打开在服务器中的<firstterm>assertion</firstterm>检查， 它会检查许多<quote>不可能发生</quote>的条件。它对于代码开发的用途而言是无价之宝， 不过这些测试可能会显著地降低服务器的速度。并且，打开这个测试不会提高你的系统的稳定性！ 这些断言检查并不是按照严重性分类的，因此一些相对无害的小故障也可能导致服务器重启 &mdash; 只要它触发了一次断言失败。 目前，我们不推荐在生产环境中使用这个选项，但是如果你在做开发或者在使用 beta 版本的时候应该打开它。
        </para>
<!-- pgdoc-cn_end sig_en=90279aa74e2a4915fb03c955a2f4cb6e -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-tap-tests</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=c544849deac2eac0ac210cdfc022bbc8 sig_cn_org=None source=14.1 
        <para>
         Enable tests using the Perl TAP tools.  This requires a Perl
         installation and the Perl module <literal>IPC::Run</literal>.
         <phrase condition="standalone-ignore">See <xref linkend="regress-tap"/> for more information.</phrase>
        </para>
________________________________________________________-->
        <para>
         使用 Perl TAP 工具启用测试。 这需要 Perl 安装和 Perl 模块<literal>IPC::Run</literal>。
         <phrase condition="standalone-ignore">有关详细信息，请参阅<xref linkend="regress-tap"/>。</phrase>
        </para>
<!-- pgdoc-cn_end sig_en=c544849deac2eac0ac210cdfc022bbc8 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-depend</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=3747cd6bf58d1932313d1f2c616f4f52 sig_cn_org=None source=14.1 
        <para>
         Enables automatic dependency tracking.  With this option, the
         makefiles are set up so that all affected object files will
         be rebuilt when any header file is changed.  This is useful
         if you are doing development work, but is just wasted overhead
         if you intend only to compile once and install.  At present,
         this option only works with GCC.
        </para>
________________________________________________________-->
        <para>
         打开自动倚赖性跟踪。如果打开这个选项，那么制作文件（makefile）将设置为在任何头文件被修改的时候都将重新编译所有受影响的目标文件。 如果你在做开发的工作，那么这个选项很有用，但是如果你只是想编译一次并且安装，那么这就是浪费时间。 目前，这个选项只对 GCC 有用。
        </para>
<!-- pgdoc-cn_end sig_en=3747cd6bf58d1932313d1f2c616f4f52 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-coverage</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=a0de6ab6b6a0060527028356adc784db sig_cn_org=None source=14.1 
        <para>
         If using GCC, all programs and libraries are compiled with
         code coverage testing instrumentation.  When run, they
         generate files in the build directory with code coverage
         metrics.
         <phrase condition="standalone-ignore">See <xref linkend="regress-coverage"/>
         for more information.</phrase> This option is for use only with GCC
         and when doing development work.
        </para>
________________________________________________________-->
        <para>
         如果使用 GCC，则所有程序和库都使用代码覆盖测试工具进行编译。 运行时，它们会在构建目录中生成带有代码覆盖率指标的文件。
         <phrase condition="standalone-ignore">有关详细信息，请参阅<xref linkend="regress-coverage"/>
         for more information。</phrase>此选项仅适用于 GCC 和进行开发工作时。
        </para>
<!-- pgdoc-cn_end sig_en=a0de6ab6b6a0060527028356adc784db -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-profiling</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=3500d7cbe8c74286d262019c57f81c92 sig_cn_org=None source=14.1 
        <para>
         If using GCC, all programs and libraries are compiled so they
         can be profiled.  On backend exit, a subdirectory will be created
         that contains the <filename>gmon.out</filename> file containing
         profile data.
         This option is for use only with GCC and when doing development work.
        </para>
________________________________________________________-->
        <para>
         如果使用 GCC，则会编译所有程序和库，以便对其进行分析。
         在后端退出时，将创建一个子目录，其中包含包含配置文件数据的<filename>gmon.out</filename>文件。
         此选项仅用于 GCC 和进行开发工作时。
        </para>
<!-- pgdoc-cn_end sig_en=3500d7cbe8c74286d262019c57f81c92 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-dtrace</option></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=d723f3ea23adbb55ff813311fb7f8970 sig_cn_org=None source=14.1 
        <para>
         <indexterm>
          <primary>DTrace</primary>
         </indexterm>
         Compiles <productname>PostgreSQL</productname> with support for the
         dynamic tracing tool DTrace.
         <phrase condition="standalone-ignore">See <xref linkend="dynamic-trace"/>
         for more information.</phrase>
        </para>
________________________________________________________-->
        <para>
         <indexterm>
          <primary>DTrace</primary>
         </indexterm>
         为<productname>PostgreSQL</productname>编译对动态跟踪工具 DTrace 的支持。
         详见<xref linkend="dynamic-trace"/>。
        </para>
<!-- pgdoc-cn_end sig_en=d723f3ea23adbb55ff813311fb7f8970 -->

<!-- pgdoc-cn_start sig_en=e8541503bdfad3b521acaf719440e91b sig_cn_org=None source=14.1 
        <para>
         To point to the <command>dtrace</command> program, the
         environment variable <envar>DTRACE</envar> can be set.  This
         will often be necessary because <command>dtrace</command> is
         typically installed under <filename>/usr/sbin</filename>,
         which might not be in your <envar>PATH</envar>.
        </para>
________________________________________________________-->
        <para>
         要指向<command>dtrace</command>程序，必须设置环境变量<envar>DTRACE</envar>。这通常是必需的，因为<command>dtrace</command>通常被安装在<filename>/usr/sbin</filename>中，该路径可能不在你的<envar>PATH</envar>中。
        </para>
<!-- pgdoc-cn_end sig_en=e8541503bdfad3b521acaf719440e91b -->

<!-- pgdoc-cn_start sig_en=7ebd6115836b6848a4ba6887c09a4995 sig_cn_org=None source=14.1 
        <para>
         Extra command-line options for the <command>dtrace</command> program
         can be specified in the environment variable
         <envar>DTRACEFLAGS</envar>.  On Solaris,
         to include DTrace support in a 64-bit binary, you must specify
         <literal>DTRACEFLAGS="-64"</literal>.  For example,
         using the GCC compiler:
<screen>
./configure CC='gcc -m64' -&minus;enable-dtrace DTRACEFLAGS='-64' ...
</screen>
         Using Sun's compiler:
<screen>
./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' -&minus;enable-dtrace DTRACEFLAGS='-64' ...
</screen>
        </para>
________________________________________________________-->
        <para>
         <command>dtrace</command>程序的附加命令行选项可以在环境变量<envar>DTRACEFLAGS</envar>中指定。在 Solaris 上，要在一个64位二进制中包括 DTrace，你必须指定<literal>DTRACEFLAGS="-64"</literal>。例如，使用 GCC 编译器：
<screen>
./configure CC='gcc -m64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
         使用 Sun 的编译器：
<screen>
./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
        </para>
<!-- pgdoc-cn_end sig_en=7ebd6115836b6848a4ba6887c09a4995 -->
       </listitem>
      </varlistentry>
     </variablelist>

   </sect3>

  </sect2>

  <sect2 id="configure-envvars">
<!-- pgdoc-cn_start sig_en=ac5aaae6dc4cf9198e7b1115b8e8740d sig_cn_org=None source=14.1 
   <title><filename>configure</filename> Environment Variables</title>
________________________________________________________-->
   <title><filename>configure</filename> 环境变量</title>
<!-- pgdoc-cn_end sig_en=ac5aaae6dc4cf9198e7b1115b8e8740d -->

<!-- pgdoc-cn_start sig_en=114e4bc343622d63412ee73184dd3e6c sig_cn_org=None source=14.1 
   <indexterm zone="configure-envvars">
    <primary>configure environment variables</primary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="configure-envvars">
    <primary>configure environment variables</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=114e4bc343622d63412ee73184dd3e6c -->

<!-- pgdoc-cn_start sig_en=ccbaac8a9ec27dce06493eb9c72bd9cb sig_cn_org=None source=14.1 
    <para>
     In addition to the ordinary command-line options described above,
     <filename>configure</filename> responds to a number of environment
     variables.
     You can specify environment variables on the
     <filename>configure</filename> command line, for example:
<screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</userinput>
</screen>
     In this usage an environment variable is little different from a
     command-line option.
     You can also set such variables beforehand:
<screen>
<userinput>export CC=/opt/bin/gcc</userinput>
<userinput>export CFLAGS='-O2 -pipe'</userinput>
<userinput>./configure</userinput>
</screen>
     This usage can be convenient because many programs' configuration
     scripts respond to these variables in similar ways.
    </para>
________________________________________________________-->
    <para>
     除了上面描述的普通命令行选项之外，<filename>configure</filename>响应许多环境变量。
     您可以在<filename>configure</filename>命令行上指定环境变量，例如：
<screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</userinput>
</screen>
     在这种用法中，环境变量与命令行选项几乎没有什么不同。 您还可以预先设置此类变量：
<screen>
<userinput>export CC=/opt/bin/gcc</userinput>
<userinput>export CFLAGS='-O2 -pipe'</userinput>
<userinput>./configure</userinput>
</screen>
     这种用法很方便，因为许多程序的配置脚本以类似的方式响应这些变量。
    </para>
<!-- pgdoc-cn_end sig_en=ccbaac8a9ec27dce06493eb9c72bd9cb -->

<!-- pgdoc-cn_start sig_en=04e841622d36722ab9b9ed0c8a3a0b97 sig_cn_org=None source=14.1 
    <para>
     The most commonly used of these environment variables are
     <envar>CC</envar> and <envar>CFLAGS</envar>.
     If you prefer a C compiler different from the one
     <filename>configure</filename> picks, you can set the
     variable <envar>CC</envar> to the program of your choice.
     By default, <filename>configure</filename> will pick
     <filename>gcc</filename> if available, else the platform's
     default (usually <filename>cc</filename>).  Similarly, you can override the
     default compiler flags if needed with the <envar>CFLAGS</envar> variable.
    </para>
________________________________________________________-->
    <para>
     这些环境变量中最常用的是<envar>CC</envar>和<envar>CFLAGS</envar>。如果你喜欢用那些和<filename>configure</filename>选取的不同的 C 编译器，那么你可以你的环境变量<envar>CC</envar>设置为你选择的程序。默认时，只要<filename>gcc</filename>可以使用，<filename>configure</filename>将选择它， 或者是该平台的默认（通常是<filename>cc</filename>）。类似地，你可以用<envar>CFLAGS</envar>变量覆盖默认编译器标志。
    </para>
<!-- pgdoc-cn_end sig_en=04e841622d36722ab9b9ed0c8a3a0b97 -->

<!-- pgdoc-cn_start sig_en=07794734ab433f31c63cbe1033107ae6 sig_cn_org=18bcf43da6a7b98644b061006cc1d1d9 source=15.7 
    <para>
     Here is a list of the significant variables that can be set in
     this manner:

     <variablelist>
      <varlistentry>
________________________________________________________-->
    <para>
     这是可以以这种方式设置的重要变量列表：

     <variablelist>
      <varlistentry>
<!-- pgdoc-cn_end sig_en=07794734ab433f31c63cbe1033107ae6 -->
       <term><envar>BISON</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=3b8e6bcac1cf7ce123c512b94489aaf0 sig_cn_org=15f375257b48651f38dedf8502d6dc62 source=15.7 
        <para>
         Bison program
        </para>
________________________________________________________-->
        <para>
         Bison程序
        </para>
<!-- pgdoc-cn_end sig_en=3b8e6bcac1cf7ce123c512b94489aaf0 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CC</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=f29d0058fdea33cd333e10d395aa7f49 sig_cn_org=723a9ce984426868502d1c5a3fc81f3d source=15.7 
        <para>
         C compiler
        </para>
________________________________________________________-->
        <para>
         C编译器
        </para>
<!-- pgdoc-cn_end sig_en=f29d0058fdea33cd333e10d395aa7f49 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CFLAGS</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=58da9df2a97530dac24424628c536094 sig_cn_org=c5bf557fbeda98fff99a16add3f14fdb source=15.7 
        <para>
         options to pass to the C compiler
        </para>
________________________________________________________-->
        <para>
         传递给C编译器的选项
        </para>
<!-- pgdoc-cn_end sig_en=58da9df2a97530dac24424628c536094 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CLANG</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=97b99f6d9321e2a3a52005bceaa77e6b sig_cn_org=f1558bf372af91dd11df69f8f0180bae source=15.7 
        <para>
         path to <command>clang</command> program used to process source code
         for inlining when compiling with <literal>-&minus;with-llvm</literal>
        </para>
________________________________________________________-->
        <para>
         用于处理源代码的<command>clang</command>程序的路径，在使用<literal>--with-llvm</literal>编译时进行内联处理
        </para>
<!-- pgdoc-cn_end sig_en=97b99f6d9321e2a3a52005bceaa77e6b -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPP</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=ec7035dd00d90370a6105369b1ca22d9 sig_cn_org=46562025b8e2600e93aaa84e1fa20042 source=15.7 
        <para>
         C preprocessor
        </para>
________________________________________________________-->
        <para>
         C预处理器
        </para>
<!-- pgdoc-cn_end sig_en=ec7035dd00d90370a6105369b1ca22d9 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPPFLAGS</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=c89065b0a24f714617664e1408ef6770 sig_cn_org=99933b4693bee9a0689cb95dbbe36a33 source=15.7 
        <para>
         options to pass to the C preprocessor
        </para>
________________________________________________________-->
        <para>
         传递给C预处理器的选项
        </para>
<!-- pgdoc-cn_end sig_en=c89065b0a24f714617664e1408ef6770 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CXX</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=8a10111057b37d0500fb2eef49780d33 sig_cn_org=6967a1e30106530e43f50accfae4d667 source=15.7 
        <para>
         C++ compiler
        </para>
________________________________________________________-->
        <para>
         C++编译器
        </para>
<!-- pgdoc-cn_end sig_en=8a10111057b37d0500fb2eef49780d33 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CXXFLAGS</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=46b42063fccc0c3e8c9c6f3ce44c1db2 sig_cn_org=963f396c01551e9c6a3142953917b028 source=15.7 
        <para>
         options to pass to the C++ compiler
        </para>
________________________________________________________-->
        <para>
         传递给C++编译器的选项
        </para>
<!-- pgdoc-cn_end sig_en=46b42063fccc0c3e8c9c6f3ce44c1db2 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACE</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=801f09cd869123ccc5cbd2759b5b506e sig_cn_org=eb34248ef08f62e299f5068bcd776aec source=15.7 
        <para>
         location of the <command>dtrace</command> program
        </para>
________________________________________________________-->
        <para>
         <command>dtrace</command>程序的位置
        </para>
<!-- pgdoc-cn_end sig_en=801f09cd869123ccc5cbd2759b5b506e -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACEFLAGS</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=f25d1ec76f8e68f8e530c6841b973fcf sig_cn_org=a71a7a1df4aab3a644f94d7dcb88ef14 source=15.7 
        <para>
         options to pass to the <command>dtrace</command> program
        </para>
________________________________________________________-->
        <para>
         传递给<command>dtrace</command>程序的选项
        </para>
<!-- pgdoc-cn_end sig_en=f25d1ec76f8e68f8e530c6841b973fcf -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>FLEX</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=48a79ff15f9811c4f3e725d01fef760a sig_cn_org=f6eb38a8d6893dcd1f5cd1accd720c25 source=15.7 
        <para>
         Flex program
        </para>
________________________________________________________-->
        <para>
         Flex程序
        </para>
<!-- pgdoc-cn_end sig_en=48a79ff15f9811c4f3e725d01fef760a -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=1748565e978e97a7e5f3f70d0f75d2d2 sig_cn_org=0020dfa3a8b43d40274d8edeff253875 source=15.7 
        <para>
         options to use when linking either executables or shared libraries
        </para>
________________________________________________________-->
        <para>
         用于链接可执行文件或共享库时使用的选项
        </para>
<!-- pgdoc-cn_end sig_en=1748565e978e97a7e5f3f70d0f75d2d2 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_EX</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=1c66a80c18e784a7050f03cdba031578 sig_cn_org=b3f9ae8219396f6fde9c298b08f99a08 source=15.7 
        <para>
         additional options for linking executables only
        </para>
________________________________________________________-->
        <para>
         仅用于链接可执行文件的附加选项
        </para>
<!-- pgdoc-cn_end sig_en=1c66a80c18e784a7050f03cdba031578 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_SL</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=593c7903e87546534f0e620c1376f732 sig_cn_org=230176e395d6a2f40d9f5f409fdc14cf source=15.7 
        <para>
         additional options for linking shared libraries only
        </para>
________________________________________________________-->
        <para>
         仅用于链接共享库的附加选项
        </para>
<!-- pgdoc-cn_end sig_en=593c7903e87546534f0e620c1376f732 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LLVM_CONFIG</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=28a27e18e86b4eb3d903b6fa150137df sig_cn_org=740f59f5ade45efdc351d8d87a70c3f9 source=15.7 
        <para>
         <command>llvm-config</command> program used to locate the
         <productname>LLVM</productname> installation
        </para>
________________________________________________________-->
        <para>
         <command>llvm-config</command>程序用于定位<productname>LLVM</productname>安装位置
        </para>
<!-- pgdoc-cn_end sig_en=28a27e18e86b4eb3d903b6fa150137df -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>MSGFMT</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=e2be80ad2e8adaa47b433913681e4d68 sig_cn_org=df9d1ed9af11b6c73795c980b83275f4 source=15.7 
        <para>
         <command>msgfmt</command> program for native language support
        </para>
________________________________________________________-->
        <para>
         <command>msgfmt</command>程序用于本地语言支持
        </para>
<!-- pgdoc-cn_end sig_en=e2be80ad2e8adaa47b433913681e4d68 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PERL</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=65e8ab90065e372cfaafdf104f46685d sig_cn_org=5367f91a935de984f12f05e4a4d04ebf source=15.7 
        <para>
         Perl interpreter program.  This will be used to determine the
         dependencies for building PL/Perl.  The default is
         <command>perl</command>.
        </para>
________________________________________________________-->
        <para>
         Perl解释器程序。这将用于确定构建PL/Perl所需的依赖关系。默认值为
         <command>perl</command>。
        </para>
<!-- pgdoc-cn_end sig_en=65e8ab90065e372cfaafdf104f46685d -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PYTHON</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=76f36906699ca20ed4f70569f5724751 sig_cn_org=29d8e58ea1b359c999591c4995b0abb1 source=15.7 
        <para>
         Python interpreter program.  This will be used to determine the
         dependencies for building PL/Python.  If this is not set, the
         following are probed in this order:
         <literal>python3 python</literal>.
        </para>
________________________________________________________-->
        <para>
         Python解释器程序。这将用于确定构建PL/Python所需的依赖关系。如果未设置此项，
         则按照以下顺序进行探测：<literal>python3 python</literal>。
        </para>
<!-- pgdoc-cn_end sig_en=76f36906699ca20ed4f70569f5724751 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>TCLSH</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=cbfaa5c9edd467b7c4133b6c90029487 sig_cn_org=36fe7b854573298f2b4ea222e5a6e089 source=15.7 
        <para>
         Tcl interpreter program.  This will be used to
         determine the dependencies for building PL/Tcl.
         If this is not set, the following are probed in this
         order: <literal>tclsh tcl tclsh8.6 tclsh86 tclsh8.5 tclsh85
         tclsh8.4 tclsh84</literal>.
        </para>
________________________________________________________-->
        <para>
         Tcl解释器程序。这将用于确定构建PL/Tcl的依赖关系。
         如果未设置此项，则按照以下顺序进行探测：<literal>tclsh tcl tclsh8.6 tclsh86 tclsh8.5 tclsh85
         tclsh8.4 tclsh84</literal>。
        </para>
<!-- pgdoc-cn_end sig_en=cbfaa5c9edd467b7c4133b6c90029487 -->
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>XML2_CONFIG</envar></term>
       <listitem>
<!-- pgdoc-cn_start sig_en=3ee5e16515666a81c67c5c5cd30c9513 sig_cn_org=367c3112f6cdc3288555c5156cd6c31c source=15.7 
        <para>
         <command>xml2-config</command> program used to locate the
         libxml2 installation
        </para>
________________________________________________________-->
        <para>
         <command>xml2-config</command>程序用于定位libxml2安装位置。
        </para>
<!-- pgdoc-cn_end sig_en=3ee5e16515666a81c67c5c5cd30c9513 -->
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

<!-- pgdoc-cn_start sig_en=2a3020d8d95d5cf2d6445e01a6ec2f12 sig_cn_org=None source=14.1 
    <para>
     Sometimes it is useful to add compiler flags after-the-fact to the set
     that were chosen by <filename>configure</filename>.  An important example is
     that <application>gcc</application>'s <option>-Werror</option> option cannot be included
     in the <envar>CFLAGS</envar> passed to <filename>configure</filename>, because
     it will break many of <filename>configure</filename>'s built-in tests.  To add
     such flags, include them in the <envar>COPT</envar> environment variable
     while running <filename>make</filename>.  The contents of <envar>COPT</envar>
     are added to both the <envar>CFLAGS</envar> and <envar>LDFLAGS</envar>
     options set up by <filename>configure</filename>.  For example, you could do
<screen>
<userinput>make COPT='-Werror'</userinput>
</screen>
     or
<screen>
<userinput>export COPT='-Werror'</userinput>
<userinput>make</userinput>
</screen>
    </para>
________________________________________________________-->
    <para>
     有时候，将编译器标志事后添加到由<filename>configure</filename>选择的集合中非常有用。
	 一个重要的例子是，<application>gcc</application>的<option>-Werror</option>
	 选项不能包含在传递给<filename>configure</filename>的<envar>CFLAGS</envar>中，
	 因为它会中断许多<filename>configure</filename>的内置测试。要添加这样的标志，
	 在运行<filename>make</filename>时将它们包含在<envar>COPT</envar>环境变量中。
	 将<envar>COPT</envar>的内容添加到由<filename>configure</filename>设置的
	<envar>CFLAGS</envar>和<envar>LDFLAGS</envar>中。例如，你可以这样做
<screen>
<userinput>make COPT='-Werror'</userinput>
</screen>
     或者
<screen>
<userinput>export COPT='-Werror'</userinput>
<userinput>make</userinput>
</screen>
    </para>
<!-- pgdoc-cn_end sig_en=2a3020d8d95d5cf2d6445e01a6ec2f12 -->

    <note>
<!-- pgdoc-cn_start sig_en=8cb7fc188a04f56477803473bc74349b sig_cn_org=None source=14.1 
     <para>
      If using GCC, it is best to build with an optimization level of
      at least <option>-O1</option>, because using no optimization
      (<option>-O0</option>) disables some important compiler warnings (such
      as the use of uninitialized variables).  However, non-zero
      optimization levels can complicate debugging because stepping
      through compiled code will usually not match up one-to-one with
      source code lines.  If you get confused while trying to debug
      optimized code, recompile the specific files of interest with
      <option>-O0</option>.  An easy way to do this is by passing an option
      to <application>make</application>: <command>make PROFILE=-O0 file.o</command>.
     </para>
________________________________________________________-->
     <para>
      如果在使用 GCC，最好使用至少<option>-O1</option>的优化级别来编译，因为不使用优化（<option>-O0</option>）会禁用某些重要的编译器警告（例如使用未经初始化的变量）。但是，非零的优化级别会使调试更复杂，因为在编译好的代码中步进通常将不能和源代码行一一对应。如果你在尝试调试优化过的代码时觉得困惑，将感兴趣的特定文件使用<option>-O0</option>编译。一种简单的方式是传递一个选项给<application>make</application>：<command>make PROFILE=-O0 file.o</command>。
     </para>
<!-- pgdoc-cn_end sig_en=8cb7fc188a04f56477803473bc74349b -->

<!-- pgdoc-cn_start sig_en=096506c7eed18aaacb4320d0962b716d sig_cn_org=None source=14.1 
     <para>
      The <envar>COPT</envar> and <envar>PROFILE</envar> environment variables are
      actually handled identically by the <productname>PostgreSQL</productname>
      makefiles.  Which to use is a matter of preference, but a common habit
      among developers is to use <envar>PROFILE</envar> for one-time flag
      adjustments, while <envar>COPT</envar> might be kept set all the time.
     </para>
________________________________________________________-->
     <para>
      <envar>COPT</envar>和<envar>PROFILE</envar>环境变量同样由<productname>PostgreSQL</productname>
	   makefile实际处理。要使用哪个是一个性能问题，但是开发者的共同习惯是将
	   <envar>PROFILE</envar>用于一次性的标识调整，而始终保持设置<envar>COPT</envar>。
     </para>
<!-- pgdoc-cn_end sig_en=096506c7eed18aaacb4320d0962b716d -->
    </note>
  </sect2>
 </sect1>

 <sect1 id="install-post">
<!-- pgdoc-cn_start sig_en=015bab61b21fed24fb86e1caf8ec5406 sig_cn_org=None source=14.1 
  <title>Post-Installation Setup</title>
________________________________________________________-->
  <title>安装后设置</title>
<!-- pgdoc-cn_end sig_en=015bab61b21fed24fb86e1caf8ec5406 -->

  <sect2 id="install-post-shlibs">
<!-- pgdoc-cn_start sig_en=d4e31d376a304313676195e5093f6a9a sig_cn_org=None source=14.1 
   <title>Shared Libraries</title>
________________________________________________________-->
   <title>共享库</title>
<!-- pgdoc-cn_end sig_en=d4e31d376a304313676195e5093f6a9a -->

<!-- pgdoc-cn_start sig_en=dd25a7eba1a073f641cf6c1c36d19603 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>shared library</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>共享库</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=dd25a7eba1a073f641cf6c1c36d19603 -->

<!-- pgdoc-cn_start sig_en=babf1345b874001c91aea334f8e94126 sig_cn_org=None source=14.1 
   <para>
    On some systems with shared libraries
    you need to tell the system how to find the newly installed
    shared libraries.  The systems on which this is
    <emphasis>not</emphasis> necessary include
    <systemitem class="osname">FreeBSD</systemitem>,
    <systemitem class="osname">HP-UX</systemitem>,
    <systemitem class="osname">Linux</systemitem>,
    <systemitem class="osname">NetBSD</systemitem>, <systemitem
    class="osname">OpenBSD</systemitem>, and
    <systemitem class="osname">Solaris</systemitem>.
   </para>
________________________________________________________-->
   <para>
    在一些有共享库的系统里，你需要告诉你的系统如何找到新安装的共享库。那些并<emphasis>不</emphasis>是必须做这个工作的系统包括 <systemitem class="osname">FreeBSD</systemitem>、<systemitem class="osname">HP-UX</systemitem>、<systemitem class="osname">Linux</systemitem>、<systemitem class="osname">NetBSD</systemitem>、<systemitem class="osname">OpenBSD</systemitem>和<systemitem class="osname">Solaris</systemitem>。
   </para>
<!-- pgdoc-cn_end sig_en=babf1345b874001c91aea334f8e94126 -->

<!-- pgdoc-cn_start sig_en=ab67a2cb7d99e0cdab5c31088540a1db sig_cn_org=None source=14.1 
   <para>
    The method to set the shared library search path varies between
    platforms, but the most widely-used method is to set the
    environment variable <envar>LD_LIBRARY_PATH</envar> like so: In Bourne
    shells (<command>sh</command>, <command>ksh</command>, <command>bash</command>, <command>zsh</command>):
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
    or in <command>csh</command> or <command>tcsh</command>:
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
    Replace <literal>/usr/local/pgsql/lib</literal> with whatever you set
    <option><literal>-&minus;libdir</literal></option> to in <xref linkend="configure"/>.
    You should put these commands into a shell start-up file such as
    <filename>/etc/profile</filename> or <filename>~/.bash_profile</filename>.  Some
    good information about the caveats associated with this method can
    be found at <ulink
    url="http://xahlee.info/UnixResource_dir/_/ldpath.html"></ulink>.
   </para>
________________________________________________________-->
   <para>
    设置共享库的搜索路径的方法因平台而异， 但是最广泛使用的方法是设置环境变量<envar>LD_LIBRARY_PATH</envar>，例如在 Bourne shells （<command>sh</command>、<command>ksh</command>、<command>bash</command>、<command>zsh</command>）中：
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
    或者在<command>csh</command>或<command>tcsh</command>中：
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
    把<literal>/usr/local/pgsql/lib</literal>换成你在<xref linkend="configure"/>时设置的<option><literal>--libdir</literal></option>。 你应该把这些命令放到 shell 启动文件，如<filename>/etc/profile</filename>或<filename>~/.bash_profile</filename>中。 和这个方法相关的一些注意事项和很好的信息可以在<ulink url="http://xahlee.info/UnixResource_dir/_/ldpath.html"></ulink>找到。
   </para>
<!-- pgdoc-cn_end sig_en=ab67a2cb7d99e0cdab5c31088540a1db -->

<!-- pgdoc-cn_start sig_en=3824d08a0035240b81d2dcc399c445a9 sig_cn_org=None source=14.1 
   <para>
    On some systems it might be preferable to set the environment
    variable <envar>LD_RUN_PATH</envar> <emphasis>before</emphasis>
    building.
   </para>
________________________________________________________-->
   <para>
    在有些系统上，更好的方法可能是在编译<emphasis>之前</emphasis>设置环境变量<envar>LD_RUN_PATH</envar>。
   </para>
<!-- pgdoc-cn_end sig_en=3824d08a0035240b81d2dcc399c445a9 -->

<!-- pgdoc-cn_start sig_en=17e4e5fa7637d8965dc240baf690f07e sig_cn_org=None source=14.1 
   <para>
    On <systemitem class="osname">Cygwin</systemitem>, put the library
    directory in the <envar>PATH</envar> or move the
    <filename>.dll</filename> files into the <filename>bin</filename>
    directory.
   </para>
________________________________________________________-->
   <para>
    在<systemitem class="osname">Cygwin</systemitem>上，把库目录放在<envar>PATH</envar>中或者把<filename>.dll</filename>文件移动到<filename>bin</filename>目录。
   </para>
<!-- pgdoc-cn_end sig_en=17e4e5fa7637d8965dc240baf690f07e -->

<!-- pgdoc-cn_start sig_en=347a81f63dd9705a2c6df0b56a7d4834 sig_cn_org=None source=14.1 
   <para>
    If in doubt, refer to the manual pages of your system (perhaps
    <command>ld.so</command> or <command>rld</command>). If you later
    get a message like:
<screen>
psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
    then this step was necessary.  Simply take care of it then.
   </para>
________________________________________________________-->
   <para>
    如果有疑问，请参考你的系统的手册页（可能是<command>ld.so</command>或<command>rld</command>）。 如果稍后你收到下面这样的消息：
<screen>
psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
    那么这一步就是必须的了。这个只需关注一下就是了。
   </para>
<!-- pgdoc-cn_end sig_en=347a81f63dd9705a2c6df0b56a7d4834 -->

<!-- pgdoc-cn_start sig_en=8f3432e7aa075e62ba16085f70f45438 sig_cn_org=None source=14.1 
   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
    If you are on <systemitem class="osname">Linux</systemitem> and you have root
    access, you can run:
<programlisting>
/sbin/ldconfig /usr/local/pgsql/lib
</programlisting>
    (or equivalent directory) after installation to enable the
    run-time linker to find the shared libraries faster.  Refer to the
    manual page of <command>ldconfig</command> for more information.  On
    <systemitem class="osname">FreeBSD</systemitem>, <systemitem
    class="osname">NetBSD</systemitem>, and <systemitem
    class="osname">OpenBSD</systemitem> the command is:
<programlisting>
/sbin/ldconfig -m /usr/local/pgsql/lib
</programlisting>
    instead.  Other systems are not known to have an equivalent
    command.
   </para>
________________________________________________________-->
   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
    如果你用的系统是<systemitem class="osname">Linux</systemitem>，并且你还有 root 权限，那么你可以在安装之后运行：
<programlisting>
/sbin/ldconfig /usr/local/pgsql/lib
</programlisting>
    （或者等效的目录）以便让运行时链接器更快地找到共享库。请参考<command>ldconfig</command>的手册页获取更多信息。在<systemitem class="osname">FreeBSD</systemitem>、<systemitem class="osname">NetBSD</systemitem>和<systemitem class="osname">OpenBSD</systemitem>上，命令是：
<programlisting>
/sbin/ldconfig -m /usr/local/pgsql/lib
</programlisting>
    我们不知道其它的系统有等效的命令。
   </para>
<!-- pgdoc-cn_end sig_en=8f3432e7aa075e62ba16085f70f45438 -->
  </sect2>

  <sect2>
<!-- pgdoc-cn_start sig_en=d820450d6ca30f50cdab74296def074e sig_cn_org=None source=14.1 
   <title>Environment Variables</title>
________________________________________________________-->
   <title>环境变量</title>
<!-- pgdoc-cn_end sig_en=d820450d6ca30f50cdab74296def074e -->

   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>

<!-- pgdoc-cn_start sig_en=555d7150ca11200dc2a03508d42979a1 sig_cn_org=None source=14.1 
   <para>
    If you installed into <filename>/usr/local/pgsql</filename> or some other
    location that is not searched for programs by default, you should
    add <filename>/usr/local/pgsql/bin</filename> (or whatever you set
    <option><literal>-&minus;bindir</literal></option> to in <xref linkend="configure"/>)
    into your <envar>PATH</envar>.  Strictly speaking, this is not
    necessary, but it will make the use of <productname>PostgreSQL</productname>
    much more convenient.
   </para>
________________________________________________________-->
   <para>
    如果你安装到<filename>/usr/local/pgsql</filename>或者其他默认不在搜索路径中的地方， 那你应该在你的<envar>PATH</envar>环境变量里面增加一个 <filename>/usr/local/pgsql/bin</filename>（或者是你在<xref linkend="configure"/>时给选项<option><literal>--bindir</literal></option>设置的任何值） 。严格来说，这些都不是必须的，但这么做可以让你使用<productname>PostgreSQL</productname>更方便。
   </para>
<!-- pgdoc-cn_end sig_en=555d7150ca11200dc2a03508d42979a1 -->

<!-- pgdoc-cn_start sig_en=c10854c248d87245315d4a7bd7e0e000 sig_cn_org=None source=14.1 
   <para>
    To do this, add the following to your shell start-up file, such as
    <filename>~/.bash_profile</filename> (or <filename>/etc/profile</filename>, if you
    want it to affect all users):
<programlisting>
PATH=/usr/local/pgsql/bin:$PATH
export PATH
</programlisting>
    If you are using <command>csh</command> or <command>tcsh</command>, then use this command:
<programlisting>
set path = ( /usr/local/pgsql/bin $path )
</programlisting>
   </para>
________________________________________________________-->
   <para>
    要做这些事情，把下面几行加到你的 shell 启动文件，如<filename>~/.bash_profile</filename>（如果想影响所有用户就放在<filename>/etc/profile</filename>）：
<programlisting>
PATH=/usr/local/pgsql/bin:$PATH
export PATH
</programlisting>
    如果你用的是<command>csh</command>或者<command>tcsh</command>，那么用这条命令：
<programlisting>
set path = ( /usr/local/pgsql/bin $path )
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=c10854c248d87245315d4a7bd7e0e000 -->

<!-- pgdoc-cn_start sig_en=aaa562a30073dfdc6678543a64ebf282 sig_cn_org=None source=14.1 
   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
    To enable your system to find the <application>man</application>
    documentation, you need to add lines like the following to a
    shell start-up file unless you installed into a location that is
    searched by default:
<programlisting>
MANPATH=/usr/local/pgsql/share/man:$MANPATH
export MANPATH
</programlisting>
   </para>
________________________________________________________-->
   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
    为了让你的系统找得到<application>man</application>文档，你需要加类似下面的一行到一个shell启动文件里 （除非你安装到了默认搜索的位置）：
<programlisting>
MANPATH=/usr/local/pgsql/share/man:$MANPATH
export MANPATH
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=aaa562a30073dfdc6678543a64ebf282 -->

<!-- pgdoc-cn_start sig_en=532538ac7877e4ae55ec11b9efbb0c5c sig_cn_org=None source=14.1 
   <para>
    The environment variables <envar>PGHOST</envar> and <envar>PGPORT</envar>
    specify to client applications the host and port of the database
    server, overriding the compiled-in defaults. If you are going to
    run client applications remotely then it is convenient if every
    user that plans to use the database sets <envar>PGHOST</envar>.  This
    is not required, however; the settings can be communicated via command
    line options to most client programs.
   </para>
________________________________________________________-->
   <para>
    环境变量<envar>PGHOST</envar>和<envar>PGPORT</envar>为客户端应用指定了数据库服务器的主机和端口， 它们会覆盖编译时的默认项。如果你想从远程运行客户端应用， 那么为每个准备使用该数据库的用户都设置<envar>PGHOST</envar>将会非常方便。但这不是必须的，而且大部分客户端程序也可以通过命令行选项替换这些设置。
   </para>
<!-- pgdoc-cn_end sig_en=532538ac7877e4ae55ec11b9efbb0c5c -->
  </sect2>
 </sect1>

 <sect1 id="supported-platforms">
<!-- pgdoc-cn_start sig_en=1ced80a555c8c88f19ef3197106d6a1a sig_cn_org=None source=14.1 
  <title>Supported Platforms</title>
________________________________________________________-->
  <title>平台支持</title>
<!-- pgdoc-cn_end sig_en=1ced80a555c8c88f19ef3197106d6a1a -->

<!-- pgdoc-cn_start sig_en=22da70b41cde116e94cea28d6cf4a228 sig_cn_org=None source=14.1 
  <para>
   A platform (that is, a CPU architecture and operating system combination)
   is considered supported by the <productname>PostgreSQL</productname> development
   community if the code contains provisions to work on that platform and
   it has recently been verified to build and pass its regression tests
   on that platform.  Currently, most testing of platform compatibility
   is done automatically by test machines in the
   <ulink url="https://buildfarm.postgresql.org/">PostgreSQL Build Farm</ulink>.
   If you are interested in using <productname>PostgreSQL</productname> on a platform
   that is not represented in the build farm, but on which the code works
   or can be made to work, you are strongly encouraged to set up a build
   farm member machine so that continued compatibility can be assured.
  </para>
________________________________________________________-->
  <para>
   如果代码包含规定要工作在一个平台（即一种 CPU 架构和操作系统的结合）上并且它最近已经被验证能在该平台上编译并通过其回归测试，<productname>PostgreSQL</productname>开发社区才会认为该平台是被支持的。目前，大部分平台兼容性的测试都是由<ulink url="https://buildfarm.postgresql.org/">PostgreSQL 编译农场</ulink>的测试机器自动完成的。如果你对在一个并没有出现在编译农场中的平台上运行<productname>PostgreSQL</productname>感兴趣，但是代码确实能够工作或者能被修改得工作，我们强烈鼓励你建立一个编译农场成员机器，这样进一步的兼容性可以被确认。
  </para>
<!-- pgdoc-cn_end sig_en=22da70b41cde116e94cea28d6cf4a228 -->

<!-- pgdoc-cn_start sig_en=4f37a146636b0bba98b5f09510230c6c sig_cn_org=None source=14.1 
  <para>
   In general, <productname>PostgreSQL</productname> can be expected to work on
   these CPU architectures: x86, x86_64, IA64, PowerPC,
   PowerPC 64, S/390, S/390x, Sparc, Sparc 64, ARM, MIPS, MIPSEL,
   and PA-RISC.  Code support exists for M68K, M32R, and VAX, but these
   architectures are not known to have been tested recently.  It is often
   possible to build on an unsupported CPU type by configuring with
   <option>-&minus;disable-spinlocks</option>, but performance will be poor.
  </para>
________________________________________________________-->
  <para>
   通常，<productname>PostgreSQL</productname>被期望能在这些 CPU 架构上工作：x86、 x86_64、IA64、PowerPC、PowerPC 64、S/390、S/390x、Sparc、Sparc 64、ARM、MIPS、MIPSEL和PA-RISC。存在对 M68K、M32R  和 VAX 的代码支持，但是这些架构上并没有近期测试的报告。通常也可以在一个为支持的 CPU 类型上通过使用<option>--disable-spinlocks</option>配置来进行编译，但是性能将会比较差。
  </para>
<!-- pgdoc-cn_end sig_en=4f37a146636b0bba98b5f09510230c6c -->

<!-- pgdoc-cn_start sig_en=832f3dc3651966e5bc5a21a67c781c2c sig_cn_org=None source=14.1 
  <para>
   <productname>PostgreSQL</productname> can be expected to work on these operating
   systems: Linux (all recent distributions), Windows (XP and later),
   FreeBSD, OpenBSD, NetBSD, macOS, AIX, HP/UX, and Solaris.
   Other Unix-like systems may also work but are not currently
   being tested.  In most cases, all CPU architectures supported by
   a given operating system will work.  Look in
   <xref linkend="installation-platform-notes"/> below to see if
   there is information
   specific to your operating system, particularly if using an older system.
  </para>
________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>被期望能在这些操作系统上工作： Linux（所有最近的发布）、Windows（XP及以上）、
   FreeBSD、OpenBSD、NetBSD、macOS、AIX、HP/UX 和 Solaris。其他类 Unix 系统可能也可以工作，但是目前没有被测试。在大部分情况下，一个给定操作系统所支持的所有 CPU 架构都能工作。查找下文的<xref linkend="installation-platform-notes"/>来看是否有与你的操作系统相关的信息，特别是使用一个老的系统时更应该这样做。
  </para>
<!-- pgdoc-cn_end sig_en=832f3dc3651966e5bc5a21a67c781c2c -->

<!-- pgdoc-cn_start sig_en=4f451eda3915437293b7bd960bb68cf6 sig_cn_org=None source=14.1 
  <para>
   If you have installation problems on a platform that is known
   to be supported according to recent build farm results, please report
   it to <email>pgsql-bugs@lists.postgresql.org</email>.  If you are interested
   in porting <productname>PostgreSQL</productname> to a new platform,
   <email>pgsql-hackers@lists.postgresql.org</email> is the appropriate place
   to discuss that.
  </para>
________________________________________________________-->
  <para>
   如果你在一个平台上有安装问题，并且该平台根据最近的编译农场结果已经可以被支持，请将问题报告给<email>pgsql-bugs@lists.postgresql.org</email>。如果你有兴趣将<productname>PostgreSQL</productname>移植到一个新的平台，<email>pgsql-hackers@lists.postgresql.org</email>是一个合适的讨论它的地方。
  </para>
<!-- pgdoc-cn_end sig_en=4f451eda3915437293b7bd960bb68cf6 -->
 </sect1>

 <sect1 id="installation-platform-notes">
<!-- pgdoc-cn_start sig_en=f16b28de24850472a51f1258e7e06814 sig_cn_org=None source=14.1 
  <title>Platform-Specific Notes</title>
________________________________________________________-->
  <title>平台相关的说明</title>
<!-- pgdoc-cn_end sig_en=f16b28de24850472a51f1258e7e06814 -->

<!-- pgdoc-cn_start sig_en=522ffa92ae80d9e581cade0aea749f06 sig_cn_org=None source=14.1 
  <para>
   This section documents additional platform-specific issues
   regarding the installation and setup of PostgreSQL.  Be sure to
   read the installation instructions, and in
   particular <xref linkend="install-requirements"/> as well.  Also,
   check <xref linkend="regress"/> regarding the
   interpretation of regression test results.
  </para>
________________________________________________________-->
  <para>
   这一节提供了考虑 PostgreSQL 安装和设置的附加平台相关的话题。确保阅读安装指导，特别是<xref linkend="install-requirements"/>。
   同样，检查关于回归测试结果解释的<xref linkend="regress"/>。
  </para>
<!-- pgdoc-cn_end sig_en=522ffa92ae80d9e581cade0aea749f06 -->

<!-- pgdoc-cn_start sig_en=86636e326802537ab1111bc04ccf1f1a sig_cn_org=None source=14.1 
  <para>
   Platforms that are not covered here have no known platform-specific
   installation issues.
  </para>
________________________________________________________-->
  <para>
   这里没有覆盖的平台不存在平台相关的安装问题。
  </para>
<!-- pgdoc-cn_end sig_en=86636e326802537ab1111bc04ccf1f1a -->

  <sect2 id="installation-notes-aix">
<!-- pgdoc-cn_start sig_en=08876026b62e027ec403483b3477e449 sig_cn_org=None source=14.1 
   <title>AIX</title>
________________________________________________________-->
   <title>AIX</title>
<!-- pgdoc-cn_end sig_en=08876026b62e027ec403483b3477e449 -->

<!-- pgdoc-cn_start sig_en=69842e57d58cb207d2fa194615491277 sig_cn_org=None source=14.1 
   <indexterm zone="installation-notes-aix">
    <primary>AIX</primary>
    <secondary>installation on</secondary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="installation-notes-aix">
    <primary>AIX</primary>
    <secondary>installation on</secondary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=69842e57d58cb207d2fa194615491277 -->

<!-- pgdoc-cn_start sig_en=93ad4f7bfe2ece1c8d7c0ecfe4e2a7fb sig_cn_org=1bfbbb21a1a2168108539daffa38482f source=15.7 
   <para>
    You can use GCC or the native IBM compiler <command>xlc</command>
    to build <productname>PostgreSQL</productname>
    on <productname>AIX</productname>.
   </para>
________________________________________________________-->
   <para>
    你可以使用GCC或本机IBM编译器<command>xlc</command>来构建<productname>PostgreSQL</productname>
    在<productname>AIX</productname>上。
   </para>
<!-- pgdoc-cn_end sig_en=93ad4f7bfe2ece1c8d7c0ecfe4e2a7fb -->

<!-- pgdoc-cn_start sig_en=1d7c5fc61f6502d183531fa10fa60d68 sig_cn_org=9bade766fef41e02a728ad9a79457f01 source=15.7 
   <para>
    <productname>AIX</productname> versions before 7.1 are no longer
    tested nor supported by the <productname>PostgreSQL</productname>
    community.
   </para>
________________________________________________________-->
   <para>
    <productname>AIX</productname>版本7.1之前的版本不再由<productname>PostgreSQL</productname>社区测试或支持。
   </para>
<!-- pgdoc-cn_end sig_en=1d7c5fc61f6502d183531fa10fa60d68 -->

   <sect3>
<!-- pgdoc-cn_start sig_en=d50be6f5e3895ba6e13965719f109a90 sig_cn_org=None source=14.1 
    <title>Memory Management</title>
________________________________________________________-->
    <title>内存管理</title>
<!-- pgdoc-cn_end sig_en=d50be6f5e3895ba6e13965719f109a90 -->
    <!-- https://archives.postgresql.org/message-id/603bgqmpl9.fsf@dba2.int.libertyrms.com -->

<!-- pgdoc-cn_start sig_en=a82f4b684a59e97cc2a406ca6752bccb sig_cn_org=None source=14.1 
    <para>
     AIX can be somewhat peculiar with regards to the way it does
     memory management.  You can have a server with many multiples of
     gigabytes of RAM free, but still get out of memory or address
     space errors when running applications.  One example
     is loading of extensions failing with unusual errors.
     For example, running as the owner of the PostgreSQL installation:
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": A memory address is not in the address space for the process.
</screen>
    Running as a non-owner in the group possessing the PostgreSQL
    installation:
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": Bad address
</screen>
     Another example is out of memory errors in the PostgreSQL server
     logs, with every memory allocation near or greater than 256 MB
     failing.
    </para>
________________________________________________________-->
    <para>
     AIX 的特别之处在于它的内存管理。你可能有一个装备有好多个吉字节空闲 RAM 的服务器，但是在运行应用时仍然会得到内存不足或者地址空间错误。一个例子是加载扩展会因为罕见的错误失败。例如，作为 PostgreSQL 安装的拥有者运行：
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": A memory address is not in the address space for the process.
</screen>
    作为拥有 PostgreSQL 安装的组中的非拥有者运行：
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": Bad address
</screen>
     另一个例子是 PostgreSQL 服务器日志中的内存不足错误，每次内存分配接近或者超过 256 MB 时都会失败。
    </para>
<!-- pgdoc-cn_end sig_en=a82f4b684a59e97cc2a406ca6752bccb -->

<!-- pgdoc-cn_start sig_en=768631b101e38e309535a87955073c6d sig_cn_org=None source=14.1 
    <para>
     The overall cause of all these problems is the default bittedness
     and memory model used by the server process.  By default, all
     binaries built on AIX are 32-bit.  This does not depend upon
     hardware type or kernel in use.  These 32-bit processes are
     limited to 4 GB of memory laid out in 256 MB segments using one
     of a few models.  The default allows for less than 256 MB in the
     heap as it shares a single segment with the stack.
    </para>
________________________________________________________-->
    <para>
     所有这些问题的总体成因是服务器进程所用的寻址空间和内存模型。默认情况下，所有在 AIX 上编译的二进制都是32位。这并不依赖于硬件类型或使用的内核。这些32位进程被限制在 4GB 的内存中，并被使用几种模型之一安排成 256 MB 的段。该默认值允许在堆中低于 256 MB，因为它和栈共享一个单独的段。
    </para>
<!-- pgdoc-cn_end sig_en=768631b101e38e309535a87955073c6d -->

<!-- pgdoc-cn_start sig_en=33e6d1a81310f6e95061dc68ad97c389 sig_cn_org=None source=14.1 
    <para>
     In the case of the <literal>plperl</literal> example, above,
     check your umask and the permissions of the binaries in your
     PostgreSQL installation.  The binaries involved in that example
     were 32-bit and installed as mode 750 instead of 755.  Due to the
     permissions being set in this fashion, only the owner or a member
     of the possessing group can load the library.  Since it isn't
     world-readable, the loader places the object into the process'
     heap instead of the shared library segments where it would
     otherwise be placed.
    </para>
________________________________________________________-->
    <para>
     在<literal>plperl</literal>的例子中，检查你的 umask 和你的 PostgreSQL 安装中的二进制的权限。这个例子中涉及的二进制是32位的并且被用模式 750 而不是 755 安装。由于这种方式的权限设置，只有所有者或拥有组的成员可以载入该库。因为它不是所有人可读的，载入器将该对象放在进程的堆中而不是它应该被放入的共享库段中。
    </para>
<!-- pgdoc-cn_end sig_en=33e6d1a81310f6e95061dc68ad97c389 -->

<!-- pgdoc-cn_start sig_en=d582207d5ba70ca694528b41e32ae7e6 sig_cn_org=None source=14.1 
    <para>
     The <quote>ideal</quote> solution for this is to use a 64-bit
     build of PostgreSQL, but that is not always practical, because
     systems with 32-bit processors can build, but not run, 64-bit
     binaries.
    </para>
________________________________________________________-->
    <para>
     这个问题的<quote>理想的</quote>解决方案是使用 PostgreSQL 的64位编译，但是这不是总是实用的，因为有32位处理器的系统可以编译64位二进制但是却不能运行它。
    </para>
<!-- pgdoc-cn_end sig_en=d582207d5ba70ca694528b41e32ae7e6 -->

<!-- pgdoc-cn_start sig_en=5087a1fb9589253e5a79f6efdafeb910 sig_cn_org=None source=14.1 
    <para>
     If a 32-bit binary is desired, set <symbol>LDR_CNTRL</symbol> to
     <literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>,
     where 1 &lt;= n &lt;= 8, before starting the PostgreSQL server,
     and try different values and <filename>postgresql.conf</filename>
     settings to find a configuration that works satisfactorily.  This
     use of <symbol>LDR_CNTRL</symbol> tells AIX that you want the
     server to have <symbol>MAXDATA</symbol> bytes set aside for the
     heap, allocated in 256 MB segments.  When you find a workable
     configuration,
     <command>ldedit</command> can be used to modify the binaries so
     that they default to using the desired heap size.  PostgreSQL can
     also be rebuilt, passing <literal>configure
     LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>
     to achieve the same effect.
    </para>
________________________________________________________-->
    <para>
     如果想要一个 32 位二进制，在开始 PostgreSQL 服务器之前将<symbol>LDR_CNTRL</symbol>设置为<literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>，其中 1 &lt;= n &lt;= 8，并且尝试不同的值以及<filename>postgresql.conf</filename>设置来找一个能让你满意的配置。这种<symbol>LDR_CNTRL</symbol>的使用告诉 AIX 你希望服务器留出<symbol>MAXDATA</symbol>字节给堆，以 256 MB 的段分配。当你找到了一个可工作的配置时，<command>ldedit</command>可以被用来修改二进制，这样它们默认使用想要的堆尺寸。PostgreSQL 也可以被重新编译，传递<literal>configure  LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>来达到相同的效果。
    </para>
<!-- pgdoc-cn_end sig_en=5087a1fb9589253e5a79f6efdafeb910 -->

<!-- pgdoc-cn_start sig_en=9fad0f055f10c4fa1377f186a40325bf sig_cn_org=None source=14.1 
    <para>
     For a 64-bit build, set <envar>OBJECT_MODE</envar> to 64 and
     pass <literal>CC="gcc -maix64"</literal>
     and <literal>LDFLAGS="-Wl,-bbigtoc"</literal>
     to <command>configure</command>.  (Options for
    <command>xlc</command> might differ.)  If you omit the export of
    <envar>OBJECT_MODE</envar>, your build may fail with linker errors.  When
    <envar>OBJECT_MODE</envar> is set, it tells AIX's build utilities
    such as <command>ar</command>, <command>as</command>, and <command>ld</command> what
    type of objects to default to handling.
    </para>
________________________________________________________-->
    <para>
     对于一个 64 位编译，设置<envar>OBJECT_MODE</envar>为 64 并且传递<literal>CC="gcc -maix64"</literal>和<literal>LDFLAGS="-Wl,-bbigtoc"</literal>给<command>configure</command>（给<command>xlc</command>的选项可能不同）。如果你省略<envar>OBJECT_MODE</envar>的输出，你的编译可能会因为链接器错误而失败。当<envar>OBJECT_MODE</envar>被设置时，它告诉 AIX 的编译工具（如<command>ar</command>、<command>as</command>和<command>ld</command>）默认要处理哪些对象类型。
    </para>
<!-- pgdoc-cn_end sig_en=9fad0f055f10c4fa1377f186a40325bf -->

<!-- pgdoc-cn_start sig_en=951429ad46cb1d05148b756b4101c17c sig_cn_org=None source=14.1 
    <para>
     By default, overcommit of paging space can happen.  While we have
     not seen this occur, AIX will kill processes when it runs out of
     memory and the overcommit is accessed.  The closest to this that
     we have seen is fork failing because the system decided that
     there was not enough memory for another process.  Like many other
     parts of AIX, the paging space allocation method and
     out-of-memory kill is configurable on a system- or process-wide
     basis if this becomes a problem.
    </para>
________________________________________________________-->
    <para>
     默认情况下，过量使用页面空间的情况可能会发生。不过我们还没有看到过，当进程用尽内存并且出现了过量使用时 AIX 会杀死进程。我们见到过的最接近于此的是 fork 失败，其原因是系统觉得已经没有足够的内存给另一个进程。和 AIX 的很多其他部分一样，如果这成为了一个问题，页面空间分配方法和耗尽内存导致的杀死在系统范围或进程范围是可以配置的。
    </para>
<!-- pgdoc-cn_end sig_en=951429ad46cb1d05148b756b4101c17c -->
   </sect3>
  </sect2>

  <sect2 id="installation-notes-cygwin">
<!-- pgdoc-cn_start sig_en=42e15f950059ba09fec4d978034ddf41 sig_cn_org=None source=14.1 
   <title>Cygwin</title>
________________________________________________________-->
   <title>Cygwin</title>
<!-- pgdoc-cn_end sig_en=42e15f950059ba09fec4d978034ddf41 -->

<!-- pgdoc-cn_start sig_en=4a93f91db99383943ff97522c96fea10 sig_cn_org=None source=14.1 
   <indexterm zone="installation-notes-cygwin">
    <primary>Cygwin</primary>
    <secondary>installation on</secondary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="installation-notes-cygwin">
    <primary>Cygwin</primary>
    <secondary>installation on</secondary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=4a93f91db99383943ff97522c96fea10 -->

<!-- pgdoc-cn_start sig_en=fc1148073207b40ad2b3529da3a86880 sig_cn_org=None source=14.1 
   <para>
    PostgreSQL can be built using Cygwin, a Linux-like environment for
    Windows, but that method is inferior to the native Windows build
    <phrase condition="standalone-ignore">(see <xref linkend="install-windows"/>)</phrase> and
    running a server under Cygwin is no longer recommended.
   </para>
________________________________________________________-->
   <para>
    PostgreSQL 可以使用 Cygwin 来编译，它是用于 Windows 的一个类 Linux 环境，但是这种方法不如原生 Windows 编译见<xref linkend="install-windows"/>）并且我们已经不再推荐在 Cygwin 下运行一个服务器。
   </para>
<!-- pgdoc-cn_end sig_en=fc1148073207b40ad2b3529da3a86880 -->

<!-- pgdoc-cn_start sig_en=a1a4c8c190294334fdd1446349a2a29c sig_cn_org=None source=14.1 
   <para>
    When building from source, proceed according to the Unix-style
    installation procedure (i.e., <literal>./configure;
    make</literal>; etc.), noting the following Cygwin-specific
    differences:

    <itemizedlist>
     <listitem>
      <para>
       Set your path to use the Cygwin bin directory before the
       Windows utilities.  This will help prevent problems with
       compilation.
      </para>
     </listitem>

     <listitem>
      <para>
       The <command>adduser</command> command is not supported; use
       the appropriate user management application on Windows NT,
       2000, or XP.  Otherwise, skip this step.
      </para>
     </listitem>

     <listitem>
      <para>
       The <command>su</command> command is not supported; use ssh to
       simulate su on Windows NT, 2000, or XP. Otherwise, skip this
       step.
      </para>
     </listitem>

     <listitem>
      <para>
       <productname>OpenSSL</productname> is not supported.
      </para>
     </listitem>

     <listitem>
      <para>
       Start <command>cygserver</command> for shared memory support.
       To do this, enter the command <literal>/usr/sbin/cygserver
       &amp;</literal>.  This program needs to be running anytime you
       start the PostgreSQL server or initialize a database cluster
       (<command>initdb</command>).  The
       default <command>cygserver</command> configuration may need to
       be changed (e.g., increase <symbol>SEMMNS</symbol>) to prevent
       PostgreSQL from failing due to a lack of system resources.
      </para>
     </listitem>

     <listitem>
      <para>
        Building might fail on some systems where a locale other than
        C is in use. To fix this, set the locale to C by doing
        <command>export LANG=C.utf8</command> before building, and then
        setting it back to the previous setting after you have installed
        PostgreSQL.
      </para>
     </listitem>

     <listitem>
      <para>
       The parallel regression tests (<literal>make check</literal>)
       can generate spurious regression test failures due to
       overflowing the <function>listen()</function> backlog queue
       which causes connection refused errors or hangs.  You can limit
       the number of connections using the make
       variable <varname>MAX_CONNECTIONS</varname> thus:
<programlisting>
make MAX_CONNECTIONS=5 check
</programlisting>
       (On some systems you can have up to about 10 simultaneous
       connections.)
      </para>
     </listitem>
    </itemizedlist>
   </para>
________________________________________________________-->
   <para>
    在从源代码编译时，按照UNIX风格安装过程进行（即<literal>./configure;
    make</literal>; 等；只要注意下列 Cygwin 相关的区别：

    <itemizedlist>
     <listitem>
      <para>
       将你的路径设置为使用 Cygwin 的 bin 目录并且把它放在 Windows 工具的前面。这将帮助避免很多编译的问题。
      </para>
     </listitem>

     <listitem>
      <para>
       不支持<command>adduser</command>命令；使用 Windows NT、2000 或 XP 上的用户管理应用来替代。否则，跳过这一步。
      </para>
     </listitem>

     <listitem>
      <para>
       不支持<command>su</command>命令；在 Windows NT、2000 或 XP 上使用 ssh 来模拟 su。否则，跳过这一步。
      </para>
     </listitem>

     <listitem>
      <para>
       不支持 <productname>OpenSSL</productname>。
      </para>
     </listitem>

     <listitem>
      <para>
       为共享内存支持启动<command>cygserver</command>。要这样做，输入命令<literal>/usr/sbin/cygserver &amp;</literal>。这个程序在你启动 PostgreSQL 服务器或初始化一个数据集簇（<command>initdb</command>）时的任何时刻都需要被运行。默认的<command>cygserver</command>配置可能需要被更改（例如增加<symbol>SEMMNS</symbol>）来防止 PostgreSQL 因为缺少系统资源而失败。
      </para>
     </listitem>

     <listitem>
      <para>
        在某些不使用 C 区域的系统上编译可能会失败。要修复这个问题，通过在边以前<command>export LANG=C.utf8</command>把区域设置为 C，并且在安装完 PostgreSQL 之后把区域恢复成之前的设置。
      </para>
     </listitem>

     <listitem>
      <para>
       并行回归测试（<literal>make check</literal>）可能产生虚假的回归测试错误，这是由于溢出的<function>listen()</function>连接缓冲区，它会导致连接拒绝错误或挂起。你可以使用<varname>MAX_CONNECTIONS</varname>来限制连接数：
<programlisting>
make MAX_CONNECTIONS=5 check
</programlisting>
       （在某些系统上你可以有大约 10 个同时连接。）
      </para>
     </listitem>
    </itemizedlist>
   </para>
<!-- pgdoc-cn_end sig_en=a1a4c8c190294334fdd1446349a2a29c -->

<!-- pgdoc-cn_start sig_en=9a03a0a8347c14b68a74a36be759d7ab sig_cn_org=None source=14.1 
   <para>
    It is possible to install <command>cygserver</command> and the
    PostgreSQL server as Windows NT services.  For information on how
    to do this, please refer to the <filename>README</filename>
    document included with the PostgreSQL binary package on Cygwin.
    It is installed in the
    directory <filename>/usr/share/doc/Cygwin</filename>.
   </para>
________________________________________________________-->
   <para>
    可以把<command>cygserver</command> PostgreSQL 服务器安装为 Windows NT 服务。关于如何这样做的信息，请参考包含在 Cygwin 上 PostgreSQL 二进制包中的<filename>README</filename>文档。它被安装在目录<filename>/usr/share/doc/Cygwin</filename>中。
   </para>
<!-- pgdoc-cn_end sig_en=9a03a0a8347c14b68a74a36be759d7ab -->
  </sect2>

  <sect2 id="installation-notes-macos">
<!-- pgdoc-cn_start sig_en=6f31557cc924e8b3b1c3c873032b0e85 sig_cn_org=None source=14.1 
   <title>macOS</title>
________________________________________________________-->
   <title>macOS</title>
<!-- pgdoc-cn_end sig_en=6f31557cc924e8b3b1c3c873032b0e85 -->

<!-- pgdoc-cn_start sig_en=49b7188c981e9131b72bfbf404a99c12 sig_cn_org=None source=14.1 
   <indexterm zone="installation-notes-macos">
    <primary>macOS</primary>
    <secondary>installation on</secondary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="installation-notes-macos">
    <primary>macOS</primary>
    <secondary>installation on</secondary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=49b7188c981e9131b72bfbf404a99c12 -->

<!-- pgdoc-cn_start sig_en=3c7b2baef7abfe45d4ee407ba04a3d54 sig_cn_org=None source=14.1 
   <para>
    To build <productname>PostgreSQL</productname> from source
    on <productname>macOS</productname>, you will need to install Apple's
    command line developer tools, which can be done by issuing
<programlisting>
xcode-select -&minus;install
</programlisting>
    (note that this will pop up a GUI dialog window for confirmation).
    You may or may not wish to also install Xcode.
   </para>
________________________________________________________-->
   <para>
     在 <productname>macOS</productname>源码构建<productname>PostgreSQL</productname>
    ，你需要安装Apple的命令行开发工具，这可以通过
<programlisting>
xcode-select --install
</programlisting>
    （请注意，将出现一个 GUI 对话窗口以供确认）。您也可以安装也可以不安装 Xcode。
   </para>
<!-- pgdoc-cn_end sig_en=3c7b2baef7abfe45d4ee407ba04a3d54 -->

<!-- pgdoc-cn_start sig_en=ac87a94dd17f76f28ebaa0c4ce435f22 sig_cn_org=None source=14.1 
   <para>
    On recent <productname>macOS</productname> releases, it's necessary to
    embed the <quote>sysroot</quote> path in the include switches used to
    find some system header files.  This results in the outputs of
    the <application>configure</application> script varying depending on
    which SDK version was used during <application>configure</application>.
    That shouldn't pose any problem in simple scenarios, but if you are
    trying to do something like building an extension on a different machine
    than the server code was built on, you may need to force use of a
    different sysroot path.  To do that, set <varname>PG_SYSROOT</varname>,
    for example
<programlisting>
make PG_SYSROOT=<replaceable>/desired/path</replaceable> all
</programlisting>
    To find out the appropriate path on your machine, run
<programlisting>
xcrun -&minus;show-sdk-path
</programlisting>
    Note that building an extension using a different sysroot version than
    was used to build the core server is not really recommended; in the
    worst case it could result in hard-to-debug ABI inconsistencies.
   </para>
________________________________________________________-->
   <para>
    在最新的<productname>macOS</productname>版本中，有必要将<quote>sysroot</quote>
    路径嵌入用于查找某些系统头文件的include选项中。这导致<application>configure</application>
    脚本的输出会有所不同，具体取决于在<application>configure</application>期间使用的SDK版本。
    
    在简单的情况下，这应该不会造成任何问题，但是，如果您要尝试在与构建服务器代码不同
    的计算机上构建扩展程序，则可能需要强制使用其他sysroot路径。为此，需要设置
    <varname>PG_SYSROOT</varname>，例如：
<programlisting>
make PG_SYSROOT=<replaceable>/desired/path</replaceable> all
</programlisting>
    要在您的计算机上找到合适的路径，请运行
<programlisting>
xcrun --show-sdk-path
</programlisting>
    请注意，实际上不建议使用与构建核心服务器不同的sysroot版本构建扩展。
    在最坏的情况下，它可能导致难以调试的ABI不一致。
   </para>
<!-- pgdoc-cn_end sig_en=ac87a94dd17f76f28ebaa0c4ce435f22 -->

<!-- pgdoc-cn_start sig_en=7a936fdb33b219b2c5a5372b5e4de70a sig_cn_org=None source=14.1 
   <para>
    You can also select a non-default sysroot path when configuring, by
    specifying <varname>PG_SYSROOT</varname>
    to <application>configure</application>:
<programlisting>
./configure ... PG_SYSROOT=<replaceable>/desired/path</replaceable>
</programlisting>
    This would primarily be useful to cross-compile for some other
    macOS version.  There is no guarantee that the resulting executables
    will run on the current host.
   </para>
________________________________________________________-->
   <para>
    您还可以在配置时选择非默认的sysroot路径，通过在
    <application>configure</application>中指定<varname>PG_SYSROOT</varname>：
<programlisting>
./configure ... PG_SYSROOT=<replaceable>/desired/path</replaceable>
</programlisting>
    这主要是对其他一些macOS版本进行交叉编译的时候有用。 不能保证产生的可执行文件能在当前主机上运行。
   </para>
<!-- pgdoc-cn_end sig_en=7a936fdb33b219b2c5a5372b5e4de70a -->

<!-- pgdoc-cn_start sig_en=dcc0e03b5bf35c0ac4c4d43ae30e94ee sig_cn_org=None source=14.1 
   <para>
    To suppress the <option>-isysroot</option> options altogether, use
<programlisting>
./configure ... PG_SYSROOT=none
</programlisting>
    (any nonexistent pathname will work).  This might be useful if you wish
    to build with a non-Apple compiler, but beware that that case is not
    tested or supported by the PostgreSQL developers.
   </para>
________________________________________________________-->
   <para>
    要完全禁止该选项<option>-isysroot</option>，使用
<programlisting>
./configure ... PG_SYSROOT=none
</programlisting>
    (任何不存在的路径名都可以使用)。 如果你想用一个非苹果的编译器来构建，这可能是有用的，但要注意这种情况没有被PostgreSQL的开发者测试或支持。
   </para>
<!-- pgdoc-cn_end sig_en=dcc0e03b5bf35c0ac4c4d43ae30e94ee -->

<!-- pgdoc-cn_start sig_en=b39da94281def340d11b588611012a0f sig_cn_org=None source=14.1 
   <para>
    <productname>macOS</productname>'s <quote>System Integrity
    Protection</quote> (SIP) feature breaks <literal>make check</literal>,
    because it prevents passing the needed setting
    of <literal>DYLD_LIBRARY_PATH</literal> down to the executables being
    tested.  You can work around that by doing <literal>make
    install</literal> before <literal>make check</literal>.
    Most PostgreSQL developers just turn off SIP, though.
   </para>
________________________________________________________-->
   <para>
   <productname>macOS</productname>的<quote>系统完整性保护</quote>（SIP）
    功能破坏了<literal>make check</literal>，因为它阻止通过
    设置所需的<literal>DYLD_LIBRARY_PATH</literal>传递给被测试的可执行文件。
   
    您可以通过在<literal>make check</literal>之前执行<literal>make install</literal>来解决此问题。
    不过，大多数PostgreSQL开发人员关闭了SIP。
   </para>
<!-- pgdoc-cn_end sig_en=b39da94281def340d11b588611012a0f -->
  </sect2>

  <sect2 id="installation-notes-mingw">
<!-- pgdoc-cn_start sig_en=181df76a7e3067884a62bbc04b6e50c0 sig_cn_org=None source=14.1 
   <title>MinGW/Native Windows</title>
________________________________________________________-->
   <title>MinGW/原生 Windows</title>
<!-- pgdoc-cn_end sig_en=181df76a7e3067884a62bbc04b6e50c0 -->

<!-- pgdoc-cn_start sig_en=ed3392b9970454e2306bcda37dae2897 sig_cn_org=None source=14.1 
   <indexterm zone="installation-notes-mingw">
    <primary>MinGW</primary>
    <secondary>installation on</secondary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="installation-notes-mingw">
    <primary>MinGW</primary>
    <secondary>installation on</secondary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=ed3392b9970454e2306bcda37dae2897 -->

<!-- pgdoc-cn_start sig_en=bf2cc809d1c46ce4f33398aee2cc44a5 sig_cn_org=None source=14.1 
   <para>
    PostgreSQL for Windows can be built using MinGW, a Unix-like build
    environment for Microsoft operating systems, or using
    Microsoft's <productname>Visual C++</productname> compiler suite.
    The MinGW build procedure uses the normal build system described in
    this chapter; the Visual C++ build works completely differently
    and is described in <xref linkend="install-windows"/>.
   </para>
________________________________________________________-->
   <para>
    用于 Windows 的 PostgreSQL 可以使用 MinGW 编译，它是一个用于微软操作系统的类 Unix 的编译环境。也可以使用微软的<productname>Visual C++</productname>编译器套件来编译。
    MinGW 编译步骤使用本章中描述的正常编译系统；而  Visual C++ 编译的工作完全不同并且在<xref linkend="install-windows"/>/中描述。
   </para>
<!-- pgdoc-cn_end sig_en=bf2cc809d1c46ce4f33398aee2cc44a5 -->

<!-- pgdoc-cn_start sig_en=76b5c35fc5ec699780394ea44db6a066 sig_cn_org=None source=14.1 
   <para>
    The native Windows port requires a 32 or 64-bit version of Windows
    2000 or later. Earlier operating systems do
    not have sufficient infrastructure (but Cygwin may be used on
    those).  MinGW, the Unix-like build tools, and MSYS, a collection
    of Unix tools required to run shell scripts
    like <command>configure</command>, can be downloaded
    from <ulink url="http://www.mingw.org/"></ulink>.  Neither is
    required to run the resulting binaries; they are needed only for
    creating the binaries.
   </para>
________________________________________________________-->
   <para>
    原生 Windows 移植要求一个 Windows 2000 或更高的 32 或 64 位版本。早期的操作系统没有足够的基础设施（但 Cygwin可以用在它们之上）。类 Unix 的编译工具 MinGW 和 MSYS（一个 Unix 工具集合，用于运行如<command>configure</command>之类的 shell 脚本）可以从<ulink url="http://www.mingw.org/"></ulink>下载。运行结果二进制两者都需要，它们只在创建二进制时需要。
   </para>
<!-- pgdoc-cn_end sig_en=76b5c35fc5ec699780394ea44db6a066 -->

<!-- pgdoc-cn_start sig_en=0fbb523bd2db8071520927af37829e13 sig_cn_org=None source=14.1 
   <para>
     To build 64 bit binaries using MinGW, install the 64 bit tool set
     from <ulink url="https://mingw-w64.org/"></ulink>, put its bin
     directory in the <envar>PATH</envar>, and run
     <command>configure</command> with the
     <command>-&minus;host=x86_64-w64-mingw32</command> option.
   </para>
________________________________________________________-->
   <para>
     要使用 MinGW 编译 64 位二进制，从<ulink url="http://mingw-w64.sourceforge.net/"></ulink>安装 64 位工具。把它放在<envar>PATH</envar>中的 bin 目录，并且使用<command>--host=x86_64-w64-mingw32</command>选项运行<command>configure</command>.
   </para>
<!-- pgdoc-cn_end sig_en=0fbb523bd2db8071520927af37829e13 -->

<!-- pgdoc-cn_start sig_en=6a4f6d52206bbf45fbf40655f8a0a0bf sig_cn_org=None source=14.1 
   <para>
    After you have everything installed, it is suggested that you
    run <application>psql</application>
    under <command>CMD.EXE</command>, as the MSYS console has
    buffering issues.
   </para>
________________________________________________________-->
   <para>
    在你安装完所有的东西之后，我们建议你在<command>CMD.EXE</command>下运行<application>psql</application>，因为 MSYS 控制台有缓冲问题。
   </para>
<!-- pgdoc-cn_end sig_en=6a4f6d52206bbf45fbf40655f8a0a0bf -->

   <sect3 id="windows-crash-dumps">
<!-- pgdoc-cn_start sig_en=db07b661971acfcc084dcfdf9e5001aa sig_cn_org=None source=14.1 
    <title>Collecting Crash Dumps on Windows</title>
________________________________________________________-->
    <title>在 Windows 上收集崩溃转储</title>
<!-- pgdoc-cn_end sig_en=db07b661971acfcc084dcfdf9e5001aa -->

<!-- pgdoc-cn_start sig_en=f46518990088995d6dc86fbde4ac9526 sig_cn_org=None source=14.1 
    <para>
     If PostgreSQL on Windows crashes, it has the ability to generate
     <productname>minidumps</productname> that can be used to track down the cause
     for the crash, similar to core dumps on Unix. These dumps can be
     read using the <productname>Windows Debugger Tools</productname> or using
     <productname>Visual Studio</productname>. To enable the generation of dumps
     on Windows, create a subdirectory named <filename>crashdumps</filename>
     inside the cluster data directory. The dumps will then be written
     into this directory with a unique name based on the identifier of
     the crashing process and the current time of the crash.
    </para>
________________________________________________________-->
    <para>
     如果 PostgreSQL 在 Windows 上崩溃，它有能力产生<productname>minidumps</productname>，这可以被用来追踪崩溃发生的原因，这与 Unix 上的核心转储相似。这些转储可以被使用<productname>Windows Debugger Tools</productname>或<productname>Visual Studio</productname>读取。要启用在 Windows 上的转储生成，可在集簇数据目录下创建一个名为<filename>crashdumps</filename>的子目录。转储将被写入到这个目录，转储的名字基于崩溃进程的标识符和崩溃的当前时间来确定。
    </para>
<!-- pgdoc-cn_end sig_en=f46518990088995d6dc86fbde4ac9526 -->
   </sect3>
  </sect2>

  <sect2 id="installation-notes-solaris">
<!-- pgdoc-cn_start sig_en=8b2462ff94c2b83d4083245879ef9746 sig_cn_org=None source=14.1 
   <title>Solaris</title>
________________________________________________________-->
   <title>Solaris</title>
<!-- pgdoc-cn_end sig_en=8b2462ff94c2b83d4083245879ef9746 -->

<!-- pgdoc-cn_start sig_en=765949c5540be3523673777faa385a65 sig_cn_org=None source=14.1 
   <indexterm zone="installation-notes-solaris">
    <primary>Solaris</primary>
    <secondary>installation on</secondary>
   </indexterm>
________________________________________________________-->
   <indexterm zone="installation-notes-solaris">
    <primary>Solaris</primary>
    <secondary>installation on</secondary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=765949c5540be3523673777faa385a65 -->

<!-- pgdoc-cn_start sig_en=d79c25449e45d2fbfa1fbce4a9739f5b sig_cn_org=None source=14.1 
   <para>
    PostgreSQL is well-supported on Solaris.  The more up to date your
    operating system, the fewer issues you will experience.
   </para>
________________________________________________________-->
   <para>
    PostgreSQL 在 Solaris 上得到了很好的支持。你的操作系统越新，你将会碰到更少的问题。
   </para>
<!-- pgdoc-cn_end sig_en=d79c25449e45d2fbfa1fbce4a9739f5b -->

   <sect3>
<!-- pgdoc-cn_start sig_en=739af10fb5b0ee2f0f6674a37f59e464 sig_cn_org=None source=14.1 
    <title>Required Tools</title>
________________________________________________________-->
    <title>要求的工具</title>
<!-- pgdoc-cn_end sig_en=739af10fb5b0ee2f0f6674a37f59e464 -->

<!-- pgdoc-cn_start sig_en=0db65372c9db592d8b5b5629d7d90187 sig_cn_org=None source=14.1 
    <para>
     You can build with either GCC or Sun's compiler suite.  For
     better code optimization, Sun's compiler is strongly recommended
     on the SPARC architecture.  If
     you are using Sun's compiler, be careful not to select
     <filename>/usr/ucb/cc</filename>;
     use <filename>/opt/SUNWspro/bin/cc</filename>.
    </para>
________________________________________________________-->
    <para>
     你可以使用 GCC 或 Sun 的编译器套件进行编译。为了更好的代码优化，我们强烈推荐在 SPARC 架构下使用 Sun 的编译器。如果你正在使用 Sun 的编译器，注意不要选择<filename>/usr/ucb/cc</filename>；而是使用<filename>/opt/SUNWspro/bin/cc</filename>。
    </para>
<!-- pgdoc-cn_end sig_en=0db65372c9db592d8b5b5629d7d90187 -->

<!-- pgdoc-cn_start sig_en=3c628631c88c55714cbd79a03d2a18a2 sig_cn_org=None source=14.1 
    <para>
     You can download Sun Studio
     from <ulink url="https://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>.
     Many GNU tools are integrated into Solaris 10, or they are
     present on the Solaris companion CD.  If you need packages for
     older versions of Solaris, you can find these tools
     at <ulink url="http://www.sunfreeware.com"></ulink>.
     If you prefer
     sources, look
     at <ulink url="https://www.gnu.org/prep/ftp"></ulink>.
    </para>
________________________________________________________-->
    <para>
     你可以从<ulink url="https://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>下载 Sun Studio。很多 GNU 工具都被整合到了 Solaris 10，或者它们在 Solaris companion CD 中。如果你需要用于老版本 Solaris 的包，你可以在<ulink url="http://www.sunfreeware.com"></ulink>找到这些工具。如果你想要源码，在<ulink url="https://www.gnu.org/prep/ftp"></ulink>上找找。
    </para>
<!-- pgdoc-cn_end sig_en=3c628631c88c55714cbd79a03d2a18a2 -->
   </sect3>

   <sect3>
<!-- pgdoc-cn_start sig_en=0abe7461387911526853eea3ef258422 sig_cn_org=None source=14.1 
    <title>configure Complains About a Failed Test Program</title>
________________________________________________________-->
    <title>configure 抱怨一个失败的测试程序</title>
<!-- pgdoc-cn_end sig_en=0abe7461387911526853eea3ef258422 -->

<!-- pgdoc-cn_start sig_en=d2153bfc9ac88e1b02340324f47567b8 sig_cn_org=None source=14.1 
    <para>
     If <command>configure</command> complains about a failed test
     program, this is probably a case of the run-time linker being
     unable to find some library, probably libz, libreadline or some
     other non-standard library such as libssl.  To point it to the
     right location, set the <envar>LDFLAGS</envar> environment
     variable on the <command>configure</command> command line, e.g.,
<programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
</programlisting>
     See
     the <citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>
     man page for more information.
    </para>
________________________________________________________-->
    <para>
     如果<command>configure</command>抱怨一个失败的测试程序，可能的情况是运行时链接器无法找到某些库，可能是libz、libreadline或某些其他非标准库如 libssl。要向它指出正确的位置，在<command>configure</command>命令行上设置<envar>LDFLAGS</envar>环境变量，例如：
<programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
</programlisting>
     更多信息可见<citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>手册页。
    </para>
<!-- pgdoc-cn_end sig_en=d2153bfc9ac88e1b02340324f47567b8 -->
   </sect3>

   <sect3>
<!-- pgdoc-cn_start sig_en=67cea243856904588d4f684ee82c41d0 sig_cn_org=None source=14.1 
    <title>Compiling for Optimal Performance</title>
________________________________________________________-->
    <title>为最优性能编译</title>
<!-- pgdoc-cn_end sig_en=67cea243856904588d4f684ee82c41d0 -->

<!-- pgdoc-cn_start sig_en=0450474c9a2dee2b9d336a250bfc5209 sig_cn_org=None source=14.1 
    <para>
     On the SPARC architecture, Sun Studio is strongly recommended for
     compilation.  Try using the <option>-xO5</option> optimization
     flag to generate significantly faster binaries.  Do not use any
     flags that modify behavior of floating-point operations
     and <varname>errno</varname> processing (e.g.,
     <option>-fast</option>).
    </para>
________________________________________________________-->
    <para>
     在 SPARC 架构上，我们强烈推荐使用 Sun Studio来编译。尝试使用<option>-xO5</option>优化标志来生成显著加快的二进制。不要使用任何修改浮点操作和<varname>errno</varname>处理（例如<option>-fast</option>）行为的标志。
    </para>
<!-- pgdoc-cn_end sig_en=0450474c9a2dee2b9d336a250bfc5209 -->

<!-- pgdoc-cn_start sig_en=07c94a906d0d7d57f8a53171273649cf sig_cn_org=None source=14.1 
    <para>
     If you do not have a reason to use 64-bit binaries on SPARC,
     prefer the 32-bit version.  The 64-bit operations are slower and
     64-bit binaries are slower than the 32-bit variants.  On the
     other hand, 32-bit code on the AMD64 CPU family is not native,
     so 32-bit code is significantly slower on that CPU family.
    </para>
________________________________________________________-->
    <para>
     如果你没有理由要使用 SPARC 上的 64 位二进制，最好用 32 位版本。64 位操作较慢并且 64 位二进制比其 32 位变体要慢。在另一方面，AMD64 CPU 家族上的32 位代码不是原生的，所以在那个 CPU 族中 32 位代码要明显地更慢。
    </para>
<!-- pgdoc-cn_end sig_en=07c94a906d0d7d57f8a53171273649cf -->
   </sect3>

   <sect3>
<!-- pgdoc-cn_start sig_en=47ac0253abcce128bd90dd1c27d63e9d sig_cn_org=None source=14.1 
    <title>Using DTrace for Tracing PostgreSQL</title>
________________________________________________________-->
    <title>用 DTrace 来跟踪 PostgreSQL</title>
<!-- pgdoc-cn_end sig_en=47ac0253abcce128bd90dd1c27d63e9d -->

<!-- pgdoc-cn_start sig_en=2dad5ecc2a39314f59260033b52de303 sig_cn_org=None source=14.1 
    <para>
     Yes, using DTrace is possible.  See <xref linkend="dynamic-trace"/> for
     further information.
    </para>
________________________________________________________-->
    <para>
     是的，可以使用 DTrace。详见<xref linkend="dynamic-trace"/>。
    </para>
<!-- pgdoc-cn_end sig_en=2dad5ecc2a39314f59260033b52de303 -->

<!-- pgdoc-cn_start sig_en=3bbe8ff608257c00809e81a60c0c0dca sig_cn_org=None source=14.1 
    <para>
     If you see the linking of the <command>postgres</command> executable abort with an
     error message like:
<screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
</screen>
     your DTrace installation is too old to handle probes in static
     functions.  You need Solaris 10u4 or newer to use DTrace.
    </para>
________________________________________________________-->
    <para>
     如果你看到<command>postgres</command>可执行程序的链接中断并且报出下面的错误消息：
<screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
</screen>
     说明你的 DTrace 安装太旧，无法处理静态函数中的探测。你需要 Solaris 10u4 或更新的版本以使用DTrace。
    </para>
<!-- pgdoc-cn_end sig_en=3bbe8ff608257c00809e81a60c0c0dca -->
   </sect3>
  </sect2>
 </sect1>

</chapter>
