<!-- doc/src/sgml/contrib-spi.sgml -->

<sect1 id="contrib-spi" xreflabel="spi">
<!-- pgdoc-cn_start sig_en=75b12ae921a2fc03074d73c393688e6f sig_cn_org=None source=14.1 
 <title>spi</title>
________________________________________________________-->
 <title>spi</title>
<!-- pgdoc-cn_end sig_en=75b12ae921a2fc03074d73c393688e6f -->

<!-- pgdoc-cn_start sig_en=c451fa29432739a281964fb8fdb099c9 sig_cn_org=None source=14.1 
 <indexterm zone="contrib-spi">
  <primary>SPI</primary>
  <secondary>examples</secondary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="contrib-spi">
  <primary>SPI</primary>
  <secondary>examples</secondary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=c451fa29432739a281964fb8fdb099c9 -->

<!-- pgdoc-cn_start sig_en=fe8d5791dd43f342004ec40932b63dc7 sig_cn_org=None source=14.1 
 <para>
  The <application>spi</application> module provides several workable examples
  of using the <link linkend="spi">Server Programming Interface</link>
  (<acronym>SPI</acronym>) and triggers.  While these functions are of
  some value in
  their own right, they are even more useful as examples to modify for
  your own purposes.  The functions are general enough to be used
  with any table, but you have to specify table and field names (as described
  below) while creating a trigger.
 </para>
________________________________________________________-->
 <para>
  <application>spi</application>模块提供了多个可工作的使用<link linkend="spi">服务器编程接口</link>
  (<acronym>SPI</acronym>) 和触发器的例子。尽管这些例子的价值只对它们自己合适，它们甚至更有助于作为例子来修改达到你自己的目的。这些函数足够普通，可以与任何表一起使用，但是在创建一个触发器时你必须指定表名和域名（如下所述） 。
 </para>
<!-- pgdoc-cn_end sig_en=fe8d5791dd43f342004ec40932b63dc7 -->

<!-- pgdoc-cn_start sig_en=8f944a35fb073fc93e256ea203f520b7 sig_cn_org=None source=14.1 
 <para>
  Each of the groups of functions described below is provided as a
  separately-installable extension.
 </para>
________________________________________________________-->
 <para>
  下面描述的函数组中的每一个都作为一个独立可安装的扩展被提供。
 </para>
<!-- pgdoc-cn_end sig_en=8f944a35fb073fc93e256ea203f520b7 -->

 <sect2>
<!-- pgdoc-cn_start sig_en=83d2b0a067910a2666020cd12acf3916 sig_cn_org=None source=14.1 
  <title>refint &mdash; Functions for Implementing Referential Integrity</title>
________________________________________________________-->
  <title>refint &mdash; 用于实现参照完整性的函数</title>
<!-- pgdoc-cn_end sig_en=83d2b0a067910a2666020cd12acf3916 -->

<!-- pgdoc-cn_start sig_en=3e26d6a141e4a67da88a0fcc73108b8a sig_cn_org=None source=14.1 
  <para>
   <function>check_primary_key()</function> and
   <function>check_foreign_key()</function> are used to check foreign key constraints.
   (This functionality is long since superseded by the built-in foreign
   key mechanism, of course, but the module is still useful as an example.)
  </para>
________________________________________________________-->
  <para>
   <function>check_primary_key()</function>和<function>check_foreign_key()</function>被用来检查外键约束（当然，这个功能很早以前被内建的外建机制取代了，但是该模块还是可以用作一个例子）。
  </para>
<!-- pgdoc-cn_end sig_en=3e26d6a141e4a67da88a0fcc73108b8a -->

<!-- pgdoc-cn_start sig_en=d4dd366bd76cce97be644d0d1cd988fd sig_cn_org=None source=14.1 
  <para>
   <function>check_primary_key()</function> checks the referencing table.
   To use, create a <literal>BEFORE INSERT OR UPDATE</literal> trigger using this
   function on a table referencing another table. Specify as the trigger
   arguments: the referencing table's column name(s) which form the foreign
   key, the referenced table name, and the column names in the referenced table
   which form the primary/unique key.  To handle multiple foreign
   keys, create a trigger for each reference.
  </para>
________________________________________________________-->
  <para>
   <function>check_primary_key()</function>检查引用表。用法是使用这个函数在一个引用其他表的表上创建一个<literal>BEFORE INSERT OR UPDATE</literal>触发器。指定该触发器的参数为：引用表中构成外键的列名、被引用表名称以及在被引用表中构成主键/唯一键的列名。要处理多个外键，请为每一个引用创建一个触发器。
  </para>
<!-- pgdoc-cn_end sig_en=d4dd366bd76cce97be644d0d1cd988fd -->

<!-- pgdoc-cn_start sig_en=7d73853c340f3a3d827d9b282e9e1b35 sig_cn_org=None source=14.1 
  <para>
   <function>check_foreign_key()</function> checks the referenced table.
   To use, create a <literal>BEFORE DELETE OR UPDATE</literal> trigger using this
   function on a table referenced by other table(s).  Specify as the trigger
   arguments: the number of referencing tables for which the function has to
   perform checking, the action if a referencing key is found
   (<literal>cascade</literal> &mdash; to delete the referencing row,
   <literal>restrict</literal> &mdash; to abort transaction if referencing keys
   exist, <literal>setnull</literal> &mdash; to set referencing key fields to null),
   the triggered table's column names which form the primary/unique key, then
   the referencing table name and column names (repeated for as many
   referencing tables as were specified by first argument).  Note that the
   primary/unique key columns should be marked NOT NULL and should have a
   unique index.
  </para>
________________________________________________________-->
  <para>
   <function>check_foreign_key()</function>检查被引用表。用法是使用这个函数在一个被其他表引用的表上创建一个<literal>BEFORE DELETE OR UPDATE</literal>触发器。指定该触发器的参数为：该函数必须对其执行检查的引用表数量、找到一个引用键后的动作（<literal>cascade</literal> &mdash; 删除引用行，<literal>restrict</literal> &mdash; 如果引用键存在则中断事务，<literal>setnull</literal> &mdash; 设置引用键域为空）、触发器所在表中构成主键/唯一键的列名、引用表名称和列名称（第一个参数指定多少个引用表就重复多少次）。注意主键/唯一键列应该被标记为 NOT NULL 并且应该有一个唯一索引。
  </para>
<!-- pgdoc-cn_end sig_en=7d73853c340f3a3d827d9b282e9e1b35 -->

<!-- pgdoc-cn_start sig_en=b4a1f769f38bed996e6196ddc910b591 sig_cn_org=None source=14.1 
  <para>
   There are examples in <filename>refint.example</filename>.
  </para>
________________________________________________________-->
  <para>
   <filename>refint.example</filename>中有一些例子。
  </para>
<!-- pgdoc-cn_end sig_en=b4a1f769f38bed996e6196ddc910b591 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=3d3ddb627da95d33c74b749b2477b917 sig_cn_org=None source=14.1 
  <title>autoinc &mdash; Functions for Autoincrementing Fields</title>
________________________________________________________-->
  <title>autoinc &mdash; 用于自增域的函数</title>
<!-- pgdoc-cn_end sig_en=3d3ddb627da95d33c74b749b2477b917 -->

<!-- pgdoc-cn_start sig_en=fab23c0ea118f65c4beee383117bd107 sig_cn_org=None source=14.1 
  <para>
   <function>autoinc()</function> is a trigger that stores the next value of
   a sequence into an integer field.  This has some overlap with the
   built-in <quote>serial column</quote> feature, but it is not the same:
   <function>autoinc()</function> will override attempts to substitute a
   different field value during inserts, and optionally it can be
   used to increment the field during updates, too.
  </para>
________________________________________________________-->
  <para>
   <function>autoinc()</function>是一个将序列的下一个值存储到一个整数域的触发器。这和内建的<quote>序数列</quote>特性有些重叠，但是它并不完全一样：<function>autoinc()</function>在插入时会覆盖掉给出的不同域值，并且它可被选择用来在更新时增加域。
  </para>
<!-- pgdoc-cn_end sig_en=fab23c0ea118f65c4beee383117bd107 -->

<!-- pgdoc-cn_start sig_en=5ecd4d994fd980d74270a5ff54bf346c sig_cn_org=None source=14.1 
  <para>
   To use, create a <literal>BEFORE INSERT</literal> (or optionally <literal>BEFORE
   INSERT OR UPDATE</literal>) trigger using this function.  Specify two
   trigger arguments: the name of the integer column to be modified,
   and the name of the sequence object that will supply values.
   (Actually, you can specify any number of pairs of such names, if
   you'd like to update more than one autoincrementing column.)
  </para>
________________________________________________________-->
  <para>
   用法是使用这个函数创建一个<literal>BEFORE INSERT</literal>（或者<literal>BEFORE INSERT OR UPDATE</literal>）触发器。指定两个触发器参数：要被修改的整数列名和将提供值的序列对象名（事实上，如果你想要更新多于一个自增列，你可以指定任意数量的这种名称对）。
  </para>
<!-- pgdoc-cn_end sig_en=5ecd4d994fd980d74270a5ff54bf346c -->

<!-- pgdoc-cn_start sig_en=7ce30f5117d3239fc6f75594c40afaea sig_cn_org=None source=14.1 
  <para>
   There is an example in <filename>autoinc.example</filename>.
  </para>
________________________________________________________-->
  <para>
   在<filename>autoinc.example</filename>中有一个例子。
  </para>
<!-- pgdoc-cn_end sig_en=7ce30f5117d3239fc6f75594c40afaea -->

 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=e260b1d361b08f035db11d239dbf1446 sig_cn_org=None source=14.1 
  <title>insert_username &mdash; Functions for Tracking Who Changed a Table</title>
________________________________________________________-->
  <title>insert_username &mdash; 用于跟踪谁修改了一个表的函数</title>
<!-- pgdoc-cn_end sig_en=e260b1d361b08f035db11d239dbf1446 -->

<!-- pgdoc-cn_start sig_en=7c151afe62b2903d6c0277afadbb2bf4 sig_cn_org=None source=14.1 
  <para>
   <function>insert_username()</function> is a trigger that stores the current
   user's name into a text field.  This can be useful for tracking
   who last modified a particular row within a table.
  </para>
________________________________________________________-->
  <para>
   <function>insert_username()</function>是存储当前用户名到一个文本域的触发器。这有助于跟踪是谁最后在一个表中修改了一个特定行。
  </para>
<!-- pgdoc-cn_end sig_en=7c151afe62b2903d6c0277afadbb2bf4 -->

<!-- pgdoc-cn_start sig_en=6f2476f6e5e5488304d86a011edc835d sig_cn_org=None source=14.1 
  <para>
   To use, create a <literal>BEFORE INSERT</literal> and/or <literal>UPDATE</literal>
   trigger using this function.  Specify a single trigger
   argument: the name of the text column to be modified.
  </para>
________________________________________________________-->
  <para>
   用法是使用这个函数创建一个<literal>BEFORE INSERT</literal>以及/或者<literal>UPDATE</literal>触发器。指定一个触发器参数：要被修改的文本列名。
  </para>
<!-- pgdoc-cn_end sig_en=6f2476f6e5e5488304d86a011edc835d -->

<!-- pgdoc-cn_start sig_en=c41430a23785621df2c8dd42e3b479ea sig_cn_org=None source=14.1 
  <para>
   There is an example in <filename>insert_username.example</filename>.
  </para>
________________________________________________________-->
  <para>
   在<filename>insert_username.example</filename>中有一个例子。
  </para>
<!-- pgdoc-cn_end sig_en=c41430a23785621df2c8dd42e3b479ea -->

 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=b165459a2bacf1cccf1551dde6126bfe sig_cn_org=None source=14.1 
  <title>moddatetime &mdash; Functions for Tracking Last Modification Time</title>
________________________________________________________-->
  <title>moddatetime &mdash; 用于跟踪上一次修改时间的函数</title>
<!-- pgdoc-cn_end sig_en=b165459a2bacf1cccf1551dde6126bfe -->

<!-- pgdoc-cn_start sig_en=188802d760f6a50fd1fdac0e54c0b4a2 sig_cn_org=None source=14.1 
  <para>
   <function>moddatetime()</function> is a trigger that stores the current
   time into a <type>timestamp</type> field.  This can be useful for tracking
   the last modification time of a particular row within a table.
  </para>
________________________________________________________-->
  <para>
   <function>moddatetime()</function>是一个存储当前时间到一个<type>timestamp</type>域的触发器。它有助于跟踪一个表中特定行最后一次的修改时间。
  </para>
<!-- pgdoc-cn_end sig_en=188802d760f6a50fd1fdac0e54c0b4a2 -->

<!-- pgdoc-cn_start sig_en=213e4cfb9d856aae28e8627162b1d036 sig_cn_org=None source=14.1 
  <para>
   To use, create a <literal>BEFORE UPDATE</literal>
   trigger using this function.  Specify a single trigger
   argument: the name of the column to be modified.
   The column must be of type <type>timestamp</type> or <type>timestamp with
   time zone</type>.
  </para>
________________________________________________________-->
  <para>
   用法是使用这个函数创建一个<literal>BEFORE UPDATE</literal>触发器。指定一个触发器参数：要被修改的列名。该列必须是类型<type>timestamp</type>或者<type>timestamp with time zone</type>。
  </para>
<!-- pgdoc-cn_end sig_en=213e4cfb9d856aae28e8627162b1d036 -->

<!-- pgdoc-cn_start sig_en=ad37c94887c0baf2056b127056794563 sig_cn_org=None source=14.1 
  <para>
   There is an example in <filename>moddatetime.example</filename>.
  </para>
________________________________________________________-->
  <para>
   在<filename>moddatetime.example</filename>中有一个例子。
  </para>
<!-- pgdoc-cn_end sig_en=ad37c94887c0baf2056b127056794563 -->

 </sect2>

</sect1>
