<!-- doc/src/sgml/tcn.sgml -->

<sect1 id="tcn" xreflabel="tcn">
<!-- pgdoc-cn_start sig_en=11604714e6a1fffc862dd98d0ddad198 sig_cn_org=None source=14.1 
 <title>tcn</title>
________________________________________________________-->
 <title>tcn</title>
<!-- pgdoc-cn_end sig_en=11604714e6a1fffc862dd98d0ddad198 -->

<!-- pgdoc-cn_start sig_en=60538a80b02225cf571ece86ca7aef61 sig_cn_org=None source=14.1 
 <indexterm zone="tcn">
  <primary>tcn</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="tcn">
  <primary>tcn</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=60538a80b02225cf571ece86ca7aef61 -->

<!-- pgdoc-cn_start sig_en=dc19befd5106f37b5b89cfb121750287 sig_cn_org=None source=14.1 
 <indexterm zone="tcn">
  <primary>triggered_change_notification</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="tcn">
  <primary>triggered_change_notification</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=dc19befd5106f37b5b89cfb121750287 -->

<!-- pgdoc-cn_start sig_en=7298a479bf815d8090639e34ff37b576 sig_cn_org=None source=14.1 
 <para>
  The <filename>tcn</filename> module provides a trigger function that notifies
  listeners of changes to any table on which it is attached.  It must be
  used as an <literal>AFTER</literal> trigger <literal>FOR EACH ROW</literal>.
 </para>
________________________________________________________-->
 <para>
  <filename>tcn</filename>模块提供一个触发器函数，它通知监听者有关它所附着的任意表上的改变。它必须被用作一个<literal>行级</literal><literal>AFTER</literal>触发器。
 </para>
<!-- pgdoc-cn_end sig_en=7298a479bf815d8090639e34ff37b576 -->

<!-- pgdoc-cn_start sig_en=73fd7076637bb21a0cce44734412cba6 sig_cn_org=None source=14.1 
 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>
________________________________________________________-->
 <para>
  这个模块被认为是<quote>可信的</quote>，也就是说，它可以由对当前数据库具有<literal>CREATE</literal>权限的非超级用户安装。
 </para>
<!-- pgdoc-cn_end sig_en=73fd7076637bb21a0cce44734412cba6 -->

<!-- pgdoc-cn_start sig_en=9a941df4eddb2ea942a2d47f3d96eb56 sig_cn_org=None source=14.1 
 <para>
  Only one parameter may be supplied to the function in a
  <literal>CREATE TRIGGER</literal> statement, and that is optional.  If supplied
  it will be used for the channel name for the notifications.  If omitted
  <literal>tcn</literal> will be used for the channel name.
 </para>
________________________________________________________-->
 <para>
  在一个<literal>CREATE TRIGGER</literal>语句中只可以为该函数提供一个参数，并且是可选的。如果提供该参数，它将被作为用于通知的频道名。如果忽略它，频道名将使用<literal>tcn</literal>。
 </para>
<!-- pgdoc-cn_end sig_en=9a941df4eddb2ea942a2d47f3d96eb56 -->

<!-- pgdoc-cn_start sig_en=88efff61cf52e91e0581faa171929ef3 sig_cn_org=None source=14.1 
 <para>
  The payload of the notifications consists of the table name, a letter to
  indicate which type of operation was performed, and column name/value pairs
  for primary key columns.  Each part is separated from the next by a comma.
  For ease of parsing using regular expressions, table and column names are
  always wrapped in double quotes, and data values are always wrapped in
  single quotes.  Embedded quotes are doubled.
 </para>
________________________________________________________-->
 <para>
  通知的负载由表名、一个指示所执行操作类型的字母以及用于主键列的列名/值对构成。每一部分都用逗号与下一部分隔开。为了便于解析对正则表达式的使用，表和列名总是被包裹在双引号内，并且数据值总是被包裹在单引号内。嵌入的引号都被双写。
 </para>
<!-- pgdoc-cn_end sig_en=88efff61cf52e91e0581faa171929ef3 -->

<!-- pgdoc-cn_start sig_en=9a5befbf3a02fe1e5b1d69711611c084 sig_cn_org=None source=14.1 
 <para>
  A brief example of using the extension follows.

<programlisting>
test=# create table tcndata
test-#   (
test(#     a int not null,
test(#     b date not null,
test(#     c text,
test(#     primary key (a, b)
test(#   );
CREATE TABLE
test=# create trigger tcndata_tcn_trigger
test-#   after insert or update or delete on tcndata
test-#   for each row execute function triggered_change_notification();
CREATE TRIGGER
test=# listen tcn;
LISTEN
test=# insert into tcndata values (1, date '2012-12-22', 'one'),
test-#                            (1, date '2012-12-23', 'another'),
test-#                            (2, date '2012-12-23', 'two');
INSERT 0 3
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='1',"b"='2012-12-23'" received from server process with PID 22770.
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='2',"b"='2012-12-23'" received from server process with PID 22770.
test=# update tcndata set c = 'uno' where a = 1;
UPDATE 2
Asynchronous notification "tcn" with payload ""tcndata",U,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.
Asynchronous notification "tcn" with payload ""tcndata",U,"a"='1',"b"='2012-12-23'" received from server process with PID 22770.
test=# delete from tcndata where a = 1 and b = date '2012-12-22';
DELETE 1
Asynchronous notification "tcn" with payload ""tcndata",D,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.
</programlisting>
 </para>
________________________________________________________-->
 <para>
  下面是使用该扩展的简单例子。

<programlisting>
test=# create table tcndata
test-#   (
test(#     a int not null,
test(#     b date not null,
test(#     c text,
test(#     primary key (a, b)
test(#   );
CREATE TABLE
test=# create trigger tcndata_tcn_trigger
test-#   after insert or update or delete on tcndata
test-#   for each row execute function triggered_change_notification();
CREATE TRIGGER
test=# listen tcn;
LISTEN
test=# insert into tcndata values (1, date '2012-12-22', 'one'),
test-#                            (1, date '2012-12-23', 'another'),
test-#                            (2, date '2012-12-23', 'two');
INSERT 0 3
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='1',"b"='2012-12-23'" received from server process with PID 22770.
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='2',"b"='2012-12-23'" received from server process with PID 22770.
test=# update tcndata set c = 'uno' where a = 1;
UPDATE 2
Asynchronous notification "tcn" with payload ""tcndata",U,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.
Asynchronous notification "tcn" with payload ""tcndata",U,"a"='1',"b"='2012-12-23'" received from server process with PID 22770.
test=# delete from tcndata where a = 1 and b = date '2012-12-22';
DELETE 1
Asynchronous notification "tcn" with payload ""tcndata",D,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.
</programlisting>
 </para>
<!-- pgdoc-cn_end sig_en=9a5befbf3a02fe1e5b1d69711611c084 -->

</sect1>
