<!-- doc/src/sgml/archive-modules.sgml -->

<chapter id="archive-modules">
<!-- pgdoc-cn_start sig_en=c31a4813c55a857834e1889b9a459272 sig_cn_org=94f9057b59523685216da13b84afcd1f source=15.7 
 <title>Archive Modules</title>
________________________________________________________-->
 <title>存档模块</title>
<!-- pgdoc-cn_end sig_en=c31a4813c55a857834e1889b9a459272 -->
<!-- pgdoc-cn_start sig_en=6e76ff6d219383b744714351a0b5d731 sig_cn_org=76da3f14eced0fd8f829746c41219a70 source=15.7 
 <indexterm zone="archive-modules">
  <primary>Archive Modules</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="archive-modules">
  <primary>归档模块</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=6e76ff6d219383b744714351a0b5d731 -->

<!-- pgdoc-cn_start sig_en=b08793000d11a189f1cbb44a23fe2f82 sig_cn_org=2c639ffcb4d3881730cfa70eed395e72 source=15.7 
 <para>
  PostgreSQL provides infrastructure to create custom modules for continuous
  archiving (see <xref linkend="continuous-archiving"/>).  While archiving via
  a shell command (i.e., <xref linkend="guc-archive-command"/>) is much
  simpler, a custom archive module will often be considerably more robust and
  performant.
 </para>
________________________________________________________-->
 <para>
  PostgreSQL提供了为连续归档创建自定义模块的基础设施（参见<xref linkend="continuous-archiving"/>）。
  虽然通过shell命令进行归档（即<xref linkend="guc-archive-command"/>）更简单，
  但自定义归档模块通常会更加健壮和高效。
</para>
<!-- pgdoc-cn_end sig_en=b08793000d11a189f1cbb44a23fe2f82 -->

<!-- pgdoc-cn_start sig_en=22b884fd910c7427328a4f746d5fefb9 sig_cn_org=5042f6b4b8299f0d6f3b0d6ac63d81ae source=15.7 
 <para>
  When a custom <xref linkend="guc-archive-library"/> is configured, PostgreSQL
  will submit completed WAL files to the module, and the server will avoid
  recycling or removing these WAL files until the module indicates that the files
  were successfully archived.  It is ultimately up to the module to decide what
  to do with each WAL file, but many recommendations are listed at
  <xref linkend="backup-archiving-wal"/>.
 </para>
________________________________________________________-->
 <para>
  当配置了自定义<xref linkend="guc-archive-library"/>时，PostgreSQL将完成的WAL文件提交给模块，
  服务器将避免回收或删除这些WAL文件，直到模块指示文件已成功归档为止。最终由模块决定如何处理每个WAL文件，
  但在<xref linkend="backup-archiving-wal"/>中列出了许多建议。
</para>
<!-- pgdoc-cn_end sig_en=22b884fd910c7427328a4f746d5fefb9 -->

<!-- pgdoc-cn_start sig_en=4c22d83a62e4d4fa499344145d6db882 sig_cn_org=a7494d00874ddad7c173e47380b85a52 source=15.7 
 <para>
  Archiving modules must at least consist of an initialization function (see
  <xref linkend="archive-module-init"/>) and the required callbacks (see
  <xref linkend="archive-module-callbacks"/>).  However, archive modules are
  also permitted to do much more (e.g., declare GUCs and register background
  workers).
 </para>
________________________________________________________-->
 <para>
  存档模块必须至少包括一个初始化函数（参见<xref linkend="archive-module-init"/>）和所需的回调函数（参见<xref linkend="archive-module-callbacks"/>）。
  但是，存档模块也被允许做更多的事情（例如，声明GUC和注册后台工作者）。
</para>
<!-- pgdoc-cn_end sig_en=4c22d83a62e4d4fa499344145d6db882 -->

<!-- pgdoc-cn_start sig_en=0c02c216629aadc88d419980235b8ef7 sig_cn_org=b30c9c8bdfa0a0e4084bc5bdd57262de source=15.7 
 <para>
  The <filename>contrib/basic_archive</filename> module contains a working
  example, which demonstrates some useful techniques.
 </para>
________________________________________________________-->
 <para>
  <filename>contrib/basic_archive</filename>模块包含一个可工作的示例，演示了一些有用的技术。
</para>
<!-- pgdoc-cn_end sig_en=0c02c216629aadc88d419980235b8ef7 -->

 <sect1 id="archive-module-init">
<!-- pgdoc-cn_start sig_en=a25c81a0e87f417d2071924d57c3cc77 sig_cn_org=b77a38a8c4f8d14aca4318ff44e2b040 source=15.7 
  <title>Initialization Functions</title>
________________________________________________________-->
  <title>初始化函数</title>
<!-- pgdoc-cn_end sig_en=a25c81a0e87f417d2071924d57c3cc77 -->
<!-- pgdoc-cn_start sig_en=71c388e73a3fbab2fbe0ed0a29389d47 sig_cn_org=e4923f244b4797ea6f7144107852c9a5 source=15.7 
  <indexterm zone="archive-module-init">
   <primary>_PG_archive_module_init</primary>
  </indexterm>
________________________________________________________-->
  <indexterm zone="archive-module-init">
   <primary>_PG_archive_module_init</primary>
</indexterm>
<!-- pgdoc-cn_end sig_en=71c388e73a3fbab2fbe0ed0a29389d47 -->
<!-- pgdoc-cn_start sig_en=4848736821bbf231095eec46e24d103e sig_cn_org=9edfca7d799a2c6a550a72f0330bd9d7 source=15.7 
  <para>
   An archive library is loaded by dynamically loading a shared library with the
   <xref linkend="guc-archive-library"/>'s name as the library base name.  The
   normal library search path is used to locate the library.  To provide the
   required archive module callbacks and to indicate that the library is
   actually an archive module, it needs to provide a function named
   <function>_PG_archive_module_init</function>.  This function is passed a
   struct that needs to be filled with the callback function pointers for
   individual actions.

<programlisting>
typedef struct ArchiveModuleCallbacks
{
    ArchiveCheckConfiguredCB check_configured_cb;
    ArchiveFileCB archive_file_cb;
    ArchiveShutdownCB shutdown_cb;
} ArchiveModuleCallbacks;
typedef void (*ArchiveModuleInit) (struct ArchiveModuleCallbacks *cb);
</programlisting>

   Only the <function>archive_file_cb</function> callback is required.  The
   others are optional.
  </para>
________________________________________________________-->
  <para>
   通过动态加载一个共享库来加载存档库，共享库的名称为<xref linkend="guc-archive-library"/>的基本名称。
   使用正常的库搜索路径来定位库。为了提供所需的存档模块回调并指示该库实际上是一个存档模块，
   它需要提供一个名为<function>_PG_archive_module_init</function>的函数。该函数接收一个结构体，
   需要填充其中的回调函数指针以执行各个操作。

<programlisting>
typedef struct ArchiveModuleCallbacks
{
    ArchiveCheckConfiguredCB check_configured_cb;
    ArchiveFileCB archive_file_cb;
    ArchiveShutdownCB shutdown_cb;
} ArchiveModuleCallbacks;
typedef void (*ArchiveModuleInit) (struct ArchiveModuleCallbacks *cb);
</programlisting>

   只有<function>archive_file_cb</function>回调是必需的。其他回调是可选的。
</para>
<!-- pgdoc-cn_end sig_en=4848736821bbf231095eec46e24d103e -->
 </sect1>

 <sect1 id="archive-module-callbacks">
<!-- pgdoc-cn_start sig_en=bdb232273ea8ca4908fed922d376aaf6 sig_cn_org=166126b110517b3f8c2e0bfbc5f45221 source=15.7 
  <title>Archive Module Callbacks</title>
________________________________________________________-->
  <title>存档模块回调函数</title>
<!-- pgdoc-cn_end sig_en=bdb232273ea8ca4908fed922d376aaf6 -->
<!-- pgdoc-cn_start sig_en=37dd2aaea2a91b668ef427acb0065f43 sig_cn_org=2b747e33a89b6b9fc94ed1755e43fedf source=15.7 
  <para>
   The archive callbacks define the actual archiving behavior of the module.
   The server will call them as required to process each individual WAL file.
  </para>
________________________________________________________-->
  <para>
   存档回调函数定义模块的实际存档行为。
   服务器将根据需要调用它们来处理每个单独的WAL文件。
</para>
<!-- pgdoc-cn_end sig_en=37dd2aaea2a91b668ef427acb0065f43 -->

  <sect2 id="archive-module-check">
<!-- pgdoc-cn_start sig_en=43b1b1b0fbfa01d807a29779f0ced29d sig_cn_org=5a1bc64532a5c95a86d77f032e7ab5d9 source=15.7 
   <title>Check Callback</title>
________________________________________________________-->
   <title>检查回调</title>
<!-- pgdoc-cn_end sig_en=43b1b1b0fbfa01d807a29779f0ced29d -->
<!-- pgdoc-cn_start sig_en=cb6e227d063b24175058dfb9dd41c019 sig_cn_org=6055ca5aacedb113204d20ded387dba7 source=15.7 
   <para>
    The <function>check_configured_cb</function> callback is called to determine
    whether the module is fully configured and ready to accept WAL files (e.g.,
    its configuration parameters are set to valid values).  If no
    <function>check_configured_cb</function> is defined, the server always
    assumes the module is configured.

<programlisting>
typedef bool (*ArchiveCheckConfiguredCB) (void);
</programlisting>

    If <literal>true</literal> is returned, the server will proceed with
    archiving the file by calling the <function>archive_file_cb</function>
    callback.  If <literal>false</literal> is returned, archiving will not
    proceed, and the archiver will emit the following message to the server log:
<screen>
WARNING:  archive_mode enabled, yet archiving is not configured
</screen>
    In the latter case, the server will periodically call this function, and
    archiving will proceed only when it returns <literal>true</literal>.
   </para>
________________________________________________________-->
   <para>
    回调<function>check_configured_cb</function>被调用以确定模块是否完全配置并准备接受WAL文件（例如，其配置参数设置为有效值）。
    如果未定义<function>check_configured_cb</function>，服务器始终假定模块已配置。

<programlisting>
typedef bool (*ArchiveCheckConfiguredCB) (void);
</programlisting>

    如果返回<literal>true</literal>，服务器将通过调用<function>archive_file_cb</function>回调来继续归档文件。
    如果返回<literal>false</literal>，归档将不会继续，并且归档程序将向服务器日志发出以下消息：
<screen>
WARNING:  archive_mode enabled, yet archiving is not configured
</screen>
    在后一种情况下，服务器将定期调用此函数，只有当它返回<literal>true</literal>时，归档才会继续。
</para>
<!-- pgdoc-cn_end sig_en=cb6e227d063b24175058dfb9dd41c019 -->
  </sect2>

  <sect2 id="archive-module-archive">
<!-- pgdoc-cn_start sig_en=f3558b7d128924558f3ea314c1419639 sig_cn_org=6574c8e1efa8bfa9e113e96082c36aeb source=15.7 
   <title>Archive Callback</title>
________________________________________________________-->
   <title>存档回调</title>
<!-- pgdoc-cn_end sig_en=f3558b7d128924558f3ea314c1419639 -->
<!-- pgdoc-cn_start sig_en=90d338c9b5f67b3025aa9a64c18f4f72 sig_cn_org=794bc92bc4c112608ba5830a7501f584 source=15.7 
   <para>
    The <function>archive_file_cb</function> callback is called to archive a
    single WAL file.

<programlisting>
typedef bool (*ArchiveFileCB) (const char *file, const char *path);
</programlisting>

    If <literal>true</literal> is returned, the server proceeds as if the file
    was successfully archived, which may include recycling or removing the
    original WAL file.  If <literal>false</literal> is returned, the server will
    keep the original WAL file and retry archiving later.
    <replaceable>file</replaceable> will contain just the file name of the WAL
    file to archive, while <replaceable>path</replaceable> contains the full
    path of the WAL file (including the file name).
   </para>
________________________________________________________-->
   <para>
    <function>archive_file_cb</function>回调函数被调用，用于归档单个WAL文件。

    <programlisting>
    typedef bool (*ArchiveFileCB) (const char *file, const char *path);
    </programlisting>

    如果返回<literal>true</literal>，服务器将继续进行，就好像文件已成功归档，这可能包括回收或删除原始WAL文件。如果返回<literal>false</literal>，服务器将保留原始WAL文件，并稍后重试归档。
    <replaceable>file</replaceable>将仅包含要归档的WAL文件的文件名，而<replaceable>path</replaceable>包含WAL文件的完整路径（包括文件名）。
</para>
<!-- pgdoc-cn_end sig_en=90d338c9b5f67b3025aa9a64c18f4f72 -->
  </sect2>

  <sect2 id="archive-module-shutdown">
<!-- pgdoc-cn_start sig_en=68b3ee2e7b46796aed869d754422c63d sig_cn_org=e76d0196a15baed4533a8fc3b8255fec source=15.7 
   <title>Shutdown Callback</title>
________________________________________________________-->
   <title>关闭回调</title>
<!-- pgdoc-cn_end sig_en=68b3ee2e7b46796aed869d754422c63d -->
<!-- pgdoc-cn_start sig_en=7988a41cd3f5cf75cb098f4be182e5a4 sig_cn_org=c3211755578c576087a76c3c0f468c63 source=15.7 
   <para>
    The <function>shutdown_cb</function> callback is called when the archiver
    process exits (e.g., after an error) or the value of
    <xref linkend="guc-archive-library"/> changes.  If no
    <function>shutdown_cb</function> is defined, no special action is taken in
    these situations.

<programlisting>
typedef void (*ArchiveShutdownCB) (void);
</programlisting>
   </para>
________________________________________________________-->
   <para>
    当归档器进程退出（例如，发生错误后）或者<xref linkend="guc-archive-library"/>的值发生变化时，会调用<function>shutdown_cb</function>回调函数。如果没有定义<function>shutdown_cb</function>，在这些情况下不会采取任何特殊操作。

<programlisting>
typedef void (*ArchiveShutdownCB) (void);
</programlisting>
</para>
<!-- pgdoc-cn_end sig_en=7988a41cd3f5cf75cb098f4be182e5a4 -->
  </sect2>
 </sect1>
</chapter>
