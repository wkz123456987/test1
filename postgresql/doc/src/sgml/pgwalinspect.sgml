<!-- doc/src/sgml/pgwalinspect.sgml -->

<sect1 id="pgwalinspect" xreflabel="pg_walinspect">
<!-- pgdoc-cn_start sig_en=ba56be332bd673b12278625e704404b0 sig_cn_org=edaae16ba4ff06ad244fad3ce86d0934 source=15.7 
 <title>pg_walinspect</title>
________________________________________________________-->
 <title>pg_walinspect</title>
<!-- pgdoc-cn_end sig_en=ba56be332bd673b12278625e704404b0 -->

<!-- pgdoc-cn_start sig_en=5813a758cc8c3340f96ce79b9a068196 sig_cn_org=9422768fc055db8de5dc2ca5777d3886 source=15.7 
 <indexterm zone="pgwalinspect">
  <primary>pg_walinspect</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="pgwalinspect">
  <primary>pg_walinspect</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=5813a758cc8c3340f96ce79b9a068196 -->

<!-- pgdoc-cn_start sig_en=72006b4b1737727b94f7fb0a61aebdec sig_cn_org=da3ac6340374e0d19bdb9d6fb8ef5fe5 source=15.7 
 <para>
  The <filename>pg_walinspect</filename> module provides SQL functions that
  allow you to inspect the contents of write-ahead log of
  a running <productname>PostgreSQL</productname> database cluster at a low
  level, which is useful for debugging, analytical, reporting or
  educational purposes. It is similar to <xref linkend="pgwaldump"/>, but
  accessible through SQL rather than a separate utility.
 </para>
________________________________________________________-->
 <para>
  <filename>pg_walinspect</filename>模块提供了SQL函数，允许您检查运行中的<productname>PostgreSQL</productname>数据库集群的预写式日志的内容，这对于调试、分析、报告或教育目的非常有用。它类似于<xref linkend="pgwaldump"/>，但是通过SQL而不是单独的实用程序访问。
</para>
<!-- pgdoc-cn_end sig_en=72006b4b1737727b94f7fb0a61aebdec -->

<!-- pgdoc-cn_start sig_en=72482fc251b05c7231b52709c76edc34 sig_cn_org=8ce414979882b595ea2c8e529c94a559 source=15.7 
 <para>
  All the functions of this module will provide the WAL information using the
  current server's timeline ID.
 </para>
________________________________________________________-->
 <para>
  所有这个模块的函数将使用当前服务器的时间线ID提供WAL信息。
</para>
<!-- pgdoc-cn_end sig_en=72482fc251b05c7231b52709c76edc34 -->

<!-- pgdoc-cn_start sig_en=13ca5bd300d69354edc0c10205a018ea sig_cn_org=9809b5e509821f1bc2a305b6afca1cc0 source=15.7 
 <para>
  All the functions of this module will try to find the first valid WAL record
  that is at or after the given <replaceable>in_lsn</replaceable> or
  <replaceable>start_lsn</replaceable> and will emit error if no such record
  is available. Similarly, the <replaceable>end_lsn</replaceable> must be
  available, and if it falls in the middle of a record, the entire record must
  be available.
 </para>
________________________________________________________-->
 <para>
  该模块的所有函数将尝试查找给定<replaceable>in_lsn</replaceable>或<replaceable>start_lsn</replaceable>之后或等于的第一个有效WAL记录，并在没有这样的记录时发出错误。
  同样，<replaceable>end_lsn</replaceable>必须可用，如果它落在记录的中间，则整个记录必须可用。
</para>
<!-- pgdoc-cn_end sig_en=13ca5bd300d69354edc0c10205a018ea -->

 <note>
<!-- pgdoc-cn_start sig_en=8a1c0435e1820e311fd758c3bfcb9c00 sig_cn_org=5e3e21a3d5503eac2c320a4a5bd249dd source=15.7 
  <para>
   Some functions, such as <function><link
   linkend="pg-logical-emit-message">pg_logical_emit_message</link></function>,
   return the LSN <emphasis>after</emphasis> the record just
   inserted. Therefore, if you pass that LSN as
   <replaceable>in_lsn</replaceable> or <replaceable>start_lsn</replaceable>
   to one of these functions, it will return the <emphasis>next</emphasis>
   record.
  </para>
________________________________________________________-->
  <para>
   一些函数，比如<function><link
   linkend="pg-logical-emit-message">pg_logical_emit_message</link></function>，
   在刚插入记录后返回LSN<emphasis>之后</emphasis>。因此，如果你将该LSN作为
   <replaceable>in_lsn</replaceable>或<replaceable>start_lsn</replaceable>传递给这些函数之一，
   它将返回<emphasis>下一个</emphasis>记录。
  </para>
<!-- pgdoc-cn_end sig_en=8a1c0435e1820e311fd758c3bfcb9c00 -->
 </note>
<!-- pgdoc-cn_start sig_en=4015c109fc599761d10f87b7b3292bc5 sig_cn_org=d11a2901b4ed45f261434cb2d3036ea6 source=15.7 
 <para>
  By default, use of these functions is restricted to superusers and members of
  the <literal>pg_read_server_files</literal> role. Access may be granted by
  superusers to others using <command>GRANT</command>.
 </para>
________________________________________________________-->
 <para>
  默认情况下，这些函数的使用仅限于超级用户和<literal>pg_read_server_files</literal>角色的成员。
  超级用户可以使用<command>GRANT</command>授予其他用户访问权限。
</para>
<!-- pgdoc-cn_end sig_en=4015c109fc599761d10f87b7b3292bc5 -->

 <sect2>
<!-- pgdoc-cn_start sig_en=de61004da272d2b09557e1e261c98ae9 sig_cn_org=None source=14.1 
  <title>General Functions</title>
________________________________________________________-->
  <title>通用函数</title>
<!-- pgdoc-cn_end sig_en=de61004da272d2b09557e1e261c98ae9 -->

  <variablelist>
   <varlistentry>
    <term>
     <function>pg_get_wal_record_info(in_lsn pg_lsn) returns record</function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=c5f6bba57e7c36c597f2b65ee7d7df2b sig_cn_org=913e308f323c51c708ae491ec14a81f0 source=15.7 
     <para>
      Gets WAL record information of a given LSN. If the given LSN isn't
      at the start of a WAL record, it gives the information of the next
      available valid WAL record; or an error if no such record is found.
      For example, usage of the function is as
      follows:
<screen>
postgres=# SELECT * FROM pg_get_wal_record_info('0/1E826E98');
-[ RECORD 1 ]-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
start_lsn        | 0/1E826F20
end_lsn          | 0/1E826F60
prev_lsn         | 0/1E826C80
xid              | 0
resource_manager | Heap2
record_type      | PRUNE
record_length    | 58
main_data_length | 8
fpi_length       | 0
description      | snapshotConflictHorizon 33748 nredirected 0 ndead 2
block_ref        | blkref #0: rel 1663/5/60221 fork main blk 2
</screen>
     </para>
________________________________________________________-->
     <para>
      获取给定LSN的WAL记录信息。如果给定LSN不在WAL记录的开头，则提供下一个可用的有效WAL记录的信息；如果找不到这样的记录，则报错。
      例如，函数的使用方法如下：
<screen>
postgres=# SELECT * FROM pg_get_wal_record_info('0/1E826E98');
-[ RECORD 1 ]----+----------------------------------------------------
start_lsn        | 0/1E826F20
end_lsn          | 0/1E826F60
prev_lsn         | 0/1E826C80
xid              | 0
resource_manager | Heap2
record_type      | PRUNE
record_length    | 58
main_data_length | 8
fpi_length       | 0
description      | snapshotConflictHorizon 33748 nredirected 0 ndead 2
block_ref        | blkref #0: rel 1663/5/60221 fork main blk 2
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=c5f6bba57e7c36c597f2b65ee7d7df2b -->
    </listitem>
   </varlistentry>

    <varlistentry>
    <term>
     <function>
      pg_get_wal_records_info(start_lsn pg_lsn, end_lsn pg_lsn)
      returns setof record
     </function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=534e20e137932599c54102a6429c4bc6 sig_cn_org=f09db151d9dba2d7a74458cee34386c4 source=15.7 
     <para>
      Gets information of all the valid WAL records between
      <replaceable>start_lsn</replaceable> and <replaceable>end_lsn</replaceable>.
      Returns one row per WAL record. If <replaceable>start_lsn</replaceable>
      or <replaceable>end_lsn</replaceable> are not yet available, the
      function will raise an error. For example:
<screen>
postgres=# SELECT * FROM pg_get_wal_records_info('0/1E913618', '0/1E913740') LIMIT 1;
-[ RECORD 1 ]-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
start_lsn        | 0/1E913618
end_lsn          | 0/1E913650
prev_lsn         | 0/1E9135A0
xid              | 0
resource_manager | Standby
record_type      | RUNNING_XACTS
record_length    | 50
main_data_length | 24
fpi_length       | 0
description      | nextXid 33775 latestCompletedXid 33774 oldestRunningXid 33775
block_ref        |
</screen>
     </para>
________________________________________________________-->
     <para>
      获取<replaceable>start_lsn</replaceable>和<replaceable>end_lsn</replaceable>之间所有有效WAL记录的信息。
      每个WAL记录返回一行。如果<replaceable>start_lsn</replaceable>或<replaceable>end_lsn</replaceable>尚未可用，
      函数将引发错误。例如：
<screen>
postgres=# SELECT * FROM pg_get_wal_records_info('0/1E913618', '0/1E913740') LIMIT 1;
-[ RECORD 1 ]----+--------------------------------------------------------------
start_lsn        | 0/1E913618
end_lsn          | 0/1E913650
prev_lsn         | 0/1E9135A0
xid              | 0
resource_manager | Standby
record_type      | RUNNING_XACTS
record_length    | 50
main_data_length | 24
fpi_length       | 0
description      | nextXid 33775 latestCompletedXid 33774 oldestRunningXid 33775
block_ref        |
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=534e20e137932599c54102a6429c4bc6 -->
    </listitem>
   </varlistentry>

    <varlistentry>
    <term>
     <function>
      pg_get_wal_records_info_till_end_of_wal(start_lsn pg_lsn)
      returns setof record
     </function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=e4e8285a4ef68d071d303cca9d4b86c7 sig_cn_org=2475cdb7778442e1a89e81e8ee167eaf source=15.7 
     <para>
      This function is the same as <function>pg_get_wal_records_info()</function>,
      except that it gets information of all the valid WAL records from
      <replaceable>start_lsn</replaceable> till the end of WAL.
     </para>
________________________________________________________-->
     <para>
      这个函数与<function>pg_get_wal_records_info()</function>相同，只是它获取从<replaceable>start_lsn</replaceable>到WAL结尾的所有有效WAL记录的信息。
     </para>
<!-- pgdoc-cn_end sig_en=e4e8285a4ef68d071d303cca9d4b86c7 -->
    </listitem>
   </varlistentry>

    <varlistentry>
    <term>
     <function>
      pg_get_wal_stats(start_lsn pg_lsn, end_lsn pg_lsn, per_record boolean DEFAULT false)
      returns setof record
     </function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=c1485bcd2efb06d3b22f44cbd1efd195 sig_cn_org=752fa13f1cd6d24bca1beb51780f7f61 source=15.7 
     <para>
      Gets statistics of all the valid WAL records between
      <replaceable>start_lsn</replaceable> and
      <replaceable>end_lsn</replaceable>. By default, it returns one row per
      <replaceable>resource_manager</replaceable> type. When
      <replaceable>per_record</replaceable> is set to <literal>true</literal>,
      it returns one row per <replaceable>record_type</replaceable>.
      If <replaceable>start_lsn</replaceable>
      or <replaceable>end_lsn</replaceable> are not yet available, the
      function will raise an error. For example:
<screen>
postgres=# SELECT * FROM pg_get_wal_stats('0/1E847D00', '0/1E84F500')
           WHERE count > 0 AND
                 "resource_manager/record_type" = 'Transaction'
           LIMIT 1;
-[ RECORD 1 ]-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
resource_manager/record_type | Transaction
count                        | 2
count_percentage             | 8
record_size                  | 875
record_size_percentage       | 41.23468426013195
fpi_size                     | 0
fpi_size_percentage          | 0
combined_size                | 875
combined_size_percentage     | 2.8634072910530795
</screen>
     </para>
________________________________________________________-->
     <para>
      获取<replaceable>start_lsn</replaceable>和<replaceable>end_lsn</replaceable>之间所有有效WAL记录的统计信息。
	  默认情况下，每个<replaceable>resource_manager</replaceable>类型返回一行。
	  当<replaceable>per_record</replaceable>设置为<literal>true</literal>时，每个<replaceable>record_type</replaceable>返回一行。
	  如果<replaceable>start_lsn</replaceable>或<replaceable>end_lsn</replaceable>尚不可用，函数将引发错误。例如:
<screen>
postgres=# SELECT * FROM pg_get_wal_stats('0/1E847D00', '0/1E84F500')
           WHERE count > 0 AND
                 "resource_manager/record_type" = 'Transaction'
           LIMIT 1;
-[ RECORD 1 ]----------------+-------------------
resource_manager/record_type | Transaction
count                        | 2
count_percentage             | 8
record_size                  | 875
record_size_percentage       | 41.23468426013195
fpi_size                     | 0
fpi_size_percentage          | 0
combined_size                | 875
combined_size_percentage     | 2.8634072910530795
</screen>
     </para>
<!-- pgdoc-cn_end sig_en=c1485bcd2efb06d3b22f44cbd1efd195 -->
    </listitem>
   </varlistentry>

    <varlistentry>
    <term>
     <function>
      pg_get_wal_stats_till_end_of_wal(start_lsn pg_lsn, per_record boolean DEFAULT false)
      returns setof record
     </function>
    </term>

    <listitem>
<!-- pgdoc-cn_start sig_en=e2b9650071db8f7e84930e2bd7f8e805 sig_cn_org=d81934993106e359be2a0b06979d40a2 source=15.7 
     <para>
      This function is the same as <function>pg_get_wal_stats()</function>,
      except that it gets statistics of all the valid WAL records from
      <replaceable>start_lsn</replaceable> till end of WAL.
     </para>
________________________________________________________-->
     <para>
      这个函数与<function>pg_get_wal_stats()</function>相同，只是它获取从<replaceable>start_lsn</replaceable>到WAL结尾的所有有效WAL记录的统计信息。
     </para>
<!-- pgdoc-cn_end sig_en=e2b9650071db8f7e84930e2bd7f8e805 -->
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc sig_cn_org=None source=14.1 
  <title>Author</title>
________________________________________________________-->
  <title>作者</title>
<!-- pgdoc-cn_end sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc -->

<!-- pgdoc-cn_start sig_en=df13c516d8e7eefad720f8f5c21a1695 sig_cn_org=7a884778f5b66753b413c0af142639ce source=15.7 
  <para>
   Bharath Rupireddy <email>bharath.rupireddyforpostgres@gmail.com</email>
  </para>
________________________________________________________-->
  <para>
   Bharath Rupireddy <email>bharath.rupireddyforpostgres@gmail.com</email>
  </para>
<!-- pgdoc-cn_end sig_en=df13c516d8e7eefad720f8f5c21a1695 -->
 </sect2>

</sect1>
