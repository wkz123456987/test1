<!-- doc/src/sgml/pgprewarm.sgml -->

<sect1 id="pgprewarm" xreflabel="pg_prewarm">
<!-- pgdoc-cn_start sig_en=66b7088f8b8d08cc8ae4d2157f31e60b sig_cn_org=None source=14.1 
 <title>pg_prewarm</title>
________________________________________________________-->
 <title>pg_prewarm</title>
<!-- pgdoc-cn_end sig_en=66b7088f8b8d08cc8ae4d2157f31e60b -->

<!-- pgdoc-cn_start sig_en=c32d9157de234e97297950551762033e sig_cn_org=None source=14.1 
 <indexterm zone="pgprewarm">
  <primary>pg_prewarm</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="pgprewarm">
  <primary>pg_prewarm</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=c32d9157de234e97297950551762033e -->

<!-- pgdoc-cn_start sig_en=9a094bdd3a8c0b07be7a84e8425ef82e sig_cn_org=None source=14.1 
 <para>
  The <filename>pg_prewarm</filename> module provides a convenient way
  to load relation data into either the operating system buffer cache
  or the <productname>PostgreSQL</productname> buffer cache.  Prewarming
  can be performed manually using the <filename>pg_prewarm</filename> function,
  or can be performed automatically by including <literal>pg_prewarm</literal> in
  <xref linkend="guc-shared-preload-libraries"/>.  In the latter case, the
  system will run a background worker which periodically records the contents
  of shared buffers in a file called <filename>autoprewarm.blocks</filename> and
  will, using 2 background workers, reload those same blocks after a restart.
 </para>
________________________________________________________-->
 <para>
  <filename>pg_prewarm</filename>模块提供一种方便的方法把关系
  数据载入到操作系统缓冲区或者
  <productname>PostgreSQL</productname>缓冲区。可以使用<filename>pg_prewarm</filename>函数手工执行预热，或者通过在<xref linkend="guc-shared-preload-libraries"/>中包括<literal>pg_prewarm</literal>来自动执行预热。在后一种情况中，系统将运行一个后台工作者，它会周期性地把共享内存中的内容记录在一个名为<filename>autoprewarm.blocks</filename>的文件中，并且在重新启动后用两个后台工作者重新载入那些块。
 </para>
<!-- pgdoc-cn_end sig_en=9a094bdd3a8c0b07be7a84e8425ef82e -->

 <sect2>
<!-- pgdoc-cn_start sig_en=a75e46b58752dd4a3c18092d0816bc01 sig_cn_org=None source=14.1 
  <title>Functions</title>
________________________________________________________-->
  <title>函数</title>
<!-- pgdoc-cn_end sig_en=a75e46b58752dd4a3c18092d0816bc01 -->

<!-- pgdoc-cn_start sig_en=240c8244b1ce9839af655ea25ae9045a sig_cn_org=None source=14.1 
<synopsis>
pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
           first_block int8 default null,
           last_block int8 default null) RETURNS int8
</synopsis>
________________________________________________________-->
<synopsis>
pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
           first_block int8 default null,
           last_block int8 default null) RETURNS int8
</synopsis>
<!-- pgdoc-cn_end sig_en=240c8244b1ce9839af655ea25ae9045a -->

<!-- pgdoc-cn_start sig_en=755e76e8b637975592f3231ca174d976 sig_cn_org=None source=14.1 
  <para>
   The first argument is the relation to be prewarmed.  The second argument
   is the prewarming method to be used, as further discussed below; the third
   is the relation fork to be prewarmed, usually <literal>main</literal>.
   The fourth argument is the first block number to prewarm
   (<literal>NULL</literal> is accepted as a synonym for zero).  The fifth
   argument is the last block number to prewarm (<literal>NULL</literal>
   means prewarm through the last block in the relation).  The return value
   is the number of blocks prewarmed.
  </para>
________________________________________________________-->
  <para>
   第一个参数是要预热的关系。第二个参数是要使用的预热方法，下文将会
   进一步讨论。第三个参数是要被预热的关系分叉，通常是<literal>main</literal>。
   第四个参数是要预热的第一个块号（<literal>NULL</literal>也被接受，它等同于
   零）。第五个参数是要预热的最后一个块号（<literal>NULL</literal>表示一直
   预热到关系的最后一个块）。返回值是被预热的块数。
  </para>
<!-- pgdoc-cn_end sig_en=755e76e8b637975592f3231ca174d976 -->

<!-- pgdoc-cn_start sig_en=c5f223746c066d849d69805579c7a25f sig_cn_org=None source=14.1 
  <para>
   There are three available prewarming methods.  <literal>prefetch</literal>
   issues asynchronous prefetch requests to the operating system, if this is
   supported, or throws an error otherwise.  <literal>read</literal> reads
   the requested range of blocks; unlike <literal>prefetch</literal>, this is
   synchronous and supported on all platforms and builds, but may be slower.
   <literal>buffer</literal> reads the requested range of blocks into the
   database buffer cache.
  </para>
________________________________________________________-->
  <para>
   有三种可用的预热方法。<literal>prefetch</literal>会向操作系统发出异步
   预取请求（如果支持异步预取），不支持异步预取则抛出一个错误。
   <literal>read</literal>会读取要求范围的块。与<literal>prefetch</literal>
   不同，它是同步的并且在所有平台上都被支持，但是可能较慢。
   <literal>buffer</literal>会把要求范围的块读入道数据库的缓冲区。
  </para>
<!-- pgdoc-cn_end sig_en=c5f223746c066d849d69805579c7a25f -->

<!-- pgdoc-cn_start sig_en=5ce5f3deb88a8fe4605b3d805a623d9a sig_cn_org=None source=14.1 
  <para>
   Note that with any of these methods, attempting to prewarm more blocks than
   can be cached &mdash; by the OS when using <literal>prefetch</literal> or
   <literal>read</literal>, or by <productname>PostgreSQL</productname> when
   using <literal>buffer</literal> &mdash; will likely result in lower-numbered
   blocks being evicted as higher numbered blocks are read in.  Prewarmed data
   also enjoys no special protection from cache evictions, so it is possible
   that other system activity may evict the newly prewarmed blocks shortly
   after they are read; conversely, prewarming may also evict other data from
   cache. For these reasons, prewarming is typically most useful at startup,
   when caches are largely empty.
  </para>
________________________________________________________-->
  <para>
   注意使用任意一种方法尝试预热比能缓存的数量更多的块 &mdash; 使用
   <literal>prefetch</literal>或者<literal>read</literal>（由 OS）或者使用
   <literal>buffer</literal>（由<productname>PostgreSQL</productname>
   ） &mdash; 将很可能导致高编号块被读入时把低编号的块从缓冲区中逐出的情况。
   被预热的数据也不享受对缓冲区替换的特别保护，因此其他系统活动可能会在刚刚
   被预热的块被读入后很快就将它们逐出。反过来，预热也可能把其他数据逐出缓存。
   由于这些原因，预热通常在启动时最有用，那时缓冲大部分都为空。
  </para>
<!-- pgdoc-cn_end sig_en=5ce5f3deb88a8fe4605b3d805a623d9a -->

<!-- pgdoc-cn_start sig_en=0121063010cfc7409db6f57978e0eadb sig_cn_org=None source=14.1 
<synopsis>
autoprewarm_start_worker() RETURNS void
</synopsis>
________________________________________________________-->
<synopsis>
autoprewarm_start_worker() RETURNS void
</synopsis>
<!-- pgdoc-cn_end sig_en=0121063010cfc7409db6f57978e0eadb -->

<!-- pgdoc-cn_start sig_en=29041a7cd8eb1297f5074190e4fb54de sig_cn_org=None source=14.1 
  <para>
   Launch the main autoprewarm worker.  This will normally happen
   automatically, but is useful if automatic prewarm was not configured at
   server startup time and you wish to start up the worker at a later time.
  </para>
________________________________________________________-->
  <para>
   启动主要的autoprewarm工作者。这通常将会自动发生，但是如果没有在服务器启动时配置自动预热并且用户希望在稍晚的时候启动该工作者，这个函数就能发挥作用。
  </para>
<!-- pgdoc-cn_end sig_en=29041a7cd8eb1297f5074190e4fb54de -->

<!-- pgdoc-cn_start sig_en=3a3c4531b8aa000b6ad02347a3f77943 sig_cn_org=None source=14.1 
<synopsis>
autoprewarm_dump_now() RETURNS int8
</synopsis>
________________________________________________________-->
<synopsis>
autoprewarm_dump_now() RETURNS int8
</synopsis>
<!-- pgdoc-cn_end sig_en=3a3c4531b8aa000b6ad02347a3f77943 -->

<!-- pgdoc-cn_start sig_en=6c03ed1eb241c865771ad6c3c336e50a sig_cn_org=None source=14.1 
  <para>
   Update <filename>autoprewarm.blocks</filename> immediately.  This may be useful
   if the autoprewarm worker is not running but you anticipate running it
   after the next restart.  The return value is the number of records written
   to <filename>autoprewarm.blocks</filename>.
  </para>
________________________________________________________-->
  <para>
   立即更新<filename>autoprewarm.blocks</filename>。如果autoprewarm工作者没有运行但用户希望它在下一次重启后运行，则这个函数会很有用。返回值是写入到<filename>autoprewarm.blocks</filename>中的记录数。
  </para>
<!-- pgdoc-cn_end sig_en=6c03ed1eb241c865771ad6c3c336e50a -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=9125daac1844cde69a678e3c3c9c9bcf sig_cn_org=None source=14.1 
  <title>Configuration Parameters</title>
________________________________________________________-->
  <title>配置参数</title>
<!-- pgdoc-cn_end sig_en=9125daac1844cde69a678e3c3c9c9bcf -->

 <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=02ee9b037a2478471d48a387f8e92f49 sig_cn_org=None source=14.1 
    <term>
     <varname>pg_prewarm.autoprewarm</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm</varname> configuration parameter</primary>
     </indexterm>
    </term>
________________________________________________________-->
    <term>
     <varname>pg_prewarm.autoprewarm</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm</varname>配置参数</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=02ee9b037a2478471d48a387f8e92f49 -->
    <listitem>
<!-- pgdoc-cn_start sig_en=c66e195641b701ca52657ccc7a128931 sig_cn_org=None source=14.1 
     <para>
      Controls whether the server should run the autoprewarm worker. This is
      on by default. This parameter can only be set at server start.
     </para>
________________________________________________________-->
     <para>
      控制服务器是否应该运行autoprewarm工作者。默认这个参数为on。这个参数只能在服务器启动时设置。
     </para>
<!-- pgdoc-cn_end sig_en=c66e195641b701ca52657ccc7a128931 -->
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
<!-- pgdoc-cn_start sig_en=fb42d21f2d09f3bf8af31ff0f972c24d sig_cn_org=ddbdfe264836fe49d816a696a3ce2edb source=15.7 
   <term>
     <varname>pg_prewarm.autoprewarm_interval</varname> (<type>integer</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm_interval</varname> configuration parameter</primary>
     </indexterm>
    </term>
________________________________________________________-->
   <term>
     <varname>pg_prewarm.autoprewarm_interval</varname> (<type>integer</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm_interval</varname> 配置参数</primary>
     </indexterm>
    </term>
<!-- pgdoc-cn_end sig_en=fb42d21f2d09f3bf8af31ff0f972c24d -->
    <listitem>
<!-- pgdoc-cn_start sig_en=d30b9859bc53e00522f71395919aa9ec sig_cn_org=None source=14.1 
     <para>
      This is the interval between updates to <literal>autoprewarm.blocks</literal>.
      The default is 300 seconds. If set to 0, the file will not be
      dumped at regular intervals, but only when the server is shut down.
     </para>
________________________________________________________-->
     <para>
      这是更新<literal>autoprewarm.blocks</literal>的间隔。默认是300秒。如果被设置为0，该文件将不会以常规的间隔方式转储，而是只在服务器关闭时转储。
     </para>
<!-- pgdoc-cn_end sig_en=d30b9859bc53e00522f71395919aa9ec -->
    </listitem>
   </varlistentry>
  </variablelist>
<!-- pgdoc-cn_start sig_en=6df71336949fbc752cd5e81123b52ba5 sig_cn_org=f507c2eb98fe56b0d852253052d252e9 source=15.7 
  <para>
   These parameters must be set in <filename>postgresql.conf</filename>.
   Typical usage might be:
  </para>
________________________________________________________-->
  <para>
   这些参数必须在<filename>postgresql.conf</filename>中设置。
   典型用法可能是:
</para>
<!-- pgdoc-cn_end sig_en=6df71336949fbc752cd5e81123b52ba5 -->

<!-- pgdoc-cn_start sig_en=0bf268e31795b1bf4fbaa488e9cb2195 sig_cn_org=0bf268e31795b1bf4fbaa488e9cb2195 source=15.7 
<programlisting>
# postgresql.conf
shared_preload_libraries = 'pg_prewarm'

pg_prewarm.autoprewarm = true
pg_prewarm.autoprewarm_interval = 300s

</programlisting>
________________________________________________________-->
<programlisting>
# postgresql.conf
shared_preload_libraries = 'pg_prewarm'

pg_prewarm.autoprewarm = true
pg_prewarm.autoprewarm_interval = 300s

</programlisting>
<!-- pgdoc-cn_end sig_en=0bf268e31795b1bf4fbaa488e9cb2195 -->

 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc sig_cn_org=None source=14.1 
  <title>Author</title>
________________________________________________________-->
  <title>作者</title>
<!-- pgdoc-cn_end sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc -->

<!-- pgdoc-cn_start sig_en=4ee294b270614df2e3dc7112a9e81ba3 sig_cn_org=None source=14.1 
  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
________________________________________________________-->
  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
<!-- pgdoc-cn_end sig_en=4ee294b270614df2e3dc7112a9e81ba3 -->
 </sect2>

</sect1>
