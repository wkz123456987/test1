<!-- doc/src/sgml/pgcrypto.sgml -->

<sect1 id="pgcrypto" xreflabel="pgcrypto">
<!-- pgdoc-cn_start sig_en=0fda81bdadcfb87c794ef606b7768969 sig_cn_org=None source=14.1 
 <title>pgcrypto</title>
________________________________________________________-->
 <title>pgcrypto</title>
<!-- pgdoc-cn_end sig_en=0fda81bdadcfb87c794ef606b7768969 -->

<!-- pgdoc-cn_start sig_en=6fbb67c1a439814f54b244be289be38a sig_cn_org=None source=14.1 
 <indexterm zone="pgcrypto">
  <primary>pgcrypto</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="pgcrypto">
  <primary>pgcrypto</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=6fbb67c1a439814f54b244be289be38a -->

<!-- pgdoc-cn_start sig_en=b5f2f5eb87d4dd8a150ff2f17aeaa18e sig_cn_org=None source=14.1 
 <indexterm zone="pgcrypto">
  <primary>encryption</primary>
  <secondary>for specific columns</secondary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="pgcrypto">
  <primary>encryption</primary>
  <secondary>for specific columns</secondary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=b5f2f5eb87d4dd8a150ff2f17aeaa18e -->

<!-- pgdoc-cn_start sig_en=f93e91bb99128d95df52dca8604da7b3 sig_cn_org=None source=14.1 
 <para>
  The <filename>pgcrypto</filename> module provides cryptographic functions for
  <productname>PostgreSQL</productname>.
 </para>
________________________________________________________-->
 <para>
  <filename>pgcrypto</filename>模块为<productname>PostgreSQL</productname>提供了密码函数。
 </para>
<!-- pgdoc-cn_end sig_en=f93e91bb99128d95df52dca8604da7b3 -->

<!-- pgdoc-cn_start sig_en=73fd7076637bb21a0cce44734412cba6 sig_cn_org=None source=14.1 
 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>
________________________________________________________-->
 <para>
  该模块被认为是<quote>trusted</quote>，也就是说，它可以由对当前数据库具有<literal>CREATE</literal>权限的非超级用户安装。
 </para>
<!-- pgdoc-cn_end sig_en=73fd7076637bb21a0cce44734412cba6 -->

<!-- pgdoc-cn_start sig_en=8ad20423a33f793fcbca62da29c4fd8e sig_cn_org=b17606fb3f2549ad7f3afd560f3941d1 source=15.7 
 <para>
  <filename>pgcrypto</filename> requires OpenSSL and won't be installed if
  OpenSSL support was not selected when PostgreSQL was built.
 </para>
________________________________________________________-->
 <para>
  <filename>pgcrypto</filename>需要OpenSSL，如果在构建PostgreSQL时没有选择OpenSSL支持，则不会安装。
 </para>
<!-- pgdoc-cn_end sig_en=8ad20423a33f793fcbca62da29c4fd8e -->

 <sect2>
<!-- pgdoc-cn_start sig_en=e316dd34772674076108b9af3a6e8357 sig_cn_org=None source=14.1 
  <title>General Hashing Functions</title>
________________________________________________________-->
  <title>普通哈希函数</title>
<!-- pgdoc-cn_end sig_en=e316dd34772674076108b9af3a6e8357 -->

  <sect3>
   <title><function>digest()</function></title>

<!-- pgdoc-cn_start sig_en=f52de15a09246131eb1b70eeb25c0983 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>digest</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>digest</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=f52de15a09246131eb1b70eeb25c0983 -->

<!-- pgdoc-cn_start sig_en=e17fea8118addf1f74316df0d08bb639 sig_cn_org=None source=14.1 
<synopsis>
digest(data text, type text) returns bytea
digest(data bytea, type text) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
digest(data text, type text) returns bytea
digest(data bytea, type text) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=e17fea8118addf1f74316df0d08bb639 -->

<!-- pgdoc-cn_start sig_en=67ff14b899fdcc18d7aa1e1104b27125 sig_cn_org=5fcf335ddcac65409776d7783d819ea3 source=15.7 
   <para>
    Computes a binary hash of the given <parameter>data</parameter>.
    <parameter>type</parameter> is the algorithm to use.
    Standard algorithms are <literal>md5</literal>, <literal>sha1</literal>,
    <literal>sha224</literal>, <literal>sha256</literal>,
    <literal>sha384</literal> and <literal>sha512</literal>.
    Moreover, any digest algorithm <productname>OpenSSL</productname> supports
    is automatically picked up.
   </para>
________________________________________________________-->
   <para>
    计算给定<parameter>data</parameter>的二进制哈希值。
    <parameter>type</parameter>是要使用的算法。
    标准算法包括<literal>md5</literal>、<literal>sha1</literal>、
    <literal>sha224</literal>、<literal>sha256</literal>、
    <literal>sha384</literal>和<literal>sha512</literal>。
    此外，<productname>OpenSSL</productname>支持的任何摘要算法都会自动被选中。
</para>
<!-- pgdoc-cn_end sig_en=67ff14b899fdcc18d7aa1e1104b27125 -->

<!-- pgdoc-cn_start sig_en=6b56fcb63a692fbf3b6904deaa775d3f sig_cn_org=None source=14.1 
   <para>
    If you want the digest as a hexadecimal string, use
    <function>encode()</function> on the result.  For example:
<programlisting>
CREATE OR REPLACE FUNCTION sha1(bytea) returns text AS $$
    SELECT encode(digest($1, 'sha1'), 'hex')
$$ LANGUAGE SQL STRICT IMMUTABLE;
</programlisting>
   </para>
________________________________________________________-->
   <para>
    如果你想摘要成为一个十六进制字符串，可以在结果上使用<function>encode()</function>。例如：
<programlisting>
CREATE OR REPLACE FUNCTION sha1(bytea) returns text AS $$
    SELECT encode(digest($1, 'sha1'), 'hex')
$$ LANGUAGE SQL STRICT IMMUTABLE;
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=6b56fcb63a692fbf3b6904deaa775d3f -->
  </sect3>

  <sect3>
   <title><function>hmac()</function></title>

<!-- pgdoc-cn_start sig_en=f84ef6c10d909b2c3f951b79e8c085e1 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>hmac</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>hmac</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=f84ef6c10d909b2c3f951b79e8c085e1 -->

<!-- pgdoc-cn_start sig_en=57fccf9672e868b80ec4ef6271c0f0d6 sig_cn_org=None source=14.1 
<synopsis>
hmac(data text, key text, type text) returns bytea
hmac(data bytea, key bytea, type text) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
hmac(data text, key text, type text) returns bytea
hmac(data bytea, key bytea, type text) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=57fccf9672e868b80ec4ef6271c0f0d6 -->

<!-- pgdoc-cn_start sig_en=6b77e67c116f65f1edd612f8f29d28cc sig_cn_org=None source=14.1 
   <para>
    Calculates hashed MAC for <parameter>data</parameter> with key <parameter>key</parameter>.
    <parameter>type</parameter> is the same as in <function>digest()</function>.
   </para>
________________________________________________________-->
   <para>
    为带有密钥<parameter>key</parameter>的<parameter>data</parameter>计算哈希过的 MAC。<parameter>type</parameter>与<function>digest()</function>中相同。
   </para>
<!-- pgdoc-cn_end sig_en=6b77e67c116f65f1edd612f8f29d28cc -->

<!-- pgdoc-cn_start sig_en=9ce0de7099a644dc09fc99cf1d25dc20 sig_cn_org=None source=14.1 
   <para>
    This is similar to <function>digest()</function> but the hash can only be
    recalculated knowing the key.  This prevents the scenario of someone
    altering data and also changing the hash to match.
   </para>
________________________________________________________-->
   <para>
    这与<function>digest()</function>相似，但是该哈希只能在知晓密钥的情况下被重新计算出来。这阻止了某人修改数据且还想更改哈希以匹配之的企图。
   </para>
<!-- pgdoc-cn_end sig_en=9ce0de7099a644dc09fc99cf1d25dc20 -->

<!-- pgdoc-cn_start sig_en=dc4147748a3cd74def8c1cf59ca53167 sig_cn_org=None source=14.1 
   <para>
    If the key is larger than the hash block size it will first be hashed and
    the result will be used as key.
   </para>
________________________________________________________-->
   <para>
    如果该密钥大于哈希块的尺寸，它将先被哈希然后把结果用作密钥。
   </para>
<!-- pgdoc-cn_end sig_en=dc4147748a3cd74def8c1cf59ca53167 -->
  </sect3>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=db55abad89d7ad110fb03d567e98307f sig_cn_org=None source=14.1 
  <title>Password Hashing Functions</title>
________________________________________________________-->
  <title>口令哈希函数</title>
<!-- pgdoc-cn_end sig_en=db55abad89d7ad110fb03d567e98307f -->

<!-- pgdoc-cn_start sig_en=dabd6ff7e09200ee158ace1bf2249f7e sig_cn_org=None source=14.1 
  <para>
   The functions <function>crypt()</function> and <function>gen_salt()</function>
   are specifically designed for hashing passwords.
   <function>crypt()</function> does the hashing and <function>gen_salt()</function>
   prepares algorithm parameters for it.
  </para>
________________________________________________________-->
  <para>
   函数<function>crypt()</function>和<function>gen_salt()</function>是特别设计用来做口令哈希的。<function>crypt()</function>完成哈希，而<function>gen_salt()</function>负责为前者准备算法参数。
  </para>
<!-- pgdoc-cn_end sig_en=dabd6ff7e09200ee158ace1bf2249f7e -->

<!-- pgdoc-cn_start sig_en=0452a2c621d4804d256c5e7855939b38 sig_cn_org=None source=14.1 
  <para>
   The algorithms in <function>crypt()</function> differ from the usual
   MD5 or SHA1 hashing algorithms in the following respects:
  </para>
________________________________________________________-->
  <para>
   <function>crypt()</function>中的算法在以下方面不同于通常的 MD5 或 SHA1 哈希算法：
  </para>
<!-- pgdoc-cn_end sig_en=0452a2c621d4804d256c5e7855939b38 -->

  <orderedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=48a6df64ee416e5fce905607b1b6344a sig_cn_org=None source=14.1 
    <para>
     They are slow.  As the amount of data is so small, this is the only
     way to make brute-forcing passwords hard.
    </para>
________________________________________________________-->
    <para>
     它们很慢。由于数据量很小，这是增加蛮力口令破解难度的唯一方法。
    </para>
<!-- pgdoc-cn_end sig_en=48a6df64ee416e5fce905607b1b6344a -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=5e0a85b46311c4670996fcdc6e21fc5d sig_cn_org=None source=14.1 
    <para>
     They use a random value, called the <firstterm>salt</firstterm>, so that users
     having the same password will have different encrypted passwords.
     This is also an additional defense against reversing the algorithm.
    </para>
________________________________________________________-->
    <para>
     它们使用一个随机值（称为<firstterm>salt</firstterm>），这样具有相同口令的用户将得到不同的密文口令。这也是针对逆转算法的一种额外保护。
    </para>
<!-- pgdoc-cn_end sig_en=5e0a85b46311c4670996fcdc6e21fc5d -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=0da4bd46c528e60c73d4da2460c45393 sig_cn_org=None source=14.1 
    <para>
     They include the algorithm type in the result, so passwords hashed with
     different algorithms can co-exist.
    </para>
________________________________________________________-->
    <para>
     它们会在结果中包括算法类型，这样用不同算法哈希的口令能共存。
    </para>
<!-- pgdoc-cn_end sig_en=0da4bd46c528e60c73d4da2460c45393 -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=a7aff4a969c2671dab94ff43772cd2cf sig_cn_org=None source=14.1 
    <para>
     Some of them are adaptive &mdash; that means when computers get
     faster, you can tune the algorithm to be slower, without
     introducing incompatibility with existing passwords.
    </para>
________________________________________________________-->
    <para>
     其中一些是自适应的 &mdash; 这意味着当计算机变得更快时，你可以调整该算法变得更慢，而不会产生与现有口令的不兼容。
    </para>
<!-- pgdoc-cn_end sig_en=a7aff4a969c2671dab94ff43772cd2cf -->
   </listitem>
  </orderedlist>

<!-- pgdoc-cn_start sig_en=b93e37b53df227bebea43cb33e2a5643 sig_cn_org=None source=14.1 
  <para>
   <xref linkend="pgcrypto-crypt-algorithms"/> lists the algorithms
   supported by the <function>crypt()</function> function.
  </para>
________________________________________________________-->
  <para>
   <xref linkend="pgcrypto-crypt-algorithms"/>列出了<function>crypt()</function>函数所支持的算法。
  </para>
<!-- pgdoc-cn_end sig_en=b93e37b53df227bebea43cb33e2a5643 -->

  <table id="pgcrypto-crypt-algorithms">
<!-- pgdoc-cn_start sig_en=5a769e8fd77d9c82763e02f4c907d833 sig_cn_org=None source=14.1 
   <title>Supported Algorithms for <function>crypt()</function></title>
________________________________________________________-->
   <title><function>crypt()</function>支持的算法</title>
<!-- pgdoc-cn_end sig_en=5a769e8fd77d9c82763e02f4c907d833 -->
   <tgroup cols="6">
    <thead>
<!-- pgdoc-cn_start sig_en=b582b74c29567d2cc7a7d46bdf341093 sig_cn_org=None source=14.1 
     <row>
      <entry>Algorithm</entry>
      <entry>Max Password Length</entry>
      <entry>Adaptive?</entry>
      <entry>Salt Bits</entry>
      <entry>Output Length</entry>
      <entry>Description</entry>
     </row>
________________________________________________________-->
     <row>
      <entry>算法</entry>
      <entry>最大口令长度</entry>
      <entry>自适应？</entry>
      <entry>Salt 位数</entry>
      <entry>输出长度</entry>
      <entry>描述</entry>
     </row>
<!-- pgdoc-cn_end sig_en=b582b74c29567d2cc7a7d46bdf341093 -->
    </thead>
    <tbody>
<!-- pgdoc-cn_start sig_en=3e8a55437fd14192063a2fd42488167a sig_cn_org=None source=14.1 
     <row>
      <entry><literal>bf</literal></entry>
      <entry>72</entry>
      <entry>yes</entry>
      <entry>128</entry>
      <entry>60</entry>
      <entry>Blowfish-based, variant 2a</entry>
     </row>
________________________________________________________-->
     <row>
      <entry><literal>bf</literal></entry>
      <entry>72</entry>
      <entry>yes</entry>
      <entry>128</entry>
      <entry>60</entry>
      <entry>基于 Blowfish，变体 2a</entry>
     </row>
<!-- pgdoc-cn_end sig_en=3e8a55437fd14192063a2fd42488167a -->
<!-- pgdoc-cn_start sig_en=c4f54322d351cd74db99d569579c75b2 sig_cn_org=None source=14.1 
     <row>
      <entry><literal>md5</literal></entry>
      <entry>unlimited</entry>
      <entry>no</entry>
      <entry>48</entry>
      <entry>34</entry>
      <entry>MD5-based crypt</entry>
     </row>
________________________________________________________-->
     <row>
      <entry><literal>md5</literal></entry>
      <entry>unlimited</entry>
      <entry>no</entry>
      <entry>48</entry>
      <entry>34</entry>
      <entry>基于 MD5 的加密</entry>
     </row>
<!-- pgdoc-cn_end sig_en=c4f54322d351cd74db99d569579c75b2 -->
<!-- pgdoc-cn_start sig_en=5ce6e861d08a4d62f7bedb5f95365b97 sig_cn_org=None source=14.1 
     <row>
      <entry><literal>xdes</literal></entry>
      <entry>8</entry>
      <entry>yes</entry>
      <entry>24</entry>
      <entry>20</entry>
      <entry>Extended DES</entry>
     </row>
________________________________________________________-->
     <row>
      <entry><literal>xdes</literal></entry>
      <entry>8</entry>
      <entry>yes</entry>
      <entry>24</entry>
      <entry>20</entry>
      <entry>扩展的 DES</entry>
     </row>
<!-- pgdoc-cn_end sig_en=5ce6e861d08a4d62f7bedb5f95365b97 -->
<!-- pgdoc-cn_start sig_en=2b6da8dec44d850f074413b569d0c23e sig_cn_org=None source=14.1 
     <row>
      <entry><literal>des</literal></entry>
      <entry>8</entry>
      <entry>no</entry>
      <entry>12</entry>
      <entry>13</entry>
      <entry>Original UNIX crypt</entry>
     </row>
________________________________________________________-->
     <row>
      <entry><literal>des</literal></entry>
      <entry>8</entry>
      <entry>no</entry>
      <entry>12</entry>
      <entry>13</entry>
      <entry>原生 UNIX 加密</entry>
     </row>
<!-- pgdoc-cn_end sig_en=2b6da8dec44d850f074413b569d0c23e -->
    </tbody>
   </tgroup>
  </table>

  <sect3>
   <title><function>crypt()</function></title>

<!-- pgdoc-cn_start sig_en=6a411e0f32f651ecc1adb15195ec3b64 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>crypt</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>crypt</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=6a411e0f32f651ecc1adb15195ec3b64 -->

<!-- pgdoc-cn_start sig_en=9bf4b43c4202fc76c94d96922cdcfce7 sig_cn_org=None source=14.1 
<synopsis>
crypt(password text, salt text) returns text
</synopsis>
________________________________________________________-->
<synopsis>
crypt(password text, salt text) 返回 text
</synopsis>
<!-- pgdoc-cn_end sig_en=9bf4b43c4202fc76c94d96922cdcfce7 -->

<!-- pgdoc-cn_start sig_en=c0457feae3385e580edc4f92892bc506 sig_cn_org=None source=14.1 
   <para>
    Calculates a crypt(3)-style hash of <parameter>password</parameter>.
    When storing a new password, you need to use
    <function>gen_salt()</function> to generate a new <parameter>salt</parameter> value.
    To check a password, pass the stored hash value as <parameter>salt</parameter>,
    and test whether the result matches the stored value.
   </para>
________________________________________________________-->
   <para>
    计算<parameter>password</parameter>的一个 crypt(3) 风格的哈希。在存储一个新口令时，你需要使用<function>gen_salt()</function>产生一个新的<parameter>salt</parameter>值。要检查一个口令，把存储的哈希值作为<parameter>salt</parameter>，并且测试结果是否匹配存储的值。
   </para>
<!-- pgdoc-cn_end sig_en=c0457feae3385e580edc4f92892bc506 -->
<!-- pgdoc-cn_start sig_en=e18d91d2f69929ac4eb2be56aa3ba1e4 sig_cn_org=None source=14.1 
   <para>
    Example of setting a new password:
<programlisting>
UPDATE ... SET pswhash = crypt('new password', gen_salt('md5'));
</programlisting>
   </para>
________________________________________________________-->
   <para>
    设置一个新口令的例子：
<programlisting>
UPDATE ... SET pswhash = crypt('new password', gen_salt('md5'));
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=e18d91d2f69929ac4eb2be56aa3ba1e4 -->
<!-- pgdoc-cn_start sig_en=d841afe8bb9e07e978365379af73c5d7 sig_cn_org=None source=14.1 
   <para>
    Example of authentication:
<programlisting>
SELECT (pswhash = crypt('entered password', pswhash)) AS pswmatch FROM ... ;
</programlisting>
    This returns <literal>true</literal> if the entered password is correct.
   </para>
________________________________________________________-->
   <para>
    认证的例子：
<programlisting>
SELECT (pswhash = crypt('entered password', pswhash)) AS pswmatch FROM ... ;
</programlisting>
    如果输入的口令正确，这会返回<literal>true</literal>。
   </para>
<!-- pgdoc-cn_end sig_en=d841afe8bb9e07e978365379af73c5d7 -->
  </sect3>

  <sect3>
   <title><function>gen_salt()</function></title>

<!-- pgdoc-cn_start sig_en=fd841205682f2f090e0317f773633490 sig_cn_org=None source=14.1 
  <indexterm>
   <primary>gen_salt</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>gen_salt</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=fd841205682f2f090e0317f773633490 -->

<!-- pgdoc-cn_start sig_en=2388a5ffba567ce8e59b5feef49cebe5 sig_cn_org=None source=14.1 
<synopsis>
gen_salt(type text [, iter_count integer ]) returns text
</synopsis>
________________________________________________________-->
<synopsis>
gen_salt(type text [, iter_count integer ]) 返回 text
</synopsis>
<!-- pgdoc-cn_end sig_en=2388a5ffba567ce8e59b5feef49cebe5 -->

<!-- pgdoc-cn_start sig_en=2d6876b2645ce379bc3f2dc3c1762db5 sig_cn_org=None source=14.1 
   <para>
    Generates a new random salt string for use in <function>crypt()</function>.
    The salt string also tells <function>crypt()</function> which algorithm to use.
   </para>
________________________________________________________-->
   <para>
    产生一个在<function>crypt()</function>中使用的新随机 salt 字符串。该 salt 字符串也告诉了<function>crypt()</function>要使用哪种算法。
   </para>
<!-- pgdoc-cn_end sig_en=2d6876b2645ce379bc3f2dc3c1762db5 -->

<!-- pgdoc-cn_start sig_en=817a7524eb07813957213719e2429093 sig_cn_org=None source=14.1 
   <para>
    The <parameter>type</parameter> parameter specifies the hashing algorithm.
    The accepted types are: <literal>des</literal>, <literal>xdes</literal>,
    <literal>md5</literal> and <literal>bf</literal>.
   </para>
________________________________________________________-->
   <para>
    <parameter>type</parameter>参数指定哈希算法。可接受的类型是：<literal>des</literal>、<literal>xdes</literal>、<literal>md5</literal>以及<literal>bf</literal>。
   </para>
<!-- pgdoc-cn_end sig_en=817a7524eb07813957213719e2429093 -->

<!-- pgdoc-cn_start sig_en=5dcd78418d24c2904d389d7eb6c1755e sig_cn_org=None source=14.1 
   <para>
    The <parameter>iter_count</parameter> parameter lets the user specify the iteration
    count, for algorithms that have one.
    The higher the count, the more time it takes to hash
    the password and therefore the more time to break it.  Although with
    too high a count the time to calculate a hash may be several years
    &mdash; which is somewhat impractical.  If the <parameter>iter_count</parameter>
    parameter is omitted, the default iteration count is used.
    Allowed values for <parameter>iter_count</parameter> depend on the algorithm and
    are shown in <xref linkend="pgcrypto-icfc-table"/>.
   </para>
________________________________________________________-->
   <para>
    <parameter>iter_count</parameter>参数让用户可以为使用迭代计数的算法指定迭代计数。计数越高，哈希口令花的时间更长并且因而需要更多时间去攻破它。不过使用太高的计数会导致计算一个哈希的时间高达数年 &mdash; 这并不使用。如果<parameter>iter_count</parameter>参数被忽略，将使用默认的迭代计数。允许的<parameter>iter_count</parameter>值与算法相关，如<xref linkend="pgcrypto-icfc-table"/>所示。
   </para>
<!-- pgdoc-cn_end sig_en=5dcd78418d24c2904d389d7eb6c1755e -->

   <table id="pgcrypto-icfc-table">
<!-- pgdoc-cn_start sig_en=1ee43799ce9c426c7c04e5e0767bae2f sig_cn_org=None source=14.1 
    <title>Iteration Counts for <function>crypt()</function></title>
________________________________________________________-->
    <title><function>crypt()</function>的迭代计数</title>
<!-- pgdoc-cn_end sig_en=1ee43799ce9c426c7c04e5e0767bae2f -->
    <tgroup cols="4">
     <thead>
<!-- pgdoc-cn_start sig_en=cf61effc1dddcaee9889a6b54b6d4c80 sig_cn_org=None source=14.1 
      <row>
       <entry>Algorithm</entry>
       <entry>Default</entry>
       <entry>Min</entry>
       <entry>Max</entry>
      </row>
________________________________________________________-->
      <row>
       <entry>算法</entry>
       <entry>默认值</entry>
       <entry>最小值</entry>
       <entry>最大值</entry>
      </row>
<!-- pgdoc-cn_end sig_en=cf61effc1dddcaee9889a6b54b6d4c80 -->
     </thead>
     <tbody>
<!-- pgdoc-cn_start sig_en=a7681d20266a120a0f98d5d95da6c04a sig_cn_org=None source=14.1 
      <row>
       <entry><literal>xdes</literal></entry>
       <entry>725</entry>
       <entry>1</entry>
       <entry>16777215</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>xdes</literal></entry>
       <entry>725</entry>
       <entry>1</entry>
       <entry>16777215</entry>
      </row>
<!-- pgdoc-cn_end sig_en=a7681d20266a120a0f98d5d95da6c04a -->
<!-- pgdoc-cn_start sig_en=d020393327b8c03313c4d4df91f9c2de sig_cn_org=None source=14.1 
      <row>
       <entry><literal>bf</literal></entry>
       <entry>6</entry>
       <entry>4</entry>
       <entry>31</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>bf</literal></entry>
       <entry>6</entry>
       <entry>4</entry>
       <entry>31</entry>
      </row>
<!-- pgdoc-cn_end sig_en=d020393327b8c03313c4d4df91f9c2de -->
     </tbody>
    </tgroup>
   </table>

<!-- pgdoc-cn_start sig_en=4708a8ab3a33969b8169e81c34e89609 sig_cn_org=None source=14.1 
   <para>
    For <literal>xdes</literal> there is an additional limitation that the
    iteration count must be an odd number.
   </para>
________________________________________________________-->
   <para>
    对<literal>xdes</literal>算法还有额外的限制：迭代计数必须是一个奇数。
   </para>
<!-- pgdoc-cn_end sig_en=4708a8ab3a33969b8169e81c34e89609 -->

<!-- pgdoc-cn_start sig_en=e51b05b846c2b851a28e0cbb51d5babd sig_cn_org=None source=14.1 
   <para>
    To pick an appropriate iteration count, consider that
    the original DES crypt was designed to have the speed of 4 hashes per
    second on the hardware of that time.
    Slower than 4 hashes per second would probably dampen usability.
    Faster than 100 hashes per second is probably too fast.
   </para>
________________________________________________________-->
   <para>
    要选取一个合适的迭代计数，考虑最初的 DES 加密被设计成在当时的硬件上每秒钟完成 4 次哈希。低于每秒 4 次哈希的速度很可能会损害可用性。而超过每秒 100 次哈希又可能太快了。
   </para>
<!-- pgdoc-cn_end sig_en=e51b05b846c2b851a28e0cbb51d5babd -->

<!-- pgdoc-cn_start sig_en=46e85bcff0880f78c0cff9d98d99f7e7 sig_cn_org=None source=14.1 
   <para>
    <xref linkend="pgcrypto-hash-speed-table"/> gives an overview of the relative slowness
    of different hashing algorithms.
    The table shows how much time it would take to try all
    combinations of characters in an 8-character password, assuming
    that the password contains either only lower case letters, or
    upper- and lower-case letters and numbers.
    In the <literal>crypt-bf</literal> entries, the number after a slash is
    the <parameter>iter_count</parameter> parameter of
    <function>gen_salt</function>.
   </para>
________________________________________________________-->
   <para>
    <xref linkend="pgcrypto-hash-speed-table"/>给出了不同哈希算法的相对慢度的综述。该表展示了在假设口令只含有小写字母或者大小写字母及数字的情况下，在一个 8 字符口令中尝试所有字符组合所需要的时间。在<literal>crypt-bf</literal>项中，在一个斜线之后的数字是<function>gen_salt</function>的<parameter>iter_count</parameter>参数
   </para>
<!-- pgdoc-cn_end sig_en=46e85bcff0880f78c0cff9d98d99f7e7 -->

   <table id="pgcrypto-hash-speed-table">
<!-- pgdoc-cn_start sig_en=cebfda136722850beb911271985b9240 sig_cn_org=None source=14.1 
    <title>Hash Algorithm Speeds</title>
________________________________________________________-->
    <title>哈希算法速度</title>
<!-- pgdoc-cn_end sig_en=cebfda136722850beb911271985b9240 -->
    <tgroup cols="5">
     <thead>
<!-- pgdoc-cn_start sig_en=62dfc860b71655bbf089f7ab226f5e8d sig_cn_org=None source=14.1 
      <row>
       <entry>Algorithm</entry>
       <entry>Hashes/sec</entry>
       <entry>For <literal>[a-z]</literal></entry>
       <entry>For <literal>[A-Za-z0-9]</literal></entry>
       <entry>Duration relative to <literal>md5 hash</literal></entry>
      </row>
________________________________________________________-->
      <row>
       <entry>算法</entry>
       <entry>次哈希/秒</entry>
       <entry>对于<literal>[a-z]</literal></entry>
       <entry>对于<literal>[A-Za-z0-9]</literal></entry>
       <entry>相对于<literal>md5 hash</literal>的持续时间</entry>
      </row>
<!-- pgdoc-cn_end sig_en=62dfc860b71655bbf089f7ab226f5e8d -->
     </thead>
     <tbody>
<!-- pgdoc-cn_start sig_en=896c3b306a4c0ea9822eca078ec7bca4 sig_cn_org=None source=14.1 
      <row>
       <entry><literal>crypt-bf/8</literal></entry>
       <entry>1792</entry>
       <entry>4 years</entry>
       <entry>3927 years</entry>
       <entry>100k</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>crypt-bf/8</literal></entry>
       <entry>1792</entry>
       <entry>4 年</entry>
       <entry>3927 年</entry>
       <entry>100k</entry>
      </row>
<!-- pgdoc-cn_end sig_en=896c3b306a4c0ea9822eca078ec7bca4 -->
<!-- pgdoc-cn_start sig_en=b46bec93d8616732a6d84bf7d9b2f4bf sig_cn_org=None source=14.1 
      <row>
       <entry><literal>crypt-bf/7</literal></entry>
       <entry>3648</entry>
       <entry>2 years</entry>
       <entry>1929 years</entry>
       <entry>50k</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>crypt-bf/7</literal></entry>
       <entry>3648</entry>
       <entry>2 年</entry>
       <entry>1929 年</entry>
       <entry>50k</entry>
      </row>
<!-- pgdoc-cn_end sig_en=b46bec93d8616732a6d84bf7d9b2f4bf -->
<!-- pgdoc-cn_start sig_en=eaab777d29adb88a45550bb53ba6c499 sig_cn_org=None source=14.1 
      <row>
       <entry><literal>crypt-bf/6</literal></entry>
       <entry>7168</entry>
       <entry>1 year</entry>
       <entry>982 years</entry>
       <entry>25k</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>crypt-bf/6</literal></entry>
       <entry>7168</entry>
       <entry>1 年</entry>
       <entry>982 年</entry>
       <entry>25k</entry>
      </row>
<!-- pgdoc-cn_end sig_en=eaab777d29adb88a45550bb53ba6c499 -->
<!-- pgdoc-cn_start sig_en=03c69426c398ebbfc477dbd087a44d57 sig_cn_org=None source=14.1 
      <row>
       <entry><literal>crypt-bf/5</literal></entry>
       <entry>13504</entry>
       <entry>188 days</entry>
       <entry>521 years</entry>
       <entry>12.5k</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>crypt-bf/5</literal></entry>
       <entry>13504</entry>
       <entry>188 天</entry>
       <entry>521 年</entry>
       <entry>12.5k</entry>
      </row>
<!-- pgdoc-cn_end sig_en=03c69426c398ebbfc477dbd087a44d57 -->
<!-- pgdoc-cn_start sig_en=a6c49434f71d24dbabb7a29c7f92683b sig_cn_org=None source=14.1 
      <row>
       <entry><literal>crypt-md5</literal></entry>
       <entry>171584</entry>
       <entry>15 days</entry>
       <entry>41 years</entry>
       <entry>1k</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>crypt-md5</literal></entry>
       <entry>171584</entry>
       <entry>15 天</entry>
       <entry>41 年</entry>
       <entry>1k</entry>
      </row>
<!-- pgdoc-cn_end sig_en=a6c49434f71d24dbabb7a29c7f92683b -->
<!-- pgdoc-cn_start sig_en=cb1305fe1a4b3f765b6e68a79159f1d1 sig_cn_org=None source=14.1 
      <row>
       <entry><literal>crypt-des</literal></entry>
       <entry>23221568</entry>
       <entry>157.5 minutes</entry>
       <entry>108 days</entry>
       <entry>7</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>crypt-des</literal></entry>
       <entry>23221568</entry>
       <entry>157.5 分</entry>
       <entry>108 天</entry>
       <entry>7</entry>
      </row>
<!-- pgdoc-cn_end sig_en=cb1305fe1a4b3f765b6e68a79159f1d1 -->
<!-- pgdoc-cn_start sig_en=bbdc818349973a2bf848c57794973f08 sig_cn_org=None source=14.1 
      <row>
       <entry><literal>sha1</literal></entry>
       <entry>37774272</entry>
       <entry>90 minutes</entry>
       <entry>68 days</entry>
       <entry>4</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>sha1</literal></entry>
       <entry>37774272</entry>
       <entry>90 分</entry>
       <entry>68 天</entry>
       <entry>4</entry>
      </row>
<!-- pgdoc-cn_end sig_en=bbdc818349973a2bf848c57794973f08 -->
<!-- pgdoc-cn_start sig_en=0b95be293daf4a829411c23b360c8eb0 sig_cn_org=None source=14.1 
      <row>
       <entry><literal>md5</literal> (hash)</entry>
       <entry>150085504</entry>
       <entry>22.5 minutes</entry>
       <entry>17 days</entry>
       <entry>1</entry>
      </row>
________________________________________________________-->
      <row>
       <entry><literal>md5</literal>(hash)</entry>
       <entry>150085504</entry>
       <entry>22.5 分</entry>
       <entry>17 天</entry>
       <entry>1</entry>
      </row>
<!-- pgdoc-cn_end sig_en=0b95be293daf4a829411c23b360c8eb0 -->
     </tbody>
    </tgroup>
   </table>

<!-- pgdoc-cn_start sig_en=5003773569d947773788d030bfd364b3 sig_cn_org=None source=14.1 
   <para>
    Notes:
   </para>
________________________________________________________-->
   <para>
    注意：
   </para>
<!-- pgdoc-cn_end sig_en=5003773569d947773788d030bfd364b3 -->

   <itemizedlist>
    <listitem>
<!-- pgdoc-cn_start sig_en=701f12cce0b7f0fbc9979349fea21c43 sig_cn_org=None source=14.1 
     <para>
     The machine used is an Intel Mobile Core i3.
     </para>
________________________________________________________-->
     <para>
     使用的机器是一台 Intel Mobile Core i3。
     </para>
<!-- pgdoc-cn_end sig_en=701f12cce0b7f0fbc9979349fea21c43 -->
    </listitem>
    <listitem>
<!-- pgdoc-cn_start sig_en=5a0469133694898b5e4b6cd6eb9007fb sig_cn_org=None source=14.1 
     <para>
      <literal>crypt-des</literal> and <literal>crypt-md5</literal> algorithm numbers are
      taken from John the Ripper v1.6.38 <literal>-test</literal> output.
     </para>
________________________________________________________-->
     <para>
      <literal>crypt-des</literal>和<literal>crypt-md5</literal>算法的数字是取自 John the Ripper v1.6.38 <literal>-test</literal>输出。
     </para>
<!-- pgdoc-cn_end sig_en=5a0469133694898b5e4b6cd6eb9007fb -->
    </listitem>
    <listitem>
<!-- pgdoc-cn_start sig_en=ccad69ab5c4f792ce201c17759f78d90 sig_cn_org=None source=14.1 
     <para>
      <literal>md5 hash</literal> numbers are from mdcrack 1.2.
     </para>
________________________________________________________-->
     <para>
      <literal>md5 hash</literal>的数字来自于 mdcrack 1.2。
     </para>
<!-- pgdoc-cn_end sig_en=ccad69ab5c4f792ce201c17759f78d90 -->
    </listitem>
    <listitem>
<!-- pgdoc-cn_start sig_en=c93bfdcc5ee2c07dcb04b2eb87ef828f sig_cn_org=None source=14.1 
     <para>
      <literal>sha1</literal> numbers are from lcrack-20031130-beta.
     </para>
________________________________________________________-->
     <para>
      <literal>sha1</literal>的数字来自于 lcrack-20031130-beta.
     </para>
<!-- pgdoc-cn_end sig_en=c93bfdcc5ee2c07dcb04b2eb87ef828f -->
    </listitem>
    <listitem>
<!-- pgdoc-cn_start sig_en=074b829c8c48efb56abb457a83f7ab83 sig_cn_org=None source=14.1 
     <para>
      <literal>crypt-bf</literal> numbers are taken using a simple program that
      loops over 1000 8-character passwords.  That way I can show the speed
      with different numbers of iterations.  For reference: <literal>john
      -test</literal> shows 13506 loops/sec for <literal>crypt-bf/5</literal>.
      (The very small
      difference in results is in accordance with the fact that the
      <literal>crypt-bf</literal> implementation in <filename>pgcrypto</filename>
      is the same one used in John the Ripper.)
     </para>
________________________________________________________-->
     <para>
      <literal>crypt-bf</literal>的数字是采用一个在 1000 个 8 字符口令上循环的简单程序采集到的。用那种方法我能展示不同迭代次数的速度。供参考：<literal>john-test</literal>对于<literal>crypt-bf/5</literal>显示 13506 次循环/秒（结果中的微小差异符合<filename>pgcrypto</filename>中的<literal>crypt-bf</literal>实现与 John the Ripper 中的一致这一情况）。
     </para>
<!-- pgdoc-cn_end sig_en=074b829c8c48efb56abb457a83f7ab83 -->
    </listitem>
   </itemizedlist>

<!-- pgdoc-cn_start sig_en=0186e89e728554f9c44318f7095436e6 sig_cn_org=None source=14.1 
   <para>
    Note that <quote>try all combinations</quote> is not a realistic exercise.
    Usually password cracking is done with the help of dictionaries, which
    contain both regular words and various mutations of them.  So, even
    somewhat word-like passwords could be cracked much faster than the above
    numbers suggest, while a 6-character non-word-like password may escape
    cracking.  Or not.
   </para>
________________________________________________________-->
   <para>
    注意<quote>尝试所有组合</quote>并非是现实中会采用的方式。通常口令破解都是在词典的帮助下完成的，词典中会包含常用词以及它们的多种变化。因此，甚至有些像词的口令被破解的时间可能会大大小于上面建议的数字，而一个 6 字符的不像词的口令可能会逃过破解，也可能不能逃脱。
   </para>
<!-- pgdoc-cn_end sig_en=0186e89e728554f9c44318f7095436e6 -->
  </sect3>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=b06aa4d403cddd256540292525d5bec4 sig_cn_org=None source=14.1 
  <title>PGP Encryption Functions</title>
________________________________________________________-->
  <title>PGP 加密函数</title>
<!-- pgdoc-cn_end sig_en=b06aa4d403cddd256540292525d5bec4 -->

<!-- pgdoc-cn_start sig_en=806f18ed4b3ed61a0c791f5e7c7cbd70 sig_cn_org=69831d9baa84f2561771b7f6b81b1784 source=15.7 
  <para>
   The functions here implement the encryption part of the OpenPGP
   (<ulink url="https://datatracker.ietf.org/doc/html/rfc4880">RFC 4880</ulink>)
   standard.  Supported are both symmetric-key and public-key encryption.
  </para>
________________________________________________________-->
  <para>
   这里的函数实现了OpenPGP的加密部分
   (<ulink url="https://datatracker.ietf.org/doc/html/rfc4880">RFC 4880</ulink>)
   标准。支持对称密钥和公钥加密。
</para>
<!-- pgdoc-cn_end sig_en=806f18ed4b3ed61a0c791f5e7c7cbd70 -->

<!-- pgdoc-cn_start sig_en=ff0551c38372a1bbd01a685f835836bf sig_cn_org=None source=14.1 
  <para>
   An encrypted PGP message consists of 2 parts, or <firstterm>packets</firstterm>:
  </para>
________________________________________________________-->
  <para>
   一个加密的 PGP 消息由两个部分或者<firstterm>包</firstterm>组成：
  </para>
<!-- pgdoc-cn_end sig_en=ff0551c38372a1bbd01a685f835836bf -->
  <itemizedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=c1a8804e84d058bb88ef116dbf53d289 sig_cn_org=None source=14.1 
    <para>
     Packet containing a session key &mdash; either symmetric-key or public-key
     encrypted.
    </para>
________________________________________________________-->
    <para>
     包含一个会话密钥的包 &mdash; 加密过的对称密钥或者公钥。
    </para>
<!-- pgdoc-cn_end sig_en=c1a8804e84d058bb88ef116dbf53d289 -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=3296237e63c318b142cd03e80dbb3da2 sig_cn_org=None source=14.1 
    <para>
     Packet containing data encrypted with the session key.
    </para>
________________________________________________________-->
    <para>
     包含用会话密钥加密过的数据的包。
    </para>
<!-- pgdoc-cn_end sig_en=3296237e63c318b142cd03e80dbb3da2 -->
   </listitem>
  </itemizedlist>

<!-- pgdoc-cn_start sig_en=1f76bed3677d76ec610e61bf47796f8d sig_cn_org=None source=14.1 
  <para>
   When encrypting with a symmetric key (i.e., a password):
  </para>
________________________________________________________-->
  <para>
   当用一个对称密钥（即一个口令）加密时：
  </para>
<!-- pgdoc-cn_end sig_en=1f76bed3677d76ec610e61bf47796f8d -->
  <orderedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=aae8fe88e7cf7738f883a2bf6d70562b sig_cn_org=None source=14.1 
    <para>
     The given password is hashed using a String2Key (S2K) algorithm.  This is
     rather similar to <function>crypt()</function> algorithms &mdash; purposefully
     slow and with random salt &mdash; but it produces a full-length binary
     key.
    </para>
________________________________________________________-->
    <para>
     给定的口令被使用一个 String2Key (S2K) 算法哈希。这更像<function>crypt()</function>算法 &mdash; 有目的地慢并且使用随机 salt &mdash; 但是它会产生一个全长度的二进制密钥。
    </para>
<!-- pgdoc-cn_end sig_en=aae8fe88e7cf7738f883a2bf6d70562b -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=2710aca46033f99b43c96c624321d8c9 sig_cn_org=None source=14.1 
    <para>
     If a separate session key is requested, a new random key will be
     generated.  Otherwise the S2K key will be used directly as the session
     key.
    </para>
________________________________________________________-->
    <para>
     如果要求一个独立的会话密钥，将会生成一个新的随机密钥。否则该 S2K 密钥将被直接用作会话密钥。
    </para>
<!-- pgdoc-cn_end sig_en=2710aca46033f99b43c96c624321d8c9 -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=b1c63e0d0d83b749e3cf665e98c23814 sig_cn_org=None source=14.1 
    <para>
     If the S2K key is to be used directly, then only S2K settings will be put
     into the session key packet.  Otherwise the session key will be encrypted
     with the S2K key and put into the session key packet.
    </para>
________________________________________________________-->
    <para>
     如果直接使用 S2K 密钥，那么只有 S2K 设置将被放入会话密钥包中。否则会话密钥会用 S2K 密钥加密并且放入会话密钥包中。
    </para>
<!-- pgdoc-cn_end sig_en=b1c63e0d0d83b749e3cf665e98c23814 -->
   </listitem>
  </orderedlist>

<!-- pgdoc-cn_start sig_en=b648645cf3f33e08134a755af3689897 sig_cn_org=None source=14.1 
  <para>
   When encrypting with a public key:
  </para>
________________________________________________________-->
  <para>
   当使用一个公共密钥加密时：
  </para>
<!-- pgdoc-cn_end sig_en=b648645cf3f33e08134a755af3689897 -->
  <orderedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=1431cb672301f9090070afbd4adebbad sig_cn_org=None source=14.1 
    <para>
     A new random session key is generated.
    </para>
________________________________________________________-->
    <para>
     一个新的随机会话密钥会被生成。
    </para>
<!-- pgdoc-cn_end sig_en=1431cb672301f9090070afbd4adebbad -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=6a8d1758efabe79a7d0942d5d97a7870 sig_cn_org=None source=14.1 
    <para>
     It is encrypted using the public key and put into the session key packet.
    </para>
________________________________________________________-->
    <para>
     它被用公共密钥加密并且放入到会话密钥包中。
    </para>
<!-- pgdoc-cn_end sig_en=6a8d1758efabe79a7d0942d5d97a7870 -->
   </listitem>
  </orderedlist>

<!-- pgdoc-cn_start sig_en=9685ae2e7bbf2fb43fdd64cbc11b5176 sig_cn_org=None source=14.1 
  <para>
   In either case the data to be encrypted is processed as follows:
  </para>
________________________________________________________-->
  <para>
   在两种情况下，要被加密的数据按下列步骤被处理：
  </para>
<!-- pgdoc-cn_end sig_en=9685ae2e7bbf2fb43fdd64cbc11b5176 -->
  <orderedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=de8e3d43da03738727ef776ac21ed72c sig_cn_org=None source=14.1 
    <para>
     Optional data-manipulation: compression, conversion to UTF-8,
     and/or conversion of line-endings.
    </para>
________________________________________________________-->
    <para>
     可选的数据操纵：压缩、转换成 UTF-8 或者行末转换。
    </para>
<!-- pgdoc-cn_end sig_en=de8e3d43da03738727ef776ac21ed72c -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=b69876724f7407d7c13d561d4d131a4e sig_cn_org=None source=14.1 
    <para>
     The data is prefixed with a block of random bytes.  This is equivalent
     to using a random IV.
    </para>
________________________________________________________-->
    <para>
     数据会被加上一个随机字节的块作为前缀。这等效于使用一个随机 IV。
    </para>
<!-- pgdoc-cn_end sig_en=b69876724f7407d7c13d561d4d131a4e -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=249fde2fd5f4b213823ebde9cdf2dfe2 sig_cn_org=None source=14.1 
    <para>
     A SHA1 hash of the random prefix and data is appended.
    </para>
________________________________________________________-->
    <para>
     追加一个随机前缀和数据的 SHA1 哈希。
    </para>
<!-- pgdoc-cn_end sig_en=249fde2fd5f4b213823ebde9cdf2dfe2 -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=311c39ad0db7f5e490e11d4f6d05b7cd sig_cn_org=None source=14.1 
    <para>
     All this is encrypted with the session key and placed in the data packet.
    </para>
________________________________________________________-->
    <para>
     所有这些都用会话密钥加密并且放在数据包中。
    </para>
<!-- pgdoc-cn_end sig_en=311c39ad0db7f5e490e11d4f6d05b7cd -->
   </listitem>
  </orderedlist>

  <sect3>
   <title><function>pgp_sym_encrypt()</function></title>

<!-- pgdoc-cn_start sig_en=37716a55ba709d7351f66579879d8989 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_sym_encrypt</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_sym_encrypt</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=37716a55ba709d7351f66579879d8989 -->

<!-- pgdoc-cn_start sig_en=8094c3b70e2e0f9496565c38b251750b sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_sym_encrypt_bytea</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_sym_encrypt_bytea</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=8094c3b70e2e0f9496565c38b251750b -->

<!-- pgdoc-cn_start sig_en=93f291dd40c9cd35ea8753ca97b69094 sig_cn_org=None source=14.1 
<synopsis>
pgp_sym_encrypt(data text, psw text [, options text ]) returns bytea
pgp_sym_encrypt_bytea(data bytea, psw text [, options text ]) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
pgp_sym_encrypt(data text, psw text [, options text ]) returns bytea
pgp_sym_encrypt_bytea(data bytea, psw text [, options text ]) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=93f291dd40c9cd35ea8753ca97b69094 -->
<!-- pgdoc-cn_start sig_en=cee0abec85a14ede915e99db9c100810 sig_cn_org=None source=14.1 
   <para>
    Encrypt <parameter>data</parameter> with a symmetric PGP key <parameter>psw</parameter>.
    The <parameter>options</parameter> parameter can contain option settings,
    as described below.
   </para>
________________________________________________________-->
   <para>
    使用一个对称 PGP 密钥 <parameter>psw</parameter>加密<parameter>data</parameter>。<parameter>options</parameter>参数可以包含下文所述的选项设置。
   </para>
<!-- pgdoc-cn_end sig_en=cee0abec85a14ede915e99db9c100810 -->
  </sect3>

  <sect3>
   <title><function>pgp_sym_decrypt()</function></title>

<!-- pgdoc-cn_start sig_en=5a18df0f5dd89e2c9c81cba9b1c97007 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_sym_decrypt</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_sym_decrypt</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=5a18df0f5dd89e2c9c81cba9b1c97007 -->

<!-- pgdoc-cn_start sig_en=bd4843138fffe416a5a8f28bc209a0e6 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_sym_decrypt_bytea</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_sym_decrypt_bytea</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=bd4843138fffe416a5a8f28bc209a0e6 -->

<!-- pgdoc-cn_start sig_en=b34c1a6327089b43a2463e84d9c8324a sig_cn_org=None source=14.1 
<synopsis>
pgp_sym_decrypt(msg bytea, psw text [, options text ]) returns text
pgp_sym_decrypt_bytea(msg bytea, psw text [, options text ]) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
pgp_sym_decrypt(msg bytea, psw text [, options text ]) 返回 text
pgp_sym_decrypt_bytea(msg bytea, psw text [, options text ]) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=b34c1a6327089b43a2463e84d9c8324a -->
<!-- pgdoc-cn_start sig_en=2928c0e411f621482c7ca1b5333a383d sig_cn_org=None source=14.1 
   <para>
    Decrypt a symmetric-key-encrypted PGP message.
   </para>
________________________________________________________-->
   <para>
    解密一个用对称密钥加密过的 PGP 消息。
   </para>
<!-- pgdoc-cn_end sig_en=2928c0e411f621482c7ca1b5333a383d -->
<!-- pgdoc-cn_start sig_en=aa71223811d981487ec1a6b1f446b9f7 sig_cn_org=None source=14.1 
   <para>
    Decrypting <type>bytea</type> data with <function>pgp_sym_decrypt</function> is disallowed.
    This is to avoid outputting invalid character data.  Decrypting
    originally textual data with <function>pgp_sym_decrypt_bytea</function> is fine.
   </para>
________________________________________________________-->
   <para>
    不允许使用<function>pgp_sym_decrypt</function>解密<type>bytea</type>数据。这是为了避免输出非法的字符数据。使用<function>pgp_sym_decrypt_bytea</function>解密原始文本数据是好的。
   </para>
<!-- pgdoc-cn_end sig_en=aa71223811d981487ec1a6b1f446b9f7 -->
<!-- pgdoc-cn_start sig_en=330552917c8547b3ef0b1ae13d00ff9a sig_cn_org=None source=14.1 
   <para>
    The <parameter>options</parameter> parameter can contain option settings,
    as described below.
   </para>
________________________________________________________-->
   <para>
    <parameter>options</parameter>参数可以包含下文所述的选项设置。
   </para>
<!-- pgdoc-cn_end sig_en=330552917c8547b3ef0b1ae13d00ff9a -->
  </sect3>

  <sect3>
   <title><function>pgp_pub_encrypt()</function></title>

<!-- pgdoc-cn_start sig_en=546b2a8321ec39b1daa6c170bd14486b sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_pub_encrypt</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_pub_encrypt</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=546b2a8321ec39b1daa6c170bd14486b -->

<!-- pgdoc-cn_start sig_en=9f2d4e323177cecf6b176066fd63c2fe sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_pub_encrypt_bytea</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_pub_encrypt_bytea</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=9f2d4e323177cecf6b176066fd63c2fe -->

<!-- pgdoc-cn_start sig_en=747f627352995032fbac0bd26b64f392 sig_cn_org=None source=14.1 
<synopsis>
pgp_pub_encrypt(data text, key bytea [, options text ]) returns bytea
pgp_pub_encrypt_bytea(data bytea, key bytea [, options text ]) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
pgp_pub_encrypt(data text, key bytea [, options text ]) returns bytea
pgp_pub_encrypt_bytea(data bytea, key bytea [, options text ]) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=747f627352995032fbac0bd26b64f392 -->
<!-- pgdoc-cn_start sig_en=9d3a094d03dd067afdacca406b9a693b sig_cn_org=None source=14.1 
   <para>
    Encrypt <parameter>data</parameter> with a public PGP key <parameter>key</parameter>.
    Giving this function a secret key will produce an error.
   </para>
________________________________________________________-->
   <para>
    用一个公共 PGP 密钥 <parameter>key</parameter>加密<parameter>data</parameter>。给这个函数一个私钥会产生一个错误。
   </para>
<!-- pgdoc-cn_end sig_en=9d3a094d03dd067afdacca406b9a693b -->
<!-- pgdoc-cn_start sig_en=330552917c8547b3ef0b1ae13d00ff9a sig_cn_org=None source=14.1 
   <para>
    The <parameter>options</parameter> parameter can contain option settings,
    as described below.
   </para>
________________________________________________________-->
   <para>
    <parameter>options</parameter>参数可以包含下文所述的选项设置。
   </para>
<!-- pgdoc-cn_end sig_en=330552917c8547b3ef0b1ae13d00ff9a -->
  </sect3>

  <sect3>
   <title><function>pgp_pub_decrypt()</function></title>

<!-- pgdoc-cn_start sig_en=f41fae0bf44eef857e16942aa979dae3 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_pub_decrypt</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_pub_decrypt</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=f41fae0bf44eef857e16942aa979dae3 -->

<!-- pgdoc-cn_start sig_en=0d74fff377f9dc729855cbc752907853 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_pub_decrypt_bytea</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_pub_decrypt_bytea</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=0d74fff377f9dc729855cbc752907853 -->

<!-- pgdoc-cn_start sig_en=3d359f600dabf65ff5f1942ae8db9382 sig_cn_org=None source=14.1 
<synopsis>
pgp_pub_decrypt(msg bytea, key bytea [, psw text [, options text ]]) returns text
pgp_pub_decrypt_bytea(msg bytea, key bytea [, psw text [, options text ]]) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
pgp_pub_decrypt(msg bytea, key bytea [, psw text [, options text ]]) 返回 text
pgp_pub_decrypt_bytea(msg bytea, key bytea [, psw text [, options text ]]) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=3d359f600dabf65ff5f1942ae8db9382 -->
<!-- pgdoc-cn_start sig_en=7d0187471e1039d8cb696646436f2728 sig_cn_org=None source=14.1 
   <para>
    Decrypt a public-key-encrypted message.  <parameter>key</parameter> must be the
    secret key corresponding to the public key that was used to encrypt.
    If the secret key is password-protected, you must give the password in
    <parameter>psw</parameter>.  If there is no password, but you want to specify
    options, you need to give an empty password.
   </para>
________________________________________________________-->
   <para>
    解密一个公共密钥加密的消息。<parameter>key</parameter>必须是对应于用来加密的公钥的私钥。如果私钥是用口令保护的，你必须在<parameter>psw</parameter>中给出该口令。如果没有口令，但你想要指定选项，你需要给出一个空口令。
   </para>
<!-- pgdoc-cn_end sig_en=7d0187471e1039d8cb696646436f2728 -->
<!-- pgdoc-cn_start sig_en=1f859cf4e745dbd236ad7b2d7c541c77 sig_cn_org=None source=14.1 
   <para>
    Decrypting <type>bytea</type> data with <function>pgp_pub_decrypt</function> is disallowed.
    This is to avoid outputting invalid character data.  Decrypting
    originally textual data with <function>pgp_pub_decrypt_bytea</function> is fine.
   </para>
________________________________________________________-->
   <para>
    不允许使用<function>pgp_pub_decrypt</function>解密<type>bytea</type>数据。这是为了避免输出非法的字符数据。使用<function>pgp_pub_decrypt_bytea</function>解密原始文本数据是好的。
   </para>
<!-- pgdoc-cn_end sig_en=1f859cf4e745dbd236ad7b2d7c541c77 -->
<!-- pgdoc-cn_start sig_en=330552917c8547b3ef0b1ae13d00ff9a sig_cn_org=None source=14.1 
   <para>
    The <parameter>options</parameter> parameter can contain option settings,
    as described below.
   </para>
________________________________________________________-->
   <para>
    <parameter>options</parameter>参数可以包含下文所述的选项设置。
   </para>
<!-- pgdoc-cn_end sig_en=330552917c8547b3ef0b1ae13d00ff9a -->
  </sect3>

  <sect3>
   <title><function>pgp_key_id()</function></title>

<!-- pgdoc-cn_start sig_en=f589ebe57c1214ac88b0dc4a0306e411 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_key_id</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_key_id</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=f589ebe57c1214ac88b0dc4a0306e411 -->

<!-- pgdoc-cn_start sig_en=af6aa21f810710aa6b19c524296d1222 sig_cn_org=None source=14.1 
<synopsis>
pgp_key_id(bytea) returns text
</synopsis>
________________________________________________________-->
<synopsis>
pgp_key_id(bytea) 返回 text
</synopsis>
<!-- pgdoc-cn_end sig_en=af6aa21f810710aa6b19c524296d1222 -->
<!-- pgdoc-cn_start sig_en=9c29fe112745e43afcf3097a6a850b77 sig_cn_org=None source=14.1 
   <para>
    <function>pgp_key_id</function> extracts the key ID of a PGP public or secret key.
    Or it gives the key ID that was used for encrypting the data, if given
    an encrypted message.
   </para>
________________________________________________________-->
   <para>
    <function>pgp_key_id</function>抽取一个 PGP 公钥或私钥的密钥 ID。或者如果给定了一个加密过的消息，它给出一个用来加密数据的密钥 ID。
   </para>
<!-- pgdoc-cn_end sig_en=9c29fe112745e43afcf3097a6a850b77 -->
<!-- pgdoc-cn_start sig_en=5b972beb80de60dd667123927b63b486 sig_cn_org=None source=14.1 
   <para>
    It can return 2 special key IDs:
   </para>
________________________________________________________-->
   <para>
    它能够返回 2 个特殊密钥 ID：
   </para>
<!-- pgdoc-cn_end sig_en=5b972beb80de60dd667123927b63b486 -->
   <itemizedlist>
    <listitem>
     <para>
      <literal>SYMKEY</literal>
     </para>
<!-- pgdoc-cn_start sig_en=68bec2dc705ccb1ef3b57701636c5398 sig_cn_org=None source=14.1 
     <para>
      The message is encrypted with a symmetric key.
     </para>
________________________________________________________-->
     <para>
      该消息是用一个对称密钥加密的。
     </para>
<!-- pgdoc-cn_end sig_en=68bec2dc705ccb1ef3b57701636c5398 -->
    </listitem>
    <listitem>
     <para>
      <literal>ANYKEY</literal>
     </para>
<!-- pgdoc-cn_start sig_en=64cd073545ef9fbc3de1165555e19ff7 sig_cn_org=None source=14.1 
     <para>
      The message is public-key encrypted, but the key ID has been removed.
      That means you will need to try all your secret keys on it to see
      which one decrypts it.  <filename>pgcrypto</filename> itself does not produce
      such messages.
     </para>
________________________________________________________-->
     <para>
      该消息是用公钥加密的，但是密钥 ID 已经被移除。这意味着你将需要尝试你所有的密钥来看看哪个能解密该消息。<filename>pgcrypto</filename>本身不产生这样的消息。
     </para>
<!-- pgdoc-cn_end sig_en=64cd073545ef9fbc3de1165555e19ff7 -->
    </listitem>
   </itemizedlist>
<!-- pgdoc-cn_start sig_en=8761f896ad946d172aacd1a13ebc62ee sig_cn_org=None source=14.1 
   <para>
    Note that different keys may have the same ID.   This is rare but a normal
    event. The client application should then try to decrypt with each one,
    to see which fits &mdash; like handling <literal>ANYKEY</literal>.
   </para>
________________________________________________________-->
   <para>
    注意不同的密钥可能具有相同的 ID。这很少见但是是一种正常事件。客户端应用则应该尝试用每一个去解密，看看哪个合适 &mdash; 像处理<literal>ANYKEY</literal>一样。
   </para>
<!-- pgdoc-cn_end sig_en=8761f896ad946d172aacd1a13ebc62ee -->
  </sect3>

  <sect3>
<!-- pgdoc-cn_start sig_en=2093b22a3e28512d31df240839be2e78 sig_cn_org=None source=14.1 
   <title><function>armor()</function>, <function>dearmor()</function></title>
________________________________________________________-->
   <title><function>armor()</function>, <function>dearmor()</function></title>
<!-- pgdoc-cn_end sig_en=2093b22a3e28512d31df240839be2e78 -->

<!-- pgdoc-cn_start sig_en=e4b3220ba40bb47451cce8de584009e6 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>armor</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>armor</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=e4b3220ba40bb47451cce8de584009e6 -->

<!-- pgdoc-cn_start sig_en=ac390dad159d4313b295e38fb5ca2dd8 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>dearmor</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>dearmor</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=ac390dad159d4313b295e38fb5ca2dd8 -->

<!-- pgdoc-cn_start sig_en=e95261c5a3be7bee4a7dd114d4a8cc4e sig_cn_org=None source=14.1 
<synopsis>
armor(data bytea [ , keys text[], values text[] ]) returns text
dearmor(data text) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
armor(data bytea [ , keys text[], values text[] ]) 返回 text
dearmor(data text) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=e95261c5a3be7bee4a7dd114d4a8cc4e -->
<!-- pgdoc-cn_start sig_en=ac4f8d10bbd77a2d43c490a76ab61b08 sig_cn_org=None source=14.1 
   <para>
    These functions wrap/unwrap binary data into PGP ASCII-armor format,
    which is basically Base64 with CRC and additional formatting.
   </para>
________________________________________________________-->
   <para>
    这些函数把二进制数据包装/解包成 PGP ASCII-armored 格式，其基本上是带有 CRC 和额外格式化的 Base64。
   </para>
<!-- pgdoc-cn_end sig_en=ac4f8d10bbd77a2d43c490a76ab61b08 -->

<!-- pgdoc-cn_start sig_en=1fa7ba29dcb35c91ee269568299977d5 sig_cn_org=None source=14.1 
   <para>
    If the <parameter>keys</parameter> and <parameter>values</parameter> arrays are specified,
    an <firstterm>armor header</firstterm> is added to the armored format for each
    key/value pair. Both arrays must be single-dimensional, and they must
    be of the same length.  The keys and values cannot contain any non-ASCII
    characters.
   </para>
________________________________________________________-->
   <para>
    如果指定了<parameter>keys</parameter>和<parameter>values</parameter>数组，每一个
    键/值对的 armored 格式上会增加一个<firstterm>armor header</firstterm>。两个
    数组都必须是单一维度的，并且它们的长度必须相同。键和值不能包含任何
    非 ASCII 字符。
   </para>
<!-- pgdoc-cn_end sig_en=1fa7ba29dcb35c91ee269568299977d5 -->
  </sect3>

  <sect3>
   <title><function>pgp_armor_headers</function></title>

<!-- pgdoc-cn_start sig_en=a23b85959901b2e3fd60d6222618c604 sig_cn_org=None source=14.1 
   <indexterm>
    <primary>pgp_armor_headers</primary>
   </indexterm>
________________________________________________________-->
   <indexterm>
    <primary>pgp_armor_headers</primary>
   </indexterm>
<!-- pgdoc-cn_end sig_en=a23b85959901b2e3fd60d6222618c604 -->

<!-- pgdoc-cn_start sig_en=7b659cacd6ef8a2dee5be0a9d5148b85 sig_cn_org=None source=14.1 
<synopsis>
pgp_armor_headers(data text, key out text, value out text) returns setof record
</synopsis>
________________________________________________________-->
<synopsis>
pgp_armor_headers(data text, key out text, value out text) returns setof record
</synopsis>
<!-- pgdoc-cn_end sig_en=7b659cacd6ef8a2dee5be0a9d5148b85 -->
<!-- pgdoc-cn_start sig_en=2bc081bb207e705adae70b609a20c596 sig_cn_org=None source=14.1 
   <para>
    <function>pgp_armor_headers()</function> extracts the armor headers from
    <parameter>data</parameter>.  The return value is a set of rows with two columns,
    key and value.  If the keys or values contain any non-ASCII characters,
    they are treated as UTF-8.
   </para>
________________________________________________________-->
   <para>
    <function>pgp_armor_headers()</function>从<parameter>data</parameter>中抽取
    armor header。返回值是一个有两列的行集合，包括键和值。如果键或值
    包含任何非-ASCII 字符，它们会被视作 UTF-8。
   </para>
<!-- pgdoc-cn_end sig_en=2bc081bb207e705adae70b609a20c596 -->
  </sect3>

  <sect3>
<!-- pgdoc-cn_start sig_en=ca77a1f757cefb4bb72c389192ef1801 sig_cn_org=None source=14.1 
   <title>Options for PGP Functions</title>
________________________________________________________-->
   <title>PGP 函数的选项</title>
<!-- pgdoc-cn_end sig_en=ca77a1f757cefb4bb72c389192ef1801 -->

<!-- pgdoc-cn_start sig_en=5d5cb7c44448196016150f8ee4f51c04 sig_cn_org=None source=14.1 
   <para>
    Options are named to be similar to GnuPG.  An option's value should be
    given after an equal sign; separate options from each other with commas.
    For example:
<programlisting>
pgp_sym_encrypt(data, psw, 'compress-algo=1, cipher-algo=aes256')
</programlisting>
   </para>
________________________________________________________-->
   <para>
    选项被命名为与 GnuPG 类似的形式。一个选项的值应该在一个等号后给出，各个选项之间用逗号分隔。例如：
<programlisting>
pgp_sym_encrypt(data, psw, 'compress-algo=1, cipher-algo=aes256')
</programlisting>
   </para>
<!-- pgdoc-cn_end sig_en=5d5cb7c44448196016150f8ee4f51c04 -->

<!-- pgdoc-cn_start sig_en=904cd6e5ecaec58e6dbb34c3691b3202 sig_cn_org=None source=14.1 
   <para>
    All of the options except <literal>convert-crlf</literal> apply only to
    encrypt functions.  Decrypt functions get the parameters from the PGP
    data.
   </para>
________________________________________________________-->
   <para>
    除了<literal>convert-crlf</literal>之外所有这些选项只适用于加密函数。解密函数会从 PGP 数据中得到这些参数。
   </para>
<!-- pgdoc-cn_end sig_en=904cd6e5ecaec58e6dbb34c3691b3202 -->

<!-- pgdoc-cn_start sig_en=18079f3e6f6201317240d4817bfb3b36 sig_cn_org=None source=14.1 
   <para>
    The most interesting options are probably
    <literal>compress-algo</literal> and <literal>unicode-mode</literal>.
    The rest should have reasonable defaults.
   </para>
________________________________________________________-->
   <para>
    最有趣的选项可能是<literal>compress-algo</literal>和<literal>unicode-mode</literal>。其余的应该可以使用合理的默认值。
   </para>
<!-- pgdoc-cn_end sig_en=18079f3e6f6201317240d4817bfb3b36 -->

  <sect4>
<!-- pgdoc-cn_start sig_en=a7c1c077eb1c35e4a45064e7d0a9d661 sig_cn_org=None source=14.1 
   <title>cipher-algo</title>
________________________________________________________-->
   <title>cipher-algo</title>
<!-- pgdoc-cn_end sig_en=a7c1c077eb1c35e4a45064e7d0a9d661 -->

<!-- pgdoc-cn_start sig_en=0c6810a05c3d621acb01456d10bdca28 sig_cn_org=None source=14.1 
   <para>
    Which cipher algorithm to use.
   </para>
________________________________________________________-->
   <para>
    要用哪个密码算法。
   </para>
<!-- pgdoc-cn_end sig_en=0c6810a05c3d621acb01456d10bdca28 -->
<literallayout>
Values: bf, aes128, aes192, aes256, 3des, cast5
Default: aes128
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=a375c7e076312ceacdeb3857820ca22f sig_cn_org=None source=14.1 
   <title>compress-algo</title>
________________________________________________________-->
   <title>compress-algo</title>
<!-- pgdoc-cn_end sig_en=a375c7e076312ceacdeb3857820ca22f -->

<!-- pgdoc-cn_start sig_en=543e69927b73600eea93333d6c8e5fc9 sig_cn_org=None source=14.1 
   <para>
    Which compression algorithm to use.  Only available if
    <productname>PostgreSQL</productname> was built with zlib.
   </para>
________________________________________________________-->
   <para>
    要使用哪种压缩算法。只有<productname>PostgreSQL</productname>编译时使用了 zlib 时才可用。
   </para>
<!-- pgdoc-cn_end sig_en=543e69927b73600eea93333d6c8e5fc9 -->
<literallayout>
Values:
  0 - no compression
  1 - ZIP compression
  2 - ZLIB compression (= ZIP plus meta-data and block CRCs)
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=6a5dce24d43d670a3db360b6c88fc8fd sig_cn_org=None source=14.1 
   <title>compress-level</title>
________________________________________________________-->
   <title>compress-level</title>
<!-- pgdoc-cn_end sig_en=6a5dce24d43d670a3db360b6c88fc8fd -->

<!-- pgdoc-cn_start sig_en=871e64ab5c1eb8121b045a9479955d2d sig_cn_org=None source=14.1 
   <para>
    How much to compress.  Higher levels compress smaller but are slower.
    0 disables compression.
   </para>
________________________________________________________-->
   <para>
    压缩多少。级别越高压缩得越小但是速度也越慢。0 表示禁用压缩。
   </para>
<!-- pgdoc-cn_end sig_en=871e64ab5c1eb8121b045a9479955d2d -->
<literallayout>
Values: 0, 1-9
Default: 6
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=9fede3ba55be509e2e912d37e8ee5edd sig_cn_org=None source=14.1 
   <title>convert-crlf</title>
________________________________________________________-->
   <title>convert-crlf</title>
<!-- pgdoc-cn_end sig_en=9fede3ba55be509e2e912d37e8ee5edd -->

<!-- pgdoc-cn_start sig_en=593e7a56325eca10606a31c9212a6beb sig_cn_org=None source=14.1 
   <para>
    Whether to convert <literal>\n</literal> into <literal>\r\n</literal> when
    encrypting and <literal>\r\n</literal> to <literal>\n</literal> when
    decrypting.  <acronym>RFC</acronym> 4880 specifies that text data should be stored using
    <literal>\r\n</literal> line-feeds.  Use this to get fully RFC-compliant
    behavior.
   </para>
________________________________________________________-->
   <para>
    加密时是否把<literal>\n</literal>转换成<literal>\r\n</literal>以及解密时是否把<literal>\r\n</literal>转换成<literal>\n</literal>。<acronym>RFC</acronym> 4880 指定文本数据存储时应该使用<literal>\r\n</literal>换行。使用这个选项能够得到完全 RFC 兼容的行为。
   </para>
<!-- pgdoc-cn_end sig_en=593e7a56325eca10606a31c9212a6beb -->
<literallayout>
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt, pgp_sym_decrypt, pgp_pub_decrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=ca7f14f8304504f4884698aa50f8dac9 sig_cn_org=None source=14.1 
   <title>disable-mdc</title>
________________________________________________________-->
   <title>disable-mdc</title>
<!-- pgdoc-cn_end sig_en=ca7f14f8304504f4884698aa50f8dac9 -->

<!-- pgdoc-cn_start sig_en=ce137265512a59a7eae1bc8d8f21e167 sig_cn_org=None source=14.1 
   <para>
    Do not protect data with SHA-1.  The only good reason to use this
    option is to achieve compatibility with ancient PGP products, predating
    the addition of SHA-1 protected packets to <acronym>RFC</acronym> 4880.
    Recent gnupg.org and pgp.com software supports it fine.
   </para>
________________________________________________________-->
   <para>
    不用 SHA-1 保护数据。使用这个选项的唯一好的理由是实现与古董级别 PGP 产品的兼容，这些产品在受 SHA-1 保护的包被加入到 <acronym>RFC</acronym> 4880 之前就已经存在了。最近的 gnupg.org 和 pgp.com 软件能很好地支持它。
   </para>
<!-- pgdoc-cn_end sig_en=ce137265512a59a7eae1bc8d8f21e167 -->
<literallayout>
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=66abefdbac130729bf8b0658da1b6e58 sig_cn_org=None source=14.1 
   <title>sess-key</title>
________________________________________________________-->
   <title>sess-key</title>
<!-- pgdoc-cn_end sig_en=66abefdbac130729bf8b0658da1b6e58 -->

<!-- pgdoc-cn_start sig_en=4d18d227e199806bea31d532054043ba sig_cn_org=None source=14.1 
   <para>
    Use separate session key.  Public-key encryption always uses a separate
    session key; this option is for symmetric-key encryption, which by default
    uses the S2K key directly.
   </para>
________________________________________________________-->
   <para>
    使用单独的会话密钥。公钥加密总是使用一个单独的会话密钥。这个选项是用于对称密钥加密的，对称密钥加密默认直接使用 S2K 密钥。
   </para>
<!-- pgdoc-cn_end sig_en=4d18d227e199806bea31d532054043ba -->
<literallayout>
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=28a256309395bc7123bef63e3ba11c3f sig_cn_org=None source=14.1 
   <title>s2k-mode</title>
________________________________________________________-->
   <title>s2k-mode</title>
<!-- pgdoc-cn_end sig_en=28a256309395bc7123bef63e3ba11c3f -->

<!-- pgdoc-cn_start sig_en=5e0cb9f293be7f768998fdb1059a712a sig_cn_org=None source=14.1 
   <para>
    Which S2K algorithm to use.
   </para>
________________________________________________________-->
   <para>
    要使用哪一种 S2K 算法。
   </para>
<!-- pgdoc-cn_end sig_en=5e0cb9f293be7f768998fdb1059a712a -->
<literallayout>
Values:
  0 - Without salt.  Dangerous!
  1 - With salt but with fixed iteration count.
  3 - Variable iteration count.
Default: 3
Applies to: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=557c7a8ec3d6cf6e183bdd95a6b60a0b sig_cn_org=None source=14.1 
   <title>s2k-count</title>
________________________________________________________-->
   <title>s2k-count</title>
<!-- pgdoc-cn_end sig_en=557c7a8ec3d6cf6e183bdd95a6b60a0b -->

<!-- pgdoc-cn_start sig_en=4754f422841c41738b1106a4f241d11e sig_cn_org=None source=14.1 
   <para>
    The number of iterations of the S2K algorithm to use.  It must
    be a value between 1024 and 65011712, inclusive.
   </para>
________________________________________________________-->
   <para>
    S2K 算法要使用的迭代次数。它必须是一个位于 1024 和 65011712 之间的值，
    首尾两个值包括在内。
   </para>
<!-- pgdoc-cn_end sig_en=4754f422841c41738b1106a4f241d11e -->
<literallayout>
Default: A random value between 65536 and 253952
Applies to: pgp_sym_encrypt, only with s2k-mode=3
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=3f7406d971ed30e9747f47f59edbfe11 sig_cn_org=None source=14.1 
   <title>s2k-digest-algo</title>
________________________________________________________-->
   <title>s2k-digest-algo</title>
<!-- pgdoc-cn_end sig_en=3f7406d971ed30e9747f47f59edbfe11 -->

<!-- pgdoc-cn_start sig_en=0f43a0afef675fa5912017ccfb9b39ac sig_cn_org=None source=14.1 
   <para>
    Which digest algorithm to use in S2K calculation.
   </para>
________________________________________________________-->
   <para>
    要在 S2K 计算中使用哪种摘要算法。
   </para>
<!-- pgdoc-cn_end sig_en=0f43a0afef675fa5912017ccfb9b39ac -->
<literallayout>
Values: md5, sha1
Default: sha1
Applies to: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=0336e473ea0fd3f305797ca60faed146 sig_cn_org=None source=14.1 
   <title>s2k-cipher-algo</title>
________________________________________________________-->
   <title>s2k-cipher-algo</title>
<!-- pgdoc-cn_end sig_en=0336e473ea0fd3f305797ca60faed146 -->

<!-- pgdoc-cn_start sig_en=be254ef71440e550559886b947789353 sig_cn_org=None source=14.1 
   <para>
    Which cipher to use for encrypting separate session key.
   </para>
________________________________________________________-->
   <para>
    要用哪种密码来加密独立的会话密钥。
   </para>
<!-- pgdoc-cn_end sig_en=be254ef71440e550559886b947789353 -->
<literallayout>
Values: bf, aes, aes128, aes192, aes256
Default: use cipher-algo
Applies to: pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
<!-- pgdoc-cn_start sig_en=99ca7e96888ba23375bb23ebdcb5f279 sig_cn_org=None source=14.1 
   <title>unicode-mode</title>
________________________________________________________-->
   <title>unicode-mode</title>
<!-- pgdoc-cn_end sig_en=99ca7e96888ba23375bb23ebdcb5f279 -->

<!-- pgdoc-cn_start sig_en=89e07be22269bc1f9a604484e08d1766 sig_cn_org=None source=14.1 
   <para>
    Whether to convert textual data from database internal encoding to
    UTF-8 and back.  If your database already is UTF-8, no conversion will
    be done, but the message will be tagged as UTF-8.  Without this option
    it will not be.
   </para>
________________________________________________________-->
   <para>
    是否把文本数据在数据库内部编码和 UTF-8 之间来回转换。如果你的数据库已经是 UTF-8，将不会转换，但是消息将被标记为 UTF-8。没有这个选项它将不会被标记。
   </para>
<!-- pgdoc-cn_end sig_en=89e07be22269bc1f9a604484e08d1766 -->
<literallayout>
Values: 0, 1
Default: 0
Applies to: pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>
  </sect3>

 <sect3>
<!-- pgdoc-cn_start sig_en=a7dac7f391bf8423942a246957a6872e sig_cn_org=None source=14.1 
  <title>Generating PGP Keys with GnuPG</title>
________________________________________________________-->
  <title>用 GnuPG 生成 PGP 密钥</title>
<!-- pgdoc-cn_end sig_en=a7dac7f391bf8423942a246957a6872e -->

<!-- pgdoc-cn_start sig_en=75aaf0465aca8ed669f7fd54868dd367 sig_cn_org=None source=14.1 
  <para>
   To generate a new key:
<programlisting>
gpg -&minus;gen-key
</programlisting>
  </para>
________________________________________________________-->
  <para>
   要生成一个新密钥：
<programlisting>
gpg --gen-key
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=75aaf0465aca8ed669f7fd54868dd367 -->
<!-- pgdoc-cn_start sig_en=59811b4e7990cfb9d7fdbb4e2b5af8c1 sig_cn_org=None source=14.1 
  <para>
   The preferred key type is <quote>DSA and Elgamal</quote>.
  </para>
________________________________________________________-->
  <para>
   更好的密钥类型是<quote>DSA 和 Elgamal</quote>。
  </para>
<!-- pgdoc-cn_end sig_en=59811b4e7990cfb9d7fdbb4e2b5af8c1 -->
<!-- pgdoc-cn_start sig_en=5ffbd8b1551d0fb0571f0f97dbb70061 sig_cn_org=None source=14.1 
  <para>
   For RSA encryption you must create either DSA or RSA sign-only key
   as master and then add an RSA encryption subkey with
   <literal>gpg -&minus;edit-key</literal>.
  </para>
________________________________________________________-->
  <para>
   对于 RSA 密钥，你必须创建仅用于签名的 DSA 或 RSA 密钥作为主控密钥，然后用<literal>gpg --edit-key</literal>增加一个 RSA 加密子密钥。
  </para>
<!-- pgdoc-cn_end sig_en=5ffbd8b1551d0fb0571f0f97dbb70061 -->
<!-- pgdoc-cn_start sig_en=8363717c152adb453b87e50a23d0c5bd sig_cn_org=None source=14.1 
  <para>
   To list keys:
<programlisting>
gpg -&minus;list-secret-keys
</programlisting>
  </para>
________________________________________________________-->
  <para>
   要列举密钥：
<programlisting>
gpg --list-secret-keys
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=8363717c152adb453b87e50a23d0c5bd -->
<!-- pgdoc-cn_start sig_en=9a97752fd7d66a41cee4cad8b7f22906 sig_cn_org=None source=14.1 
  <para>
   To export a public key in ASCII-armor format:
<programlisting>
gpg -a -&minus;export KEYID > public.key
</programlisting>
  </para>
________________________________________________________-->
  <para>
   要以 ASCII-保护格式导出一个公钥：
<programlisting>
gpg -a --export KEYID > public.key
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=9a97752fd7d66a41cee4cad8b7f22906 -->
<!-- pgdoc-cn_start sig_en=055bb35676222a1e0c05beb61c947cdf sig_cn_org=None source=14.1 
  <para>
   To export a secret key in ASCII-armor format:
<programlisting>
gpg -a -&minus;export-secret-keys KEYID > secret.key
</programlisting>
  </para>
________________________________________________________-->
  <para>
   要以 ASCII-保护格式导出一个私钥：
<programlisting>
gpg -a --export-secret-keys KEYID > secret.key
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=055bb35676222a1e0c05beb61c947cdf -->
<!-- pgdoc-cn_start sig_en=095aaacc1e47af2b79a820d1d40d29b5 sig_cn_org=None source=14.1 
  <para>
   You need to use <function>dearmor()</function> on these keys before giving them to
   the PGP functions.  Or if you can handle binary data, you can drop
   <literal>-a</literal> from the command.
  </para>
________________________________________________________-->
  <para>
   在把这些密钥交给 PGP 函数之前，你需要对它们使用<function>dearmor()</function>。或者如果你能处理二进制数据，你可以从命令中去掉<literal>-a</literal>。
  </para>
<!-- pgdoc-cn_end sig_en=095aaacc1e47af2b79a820d1d40d29b5 -->
<!-- pgdoc-cn_start sig_en=219410bb023a7eb41d5364cd0badb46a sig_cn_org=None source=14.1 
  <para>
   For more details see <literal>man gpg</literal>,
   <ulink url="https://www.gnupg.org/gph/en/manual.html">The GNU
   Privacy Handbook</ulink> and other documentation on
   <ulink url="https://www.gnupg.org/"></ulink>.
  </para>
________________________________________________________-->
  <para>
   更多细节请参考<literal>man gpg</literal>、
   <ulink url="https://www.gnupg.org/gph/en/manual.html">The GNU
   Privacy Handbook</ulink>以及
   <ulink url="https://www.gnupg.org/"></ulink>上的其他文档。
  </para>
<!-- pgdoc-cn_end sig_en=219410bb023a7eb41d5364cd0badb46a -->
 </sect3>

 <sect3>
<!-- pgdoc-cn_start sig_en=aaea70245869c9f787511dd0af490144 sig_cn_org=None source=14.1 
  <title>Limitations of PGP Code</title>
________________________________________________________-->
  <title>PGP 代码的限制</title>
<!-- pgdoc-cn_end sig_en=aaea70245869c9f787511dd0af490144 -->

  <itemizedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=b6674b41b55ae9b717228a4aa7ba924f sig_cn_org=None source=14.1 
    <para>
    No support for signing.  That also means that it is not checked
    whether the encryption subkey belongs to the master key.
    </para>
________________________________________________________-->
    <para>
    不支持签名。这也意味着它不检查加密子密钥是否属于主控密钥。
    </para>
<!-- pgdoc-cn_end sig_en=b6674b41b55ae9b717228a4aa7ba924f -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=f113638bda455cdd4757f0c2b479aed3 sig_cn_org=None source=14.1 
    <para>
    No support for encryption key as master key.  As such practice
    is generally discouraged, this should not be a problem.
    </para>
________________________________________________________-->
    <para>
    不支持加密密钥作为主控密钥。由于通常并不鼓励那种用法，这应该不是问题。
    </para>
<!-- pgdoc-cn_end sig_en=f113638bda455cdd4757f0c2b479aed3 -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=454c259f66b77ee6d58ff91319d54755 sig_cn_org=None source=14.1 
    <para>
    No support for several subkeys.  This may seem like a problem, as this
    is common practice.  On the other hand, you should not use your regular
    GPG/PGP keys with <filename>pgcrypto</filename>, but create new ones,
    as the usage scenario is rather different.
    </para>
________________________________________________________-->
    <para>
    不支持多个子密钥。这可能看起来像一个问题，因为在实践中普遍需要多个子密钥。在另一方面，你不能把你的常规 GPG/PGP 密钥用于<filename>pgcrypto</filename>，而是创建一些新的密钥，因为使用场景相当不同。
    </para>
<!-- pgdoc-cn_end sig_en=454c259f66b77ee6d58ff91319d54755 -->
   </listitem>
  </itemizedlist>
  </sect3>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=db08775a26739d1d15122d2d94cbca3f sig_cn_org=None source=14.1 
  <title>Raw Encryption Functions</title>
________________________________________________________-->
  <title>原始的加密函数</title>
<!-- pgdoc-cn_end sig_en=db08775a26739d1d15122d2d94cbca3f -->

<!-- pgdoc-cn_start sig_en=00a7a627c8dfa64cf7a9b49119adf22f sig_cn_org=None source=14.1 
  <para>
   These functions only run a cipher over data; they don't have any advanced
   features of PGP encryption.  Therefore they have some major problems:
  </para>
________________________________________________________-->
  <para>
   这些函数只在数据上运行一次加密，它们不具有 PGP 加密的任何先进特性。因此它们有一些主要的问题：
  </para>
<!-- pgdoc-cn_end sig_en=00a7a627c8dfa64cf7a9b49119adf22f -->
  <orderedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=7aa580d73f9f3d45403aaccb16b2abfa sig_cn_org=None source=14.1 
    <para>
    They use user key directly as cipher key.
    </para>
________________________________________________________-->
    <para>
    它们直接把用户密钥用作加密密钥。
    </para>
<!-- pgdoc-cn_end sig_en=7aa580d73f9f3d45403aaccb16b2abfa -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=97ae75c5ab432315877a94e11c68d4db sig_cn_org=None source=14.1 
    <para>
    They don't provide any integrity checking, to see
    if the encrypted data was modified.
    </para>
________________________________________________________-->
    <para>
    它们不提供任何完整性检查来查看被加密数据是否被修改。
    </para>
<!-- pgdoc-cn_end sig_en=97ae75c5ab432315877a94e11c68d4db -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=88b5639c3cb4a365ed3206547f347f17 sig_cn_org=None source=14.1 
    <para>
    They expect that users manage all encryption parameters
    themselves, even IV.
    </para>
________________________________________________________-->
    <para>
    它们希望用户自己管理所有加密参数，甚至是 IV。
    </para>
<!-- pgdoc-cn_end sig_en=88b5639c3cb4a365ed3206547f347f17 -->
   </listitem>
   <listitem>
<!-- pgdoc-cn_start sig_en=a39db33c2c6840dbd66f1a6a4963d2c2 sig_cn_org=None source=14.1 
    <para>
    They don't handle text.
    </para>
________________________________________________________-->
    <para>
    它们无法处理文本。
    </para>
<!-- pgdoc-cn_end sig_en=a39db33c2c6840dbd66f1a6a4963d2c2 -->
   </listitem>
  </orderedlist>
<!-- pgdoc-cn_start sig_en=7f0ea886a07d2ef056b1b05aab62105a sig_cn_org=None source=14.1 
  <para>
   So, with the introduction of PGP encryption, usage of raw
   encryption functions is discouraged.
  </para>
________________________________________________________-->
  <para>
   因此，在介绍了 PGP 加密后，我们不鼓励使用原始的加密函数。
  </para>
<!-- pgdoc-cn_end sig_en=7f0ea886a07d2ef056b1b05aab62105a -->

<!-- pgdoc-cn_start sig_en=d4935ee4a6961a42015d579ab44063a4 sig_cn_org=None source=14.1 
  <indexterm>
   <primary>encrypt</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>encrypt</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=d4935ee4a6961a42015d579ab44063a4 -->

<!-- pgdoc-cn_start sig_en=ca4abcd801341619a8a9fc8f49641e7f sig_cn_org=None source=14.1 
  <indexterm>
   <primary>decrypt</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>decrypt</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=ca4abcd801341619a8a9fc8f49641e7f -->

<!-- pgdoc-cn_start sig_en=36d2862caa593cbbf2ad0b7e771d6d22 sig_cn_org=None source=14.1 
  <indexterm>
   <primary>encrypt_iv</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>encrypt_iv</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=36d2862caa593cbbf2ad0b7e771d6d22 -->

<!-- pgdoc-cn_start sig_en=c5cfc83a1056659048cca25aaea276b0 sig_cn_org=None source=14.1 
  <indexterm>
   <primary>decrypt_iv</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>decrypt_iv</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=c5cfc83a1056659048cca25aaea276b0 -->

<!-- pgdoc-cn_start sig_en=ec2a101685195cc54687fafce4094366 sig_cn_org=None source=14.1 
<synopsis>
encrypt(data bytea, key bytea, type text) returns bytea
decrypt(data bytea, key bytea, type text) returns bytea

encrypt_iv(data bytea, key bytea, iv bytea, type text) returns bytea
decrypt_iv(data bytea, key bytea, iv bytea, type text) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
encrypt(data bytea, key bytea, type text) returns bytea
decrypt(data bytea, key bytea, type text) returns bytea

encrypt_iv(data bytea, key bytea, iv bytea, type text) returns bytea
decrypt_iv(data bytea, key bytea, iv bytea, type text) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=ec2a101685195cc54687fafce4094366 -->

<!-- pgdoc-cn_start sig_en=67e1efc2ee68b261ad5348666e7f2cd6 sig_cn_org=None source=14.1 
  <para>
   Encrypt/decrypt data using the cipher method specified by
   <parameter>type</parameter>.  The syntax of the
   <parameter>type</parameter> string is:

<synopsis>
<replaceable>algorithm</replaceable> <optional> <literal>-</literal> <replaceable>mode</replaceable> </optional> <optional> <literal>/pad:</literal> <replaceable>padding</replaceable> </optional>
</synopsis>
   where <replaceable>algorithm</replaceable> is one of:

  <itemizedlist>
   <listitem><para><literal>bf</literal> &mdash; Blowfish</para></listitem>
   <listitem><para><literal>aes</literal> &mdash; AES (Rijndael-128, -192 or -256)</para></listitem>
  </itemizedlist>
   and <replaceable>mode</replaceable> is one of:
  <itemizedlist>
   <listitem>
    <para>
    <literal>cbc</literal> &mdash; next block depends on previous (default)
    </para>
   </listitem>
   <listitem>
    <para>
    <literal>ecb</literal> &mdash; each block is encrypted separately (for
    testing only)
    </para>
   </listitem>
  </itemizedlist>
   and <replaceable>padding</replaceable> is one of:
  <itemizedlist>
   <listitem>
    <para>
    <literal>pkcs</literal> &mdash; data may be any length (default)
    </para>
   </listitem>
   <listitem>
    <para>
    <literal>none</literal> &mdash; data must be multiple of cipher block size
    </para>
   </listitem>
  </itemizedlist>
  </para>
________________________________________________________-->
  <para>
   使用<parameter>type</parameter>指定的密码方法加密/解密数据。<parameter>type</parameter>字符串的语法是：

<synopsis>
<replaceable>algorithm</replaceable> <optional> <literal>-</literal> <replaceable>mode</replaceable> </optional> <optional> <literal>/pad:</literal> <replaceable>padding</replaceable> </optional>
</synopsis>
   其中<replaceable>algorithm</replaceable>是下列之一：

  <itemizedlist>
   <listitem><para><literal>bf</literal> &mdash; Blowfish</para></listitem>
   <listitem><para><literal>aes</literal> &mdash; AES (Rijndael-128, -192 或 -256)</para></listitem>
  </itemizedlist>
   并且<replaceable>mode</replaceable>是下列之一：
  <itemizedlist>
   <listitem>
    <para>
    <literal>cbc</literal> &mdash; 下一个块依赖前一个（默认）
    </para>
   </listitem>
   <listitem>
    <para>
    <literal>ecb</literal> &mdash; 每一个块被独立加密（只用于测试）
    </para>
   </listitem>
  </itemizedlist>
   并且<replaceable>padding</replaceable>是下列之一：
  <itemizedlist>
   <listitem>
    <para>
    <literal>pkcs</literal> &mdash; 数据可以是任意长度（默认）
    </para>
   </listitem>
   <listitem>
    <para>
    <literal>none</literal> &mdash; 数据必须是密码块尺寸的倍数
    </para>
   </listitem>
  </itemizedlist>
  </para>
<!-- pgdoc-cn_end sig_en=67e1efc2ee68b261ad5348666e7f2cd6 -->
<!-- pgdoc-cn_start sig_en=72ab027ad7f80afe5f28e8770f76eb00 sig_cn_org=None source=14.1 
  <para>
   So, for example, these are equivalent:
<programlisting>
encrypt(data, 'fooz', 'bf')
encrypt(data, 'fooz', 'bf-cbc/pad:pkcs')
</programlisting>
  </para>
________________________________________________________-->
  <para>
   因此，例如这些是等效的：
<programlisting>
encrypt(data, 'fooz', 'bf')
encrypt(data, 'fooz', 'bf-cbc/pad:pkcs')
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=72ab027ad7f80afe5f28e8770f76eb00 -->
<!-- pgdoc-cn_start sig_en=aa918954185d91a9189c79904289a7a5 sig_cn_org=None source=14.1 
  <para>
   In <function>encrypt_iv</function> and <function>decrypt_iv</function>, the
   <parameter>iv</parameter> parameter is the initial value for the CBC mode;
   it is ignored for ECB.
   It is clipped or padded with zeroes if not exactly block size.
   It defaults to all zeroes in the functions without this parameter.
  </para>
________________________________________________________-->
  <para>
   在<function>encrypt_iv</function>和<function>decrypt_iv</function>中，<parameter>iv</parameter>参数是 CBC 模式的初始值，ECB 会忽略它。如果不是准确的块尺寸，它会被修剪或用零填充。在没有这个参数的函数中，它的值都被默认为零。
  </para>
<!-- pgdoc-cn_end sig_en=aa918954185d91a9189c79904289a7a5 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=481b7b788e69c062d7c26597461c4489 sig_cn_org=None source=14.1 
  <title>Random-Data Functions</title>
________________________________________________________-->
  <title>随机数据函数</title>
<!-- pgdoc-cn_end sig_en=481b7b788e69c062d7c26597461c4489 -->

<!-- pgdoc-cn_start sig_en=71c15a795ebc25e1d6cd491de8e46e51 sig_cn_org=None source=14.1 
  <indexterm>
   <primary>gen_random_bytes</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>gen_random_bytes</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=71c15a795ebc25e1d6cd491de8e46e51 -->

<!-- pgdoc-cn_start sig_en=b2bfdd0673c6f0cee3af97a0feb226e0 sig_cn_org=None source=14.1 
<synopsis>
gen_random_bytes(count integer) returns bytea
</synopsis>
________________________________________________________-->
<synopsis>
gen_random_bytes(count integer) returns bytea
</synopsis>
<!-- pgdoc-cn_end sig_en=b2bfdd0673c6f0cee3af97a0feb226e0 -->
<!-- pgdoc-cn_start sig_en=10fc6ecf23466d84abb285b576c8751f sig_cn_org=None source=14.1 
  <para>
   Returns <parameter>count</parameter> cryptographically strong random bytes.
   At most 1024 bytes can be extracted at a time.  This is to avoid
   draining the randomness generator pool.
  </para>
________________________________________________________-->
  <para>
   返回<parameter>count</parameter>个密码上强壮的随机字节。一次最多可以抽取 1024 个字节。这是为了避免耗尽随机数发生池。
  </para>
<!-- pgdoc-cn_end sig_en=10fc6ecf23466d84abb285b576c8751f -->

<!-- pgdoc-cn_start sig_en=45fd51ebd750e3b1e1cff3819e01275f sig_cn_org=None source=14.1 
  <indexterm>
   <primary>gen_random_uuid</primary>
  </indexterm>
________________________________________________________-->
  <indexterm>
   <primary>gen_random_uuid</primary>
  </indexterm>
<!-- pgdoc-cn_end sig_en=45fd51ebd750e3b1e1cff3819e01275f -->

<!-- pgdoc-cn_start sig_en=99e933b1ee5c6f9f5c9c07f90cc4aa61 sig_cn_org=None source=14.1 
<synopsis>
gen_random_uuid() returns uuid
</synopsis>
________________________________________________________-->
<synopsis>
gen_random_uuid() 返回 uuid
</synopsis>
<!-- pgdoc-cn_end sig_en=99e933b1ee5c6f9f5c9c07f90cc4aa61 -->
<!-- pgdoc-cn_start sig_en=36e61d75abc1a47f435d12efe292fdd3 sig_cn_org=3385057d1d4e2e8d8b2521a4201b4d6f source=15.7 
  <para>
   Returns a version 4 (random) UUID. (Obsolete, this function
   internally calls the <link linkend="functions-uuid">core
   function</link> of the same name.)
  </para>
________________________________________________________-->
  <para>
   返回一个版本4（随机）UUID。（已过时，此函数内部调用同名的<link linkend="functions-uuid">核心函数</link>。）
  </para>
<!-- pgdoc-cn_end sig_en=36e61d75abc1a47f435d12efe292fdd3 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 sig_cn_org=None source=14.1 
  <title>Notes</title>
________________________________________________________-->
  <title>注解</title>
<!-- pgdoc-cn_end sig_en=c44fa43baeb4f69a8a2aa1ea108c6e97 -->

  <sect3>
<!-- pgdoc-cn_start sig_en=78fd6ae8f68f7c009e14488907792dde sig_cn_org=None source=14.1 
   <title>Configuration</title>
________________________________________________________-->
   <title>配置</title>
<!-- pgdoc-cn_end sig_en=78fd6ae8f68f7c009e14488907792dde -->

<!-- pgdoc-cn_start sig_en=c6ee01bb7b8dee9a0292d95b791ff286 sig_cn_org=None source=14.1 
   <para>
    <filename>pgcrypto</filename> configures itself according to the findings of the
    main PostgreSQL <literal>configure</literal> script.  The options that
    affect it are <literal>-&minus;with-zlib</literal> and
    <literal>-&minus;with-ssl=openssl</literal>.
   </para>
________________________________________________________-->
   <para>
    <filename>pgcrypto</filename>会根据查找主 PostgreSQL <literal>configure</literal>脚本配置它自身。影响它的选项是<literal>--with-zlib</literal>以及<literal>--with-ssl=openssl</literal>。
   </para>
<!-- pgdoc-cn_end sig_en=c6ee01bb7b8dee9a0292d95b791ff286 -->

<!-- pgdoc-cn_start sig_en=83bce6724e062c1597d2ce5595f585eb sig_cn_org=None source=14.1 
   <para>
    When compiled with zlib, PGP encryption functions are able to
    compress data before encrypting.
   </para>
________________________________________________________-->
   <para>
    在编译了 zlib 时，PGP 加密函数能够在加密前压缩数据。
   </para>
<!-- pgdoc-cn_end sig_en=83bce6724e062c1597d2ce5595f585eb -->

<!-- pgdoc-cn_start sig_en=c9a2c5f8c6a2a6beb8ff8d5824875e47 sig_cn_org=10b6026d919724b04313f7eb59af6028 source=15.7 
   <para>
    <filename>pgcrypto</filename> requires <productname>OpenSSL</productname>.
    Otherwise, it will not be built or installed.
   </para>
________________________________________________________-->
   <para>
    <filename>pgcrypto</filename>需要<productname>OpenSSL</productname>。
    否则，它将无法构建或安装。
</para>
<!-- pgdoc-cn_end sig_en=c9a2c5f8c6a2a6beb8ff8d5824875e47 -->

<!-- pgdoc-cn_start sig_en=00bc58c17a0c82f5fb352ba64789eafe sig_cn_org=None source=14.1 
   <para>
    When compiled against <productname>OpenSSL</productname> 3.0.0 and later
    versions, the legacy provider must be activated in the
    <filename>openssl.cnf</filename> configuration file in order to use older
    ciphers like DES or Blowfish.
   </para>
________________________________________________________-->
   <para>
       当针对<productname>OpenSSL</productname>3.0.0和更高版本进行编译时，必须在<filename>openssl.cnf</filename>配置文件中启用旧版提供程序，以便使用旧的密码，如DES或Blowfish。
      </para>
<!-- pgdoc-cn_end sig_en=00bc58c17a0c82f5fb352ba64789eafe -->
  </sect3>

  <sect3>
<!-- pgdoc-cn_start sig_en=484b23bc249c77516a9968044d87d08a sig_cn_org=None source=14.1 
   <title>NULL Handling</title>
________________________________________________________-->
   <title>NULL 处理</title>
<!-- pgdoc-cn_end sig_en=484b23bc249c77516a9968044d87d08a -->

<!-- pgdoc-cn_start sig_en=45e3fcdac2c3d85fa47a4e50712c2e73 sig_cn_org=None source=14.1 
   <para>
    As is standard in SQL, all functions return NULL, if any of the arguments
    are NULL.  This may create security risks on careless usage.
   </para>
________________________________________________________-->
   <para>
    按照 SQL 中的标准，只要任何参数是 NULL， 所有的函数都会返回 NULL。在不当使用时这可能会导致安全风险。
   </para>
<!-- pgdoc-cn_end sig_en=45e3fcdac2c3d85fa47a4e50712c2e73 -->
  </sect3>

  <sect3>
<!-- pgdoc-cn_start sig_en=13690e72ec06e9e3b1b57d79bd38fba4 sig_cn_org=None source=14.1 
   <title>Security Limitations</title>
________________________________________________________-->
   <title>安全性限制</title>
<!-- pgdoc-cn_end sig_en=13690e72ec06e9e3b1b57d79bd38fba4 -->

<!-- pgdoc-cn_start sig_en=4c37f2ccbbb4a1930ac5af0b8425da9d sig_cn_org=None source=14.1 
   <para>
    All <filename>pgcrypto</filename> functions run inside the database server.
    That means that all
    the data and passwords move between <filename>pgcrypto</filename> and client
    applications in clear text.  Thus you must:
   </para>
________________________________________________________-->
   <para>
    所有<filename>pgcrypto</filename>函数都在数据库服务器内部运行。这意味着在<filename>pgcrypto</filename>和客户端应用之间移动的所有数据和口令都是明文。因此，你必须：
   </para>
<!-- pgdoc-cn_end sig_en=4c37f2ccbbb4a1930ac5af0b8425da9d -->

   <orderedlist>
    <listitem>
<!-- pgdoc-cn_start sig_en=efccd334fbca2984db554b7e3f26e826 sig_cn_org=None source=14.1 
     <para>Connect locally or use SSL connections.</para>
________________________________________________________-->
     <para>本地连接或者使用 SSL 连接。</para>
<!-- pgdoc-cn_end sig_en=efccd334fbca2984db554b7e3f26e826 -->
    </listitem>
    <listitem>
<!-- pgdoc-cn_start sig_en=1e45259ec0ccb5166d2ec8b75d4c27da sig_cn_org=None source=14.1 
     <para>Trust both system and database administrator.</para>
________________________________________________________-->
     <para>信任系统管理员和数据库管理员。</para>
<!-- pgdoc-cn_end sig_en=1e45259ec0ccb5166d2ec8b75d4c27da -->
    </listitem>
   </orderedlist>

<!-- pgdoc-cn_start sig_en=793c475c71e96e1de6e08ec272a1707e sig_cn_org=None source=14.1 
   <para>
    If you cannot, then better do crypto inside client application.
   </para>
________________________________________________________-->
   <para>
    如果你不能这样做，那么最好在客户端应用中进行加密。
   </para>
<!-- pgdoc-cn_end sig_en=793c475c71e96e1de6e08ec272a1707e -->

<!-- pgdoc-cn_start sig_en=768b17bda9d0d221f3b1711cc7914456 sig_cn_org=None source=14.1 
   <para>
    The implementation does not resist
    <ulink url="https://en.wikipedia.org/wiki/Side-channel_attack">side-channel
    attacks</ulink>.  For example, the time required for
    a <filename>pgcrypto</filename> decryption function to complete varies among
    ciphertexts of a given size.
   </para>
________________________________________________________-->
   <para>
    该实现无法抵抗
    <ulink url="https://en.wikipedia.org/wiki/Side-channel_attack">
    侧信道攻击</ulink>。例如，一个<filename>pgcrypto</filename>解密函
    数完成所需的时间是随着密文尺寸变化的。
   </para>
<!-- pgdoc-cn_end sig_en=768b17bda9d0d221f3b1711cc7914456 -->
  </sect3>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc sig_cn_org=None source=14.1 
  <title>Author</title>
________________________________________________________-->
  <title>作者</title>
<!-- pgdoc-cn_end sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc -->

<!-- pgdoc-cn_start sig_en=ddd2d19363eadd09382066ae710d5af5 sig_cn_org=None source=14.1 
  <para>
   Marko Kreen <email>markokr@gmail.com</email>
  </para>
________________________________________________________-->
  <para>
   Marko Kreen <email>markokr@gmail.com</email>
  </para>
<!-- pgdoc-cn_end sig_en=ddd2d19363eadd09382066ae710d5af5 -->

<!-- pgdoc-cn_start sig_en=5947de8194cfb3139f42776c15ea9c97 sig_cn_org=None source=14.1 
  <para>
   <filename>pgcrypto</filename> uses code from the following sources:
  </para>
________________________________________________________-->
  <para>
   <filename>pgcrypto</filename>使用了来自下列源码的代码：
  </para>
<!-- pgdoc-cn_end sig_en=5947de8194cfb3139f42776c15ea9c97 -->

  <informaltable>
   <tgroup cols="3">
    <thead>
<!-- pgdoc-cn_start sig_en=161da658df138de9d643f426f962d6d3 sig_cn_org=None source=14.1 
     <row>
      <entry>Algorithm</entry>
      <entry>Author</entry>
      <entry>Source origin</entry>
     </row>
________________________________________________________-->
     <row>
      <entry>算法</entry>
      <entry>作者</entry>
      <entry>源码起源</entry>
     </row>
<!-- pgdoc-cn_end sig_en=161da658df138de9d643f426f962d6d3 -->
    </thead>
    <tbody>
<!-- pgdoc-cn_start sig_en=0589513bae1820cae3e7119e97ade878 sig_cn_org=None source=14.1 
     <row>
      <entry>DES crypt</entry>
      <entry>David Burren and others</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
________________________________________________________-->
     <row>
      <entry>DES crypt</entry>
      <entry>David Burren 等</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
<!-- pgdoc-cn_end sig_en=0589513bae1820cae3e7119e97ade878 -->
<!-- pgdoc-cn_start sig_en=d2eadf5d46eeda9ee7f224f2a59871ce sig_cn_org=None source=14.1 
     <row>
      <entry>MD5 crypt</entry>
      <entry>Poul-Henning Kamp</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
________________________________________________________-->
     <row>
      <entry>MD5 crypt</entry>
      <entry>Poul-Henning Kamp</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
<!-- pgdoc-cn_end sig_en=d2eadf5d46eeda9ee7f224f2a59871ce -->
<!-- pgdoc-cn_start sig_en=8e7984d0d2557a3a39d83108428cb351 sig_cn_org=None source=14.1 
     <row>
      <entry>Blowfish crypt</entry>
      <entry>Solar Designer</entry>
      <entry>www.openwall.com</entry>
     </row>
________________________________________________________-->
     <row>
      <entry>Blowfish crypt</entry>
      <entry>Solar Designer</entry>
      <entry>www.openwall.com</entry>
     </row>
<!-- pgdoc-cn_end sig_en=8e7984d0d2557a3a39d83108428cb351 -->
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

</sect1>
