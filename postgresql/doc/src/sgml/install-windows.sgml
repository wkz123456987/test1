<!-- doc/src/sgml/install-windows.sgml -->

<chapter id="install-windows">
<!-- pgdoc-cn_start sig_en=d033f5c85d7049103ba8a175b22f0963 sig_cn_org=None source=14.1 
 <title>Installation from Source Code on <productname>Windows</productname></title>
________________________________________________________-->
 <title>在<productname>Windows</productname>上从源代码安装</title>
<!-- pgdoc-cn_end sig_en=d033f5c85d7049103ba8a175b22f0963 -->

<!-- pgdoc-cn_start sig_en=3e51b173bfb1180fc77313af28c87d1b sig_cn_org=None source=14.1 
 <indexterm>
  <primary>installation</primary>
  <secondary>on Windows</secondary>
 </indexterm>
________________________________________________________-->
 <indexterm>
  <primary>installation</primary>
  <secondary>on Windows</secondary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=3e51b173bfb1180fc77313af28c87d1b -->

<!-- pgdoc-cn_start sig_en=58d72bd61200d7780ecb493cfafc4c53 sig_cn_org=None source=14.1 
 <para>
  It is recommended that most users download the binary distribution for
  Windows, available as a graphical installer package
  from the <productname>PostgreSQL</productname> website at
  <ulink url="https://www.postgresql.org/download/"></ulink>. Building from source
  is only intended for people developing <productname>PostgreSQL</productname>
  or extensions.
 </para>
________________________________________________________-->
 <para>
  对于大部分用户，推荐下载Windows的二进制发布，它在<productname>PostgreSQL</productname>
  的网站 <ulink url="https://www.postgresql.org/download/"></ulink>上作为一个图形化安装包可供下载。从源代码构建的方式只适合于希望开发或者扩展
  <productname>PostgreSQL</productname>的人们。
 </para>
<!-- pgdoc-cn_end sig_en=58d72bd61200d7780ecb493cfafc4c53 -->

<!-- pgdoc-cn_start sig_en=fe7d83efc19810083246884895640ee2 sig_cn_org=6ae5fce0cc15bcbab4d555767041c1e0 source=15.7 
 <para>
  There are several different ways of building PostgreSQL on
  <productname>Windows</productname>. The simplest way to build with
  Microsoft tools is to install <productname>Visual Studio 2022</productname>
  and use the included compiler. It is also possible to build with the full
  <productname>Microsoft Visual C++ 2013 to 2022</productname>.
  In some cases that requires the installation of the
  <productname>Windows SDK</productname> in addition to the compiler.
 </para>
________________________________________________________-->
 <para>
  有几种不同的方法可以在<productname>Windows</productname>上构建PostgreSQL。
  使用Microsoft工具构建的最简单方法是安装<productname>Visual Studio 2022</productname>
  并使用附带的编译器。也可以使用完整的
  <productname>Microsoft Visual C++ 2013 to 2022</productname>进行构建。
  在某些情况下，这需要安装
  <productname>Windows SDK</productname>以及编译器。
</para>
<!-- pgdoc-cn_end sig_en=fe7d83efc19810083246884895640ee2 -->

<!-- pgdoc-cn_start sig_en=bf9e417bc872aa325183e454e64a9895 sig_cn_org=None source=14.1 
 <para>
  It is also possible to build PostgreSQL using the GNU compiler tools
  provided by <productname>MinGW</productname>, or using
  <productname>Cygwin</productname> for older versions of
  <productname>Windows</productname>.
 </para>
________________________________________________________-->
 <para>
  也可以使用由<productname>MinGW</productname>提供的GNU编译器工具来构建PostgreSQL，或者使用适合于旧版本<productname>Windows</productname>的<productname>Cygwin</productname>。
 </para>
<!-- pgdoc-cn_end sig_en=bf9e417bc872aa325183e454e64a9895 -->

<!-- pgdoc-cn_start sig_en=00a70c50a38f9516cdb637be52d196e2 sig_cn_org=None source=14.1 
 <para>
  Building using <productname>MinGW</productname> or
  <productname>Cygwin</productname> uses the normal build system, see
  <xref linkend="installation"/> and the specific notes in
  <xref linkend="installation-notes-mingw"/> and <xref linkend="installation-notes-cygwin"/>.
  To produce native 64 bit binaries in these environments, use the tools from
  <productname>MinGW-w64</productname>. These tools can also be used to
  cross-compile for 32 bit and 64 bit <productname>Windows</productname>
  targets on other hosts, such as <productname>Linux</productname> and
  <productname>macOS</productname>.
  <productname>Cygwin</productname> is not recommended for running a
  production server, and it should only be used for running on
  older versions of <productname>Windows</productname> where
  the native build does not work. The official
  binaries are built using <productname>Visual Studio</productname>.
 </para>
________________________________________________________-->
 <para>
  使用<productname>MinGW</productname>或<productname>Cygwin</productname>的构建用到普通构建系统，见<xref linkend="installation"/>、<xref linkend="installation-notes-mingw"/>和<xref linkend="installation-notes-cygwin"/>。在这些环境下，要产生原生的64位二进制代码，请使用<productname>MinGW-w64</productname>中的工具。这些工具同样可以被用于在32位和64位 <productname>Windows</productname>上交叉编译其他主机上的目标，例如<productname>Linux</productname>和<productname>macOS</productname>。不推荐将<productname>Cygwin</productname>用于一个产品服务器，它只应被用于老版本的<productname>Windows</productname>，因为在这些系统中原生构建无法工作，例如<productname>Windows 98</productname>。官方的二进制代码使用<productname>Visual Studio</productname>构建。
 </para>
<!-- pgdoc-cn_end sig_en=00a70c50a38f9516cdb637be52d196e2 -->

<!-- pgdoc-cn_start sig_en=dea6de1d649e21844c025654da76847e sig_cn_org=None source=14.1 
 <para>
  Native builds of <application>psql</application> don't support command
  line editing. The <productname>Cygwin</productname> build does support
  command line editing, so it should be used where psql is needed for
  interactive use on  <productname>Windows</productname>.
 </para>
________________________________________________________-->
 <para>
  <application>psql</application>的原生构建不支持命令行编辑。<productname>Cygwin</productname>构建能支持命令行编辑，因此如果需要在<productname>Windows</productname>上交互式地使用psql可以用到它。
 </para>
<!-- pgdoc-cn_end sig_en=dea6de1d649e21844c025654da76847e -->

 <sect1 id="install-windows-full">
<!-- pgdoc-cn_start sig_en=bca9545c60ad5e8fbe626f6c3b553c29 sig_cn_org=None source=14.1 
  <title>Building with <productname>Visual C++</productname> or the
  <productname>Microsoft Windows SDK</productname></title>
________________________________________________________-->
  <title>使用<productname>Visual C++</productname>或<productname>Microsoft Windows SDK</productname>构建</title>
<!-- pgdoc-cn_end sig_en=bca9545c60ad5e8fbe626f6c3b553c29 -->

<!-- pgdoc-cn_start sig_en=d67bda10ed1bc2951dc5fe76f9a0dfc2 sig_cn_org=edb34c075e0f03117af49e54dc9632dd source=15.7 
 <para>
  PostgreSQL can be built using the Visual C++ compiler suite from Microsoft.
  These compilers can be either from <productname>Visual Studio</productname>,
  <productname>Visual Studio Express</productname> or some versions of the
  <productname>Microsoft Windows SDK</productname>. If you do not already have a
  <productname>Visual Studio</productname> environment set up, the easiest
  ways are to use the compilers from
  <productname>Visual Studio 2022</productname> or those in the
  <productname>Windows SDK 10</productname>, which are both free downloads
  from Microsoft.
 </para>
________________________________________________________-->
 <para>
  PostgreSQL可以使用微软的Visual C++编译器套件构建。
  这些编译器可以来自<productname>Visual Studio</productname>、
  <productname>Visual Studio Express</productname>或者一些版本的
  <productname>Microsoft Windows SDK</productname>。如果您还没有设置
  <productname>Visual Studio</productname>环境，最简单的方法是使用
  <productname>Visual Studio 2022</productname>中的编译器或者
  <productname>Windows SDK 10</productname>中的编译器，这两者都可以
  从微软免费下载。
</para>
<!-- pgdoc-cn_end sig_en=d67bda10ed1bc2951dc5fe76f9a0dfc2 -->

<!-- pgdoc-cn_start sig_en=cfc22382ea665822b8e001e63c6b8d9c sig_cn_org=c4e34d2cf92d9af2ac5b60ed82de7c97 source=15.7 
 <para>
  Both 32-bit and 64-bit builds are possible with the Microsoft Compiler suite.
  32-bit PostgreSQL builds are possible with
  <productname>Visual Studio 2013</productname> to
  <productname>Visual Studio 2022</productname>,
  as well as standalone Windows SDK releases 8.1a to 10.
  64-bit PostgreSQL builds are supported with
  <productname>Microsoft Windows SDK</productname> version 8.1a to 10 or
  <productname>Visual Studio 2013</productname> and above. Compilation
  is supported down to <productname>Windows 7</productname> and
  <productname>Windows Server 2008 R2 SP1</productname> when building with
  <productname>Visual Studio 2013</productname> to
  <productname>Visual Studio 2022</productname>.
   <!-&minus;
       For 2013 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2013-sysrequirements-vs
       For 2015 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2015-sysrequirements-vs
       For 2017 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2017-system-requirements-vs
       For 2019 requirements:
       https://docs.microsoft.com/en-us/visualstudio/releases/2019/system-requirements
       For 2022 requirements:
       https://docs.microsoft.com/en-us/visualstudio/releases/2022/system-requirements
   -&minus;>
 </para>
________________________________________________________-->
 <para>
  使用Microsoft编译套件可以进行32位和64位构建。
  可以使用32位PostgreSQL构建
  <productname>Visual Studio 2013</productname>到
  <productname>Visual Studio 2022</productname>，
  以及独立的Windows SDK版本8.1a到10。
  支持64位PostgreSQL构建
  <productname>Microsoft Windows SDK</productname>版本8.1a到10或
  <productname>Visual Studio 2013</productname>及以上版本。编译
  支持从<productname>Windows 7</productname>和
  <productname>Windows Server 2008 R2 SP1</productname>开始，
  使用<productname>Visual Studio 2013</productname>到
  <productname>Visual Studio 2022</productname>进行构建。
   <!--
       对于2013年的要求：
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2013-sysrequirements-vs
       对于2015年的要求：
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2015-sysrequirements-vs
       对于2017年的要求：
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2017-system-requirements-vs
       对于2019年的要求：
       https://docs.microsoft.com/en-us/visualstudio/releases/2019/system-requirements
       对于2022年的要求：
       https://docs.microsoft.com/en-us/visualstudio/releases/2022/system-requirements
   -->
 </para>
<!-- pgdoc-cn_end sig_en=cfc22382ea665822b8e001e63c6b8d9c -->

<!-- pgdoc-cn_start sig_en=5ee3fc7f3c4c2ed358b790c0a0cfc593 sig_cn_org=None source=14.1 
 <para>
  The tools for building using <productname>Visual C++</productname> or
  <productname>Platform SDK</productname> are in the
  <filename>src\tools\msvc</filename> directory. When building, make sure
  there are no tools from <productname>MinGW</productname> or
  <productname>Cygwin</productname> present in your system PATH. Also, make
  sure you have all the required Visual C++ tools available in the PATH. In
  <productname>Visual Studio</productname>, start the
  <application>Visual Studio Command Prompt</application>.
  If you wish to build a 64-bit version, you must use the 64-bit version of
  the command, and vice versa.
  Starting with <productname>Visual Studio 2017</productname> this can be
  done from the command line using <command>VsDevCmd.bat</command>, see
  <command>-help</command> for the available options and their default values.
  <command>vsvars32.bat</command> is available in
  <productname>Visual Studio 2015</productname> and earlier versions for the
  same purpose.
  From the <application>Visual Studio Command Prompt</application>, you can
  change the targeted CPU architecture, build type, and target OS by using the
  <command>vcvarsall.bat</command> command, e.g.,
  <command>vcvarsall.bat x64 10.0.10240.0</command> to target Windows 10
  with a 64-bit release build. See <command>-help</command> for the other
  options of <command>vcvarsall.bat</command>. All commands should be run from
  the <filename>src\tools\msvc</filename> directory.
 </para>
________________________________________________________-->
 <para>
  使用<productname>Visual C++</productname>或<productname>Platform SDK</productname>构建的工具在<filename>src\tools\msvc</filename>目录中。在构建时，请确定在系统路径中没有来自于<productname>MinGW</productname>或的<productname>Cygwin</productname>工具。同样，确保所有需要的Visual C++工具都在PATH中。在<productname>Visual Studio</productname>中，启动<application>Visual Studio Command Prompt</application>。如果你希望构建一个64位版本，你必须使用64位版本的命令，反之亦然。在<productname>Microsoft Windows SDK</productname>中，启动该SDK在启动菜单中的<application>CMD shell</application>。在最近的SDK版本中你可以使用<command>setenv</command>命令改变目标CPU架构、构建类型以及目标OS，例如<command>setenv /x86 /release /xp</command>会设置为Windows XP或更高版本上的32位发布构建。使用<command>/?</command>来了解<command>setenv</command>的其他选项。所有命令应该从<filename>src\tools\msvc</filename>目录运行。
 </para>
<!-- pgdoc-cn_end sig_en=5ee3fc7f3c4c2ed358b790c0a0cfc593 -->

<!-- pgdoc-cn_start sig_en=2aae718e0205c86340b83e8a443cf89a sig_cn_org=b064746a6e56d85b51f8f70be600c268 source=15.7 
 <para>
  Before you build, you can create the file <filename>config.pl</filename>
  to reflect any configuration options you want to change, or the paths to
  any third party libraries to use. The complete configuration is determined
  by first reading and parsing the file <filename>config_default.pl</filename>,
  and then apply any changes from <filename>config.pl</filename>. For example,
  to specify the location of your <productname>Python</productname> installation,
  put the following in <filename>config.pl</filename>:
<programlisting>
$config->{python} = 'c:\python310';
</programlisting>
  You only need to specify those parameters that are different from what's in
  <filename>config_default.pl</filename>.
 </para>
________________________________________________________-->
 <para>
  在构建之前，您可以创建文件<filename>config.pl</filename>来反映您想要更改的任何配置选项，
  或要使用的任何第三方库的路径。完整的配置是通过首先读取和解析文件
  <filename>config_default.pl</filename>，然后应用来自<filename>config.pl</filename>的任何更改来确定的。
  例如，要指定您的<productname>Python</productname>安装位置，
  将以下内容放入<filename>config.pl</filename>中：
<programlisting>
$config->{python} = 'c:\python310';
</programlisting>
  您只需要指定与<filename>config_default.pl</filename>中不同的那些参数。
</para>
<!-- pgdoc-cn_end sig_en=2aae718e0205c86340b83e8a443cf89a -->

<!-- pgdoc-cn_start sig_en=e7a0949acdf28b60b2fcbd618f5a8989 sig_cn_org=None source=14.1 
 <para>
  If you need to set any other environment variables, create a file called
  <filename>buildenv.pl</filename> and put the required commands there. For
  example, to add the path for bison when it's not in the PATH, create a file
  containing:
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>
________________________________________________________-->
 <para>
  如果你希望设置任何其他环境变量，可创建一个名为<filename>buildenv.pl</filename>的文件并将需要的命令放在其中。例如，要把不在PATH中的bison路径加上，创建一个包含以下内容的文件：
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>
<!-- pgdoc-cn_end sig_en=e7a0949acdf28b60b2fcbd618f5a8989 -->

<!-- pgdoc-cn_start sig_en=079e72584c7ffd4580a27e8a1bb208ac sig_cn_org=None source=14.1 
 <para>
  To pass additional command line arguments to the Visual Studio build
  command (msbuild or vcbuild):
<programlisting>
$ENV{MSBFLAGS}="/m";
</programlisting>
 </para>
________________________________________________________-->
 <para>
  传递更多的命令行参数到Visual Studio构建命令(msbuild 或 vcbuild):
<programlisting>
$ENV{MSBFLAGS}="/m";
</programlisting>
 </para>
<!-- pgdoc-cn_end sig_en=079e72584c7ffd4580a27e8a1bb208ac -->

 <sect2>
<!-- pgdoc-cn_start sig_en=e804d40235801c80bb53864c62e8d042 sig_cn_org=None source=14.1 
  <title>Requirements</title>
________________________________________________________-->
  <title>要求</title>
<!-- pgdoc-cn_end sig_en=e804d40235801c80bb53864c62e8d042 -->
<!-- pgdoc-cn_start sig_en=0d1a1e2fdc3ca14353214746d5b72ad5 sig_cn_org=None source=14.1 
  <para>
   The following additional products are required to build
   <productname>PostgreSQL</productname>. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      If your build environment doesn't ship with a supported version of the
      <productname>Microsoft Windows SDK</productname> it
      is recommended that you upgrade to the latest version (currently
      version 10), available for download from
      <ulink url="https://www.microsoft.com/download"></ulink>.
     </para>
     <para>
      You must always include the
      <application>Windows Headers and Libraries</application> part of the SDK.
      If you install a <productname>Windows SDK</productname>
      including the <application>Visual C++ Compilers</application>,
      you don't need <productname>Visual Studio</productname> to build.
      Note that as of Version 8.0a the Windows SDK no longer ships with a
      complete command-line build environment.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl is required to run the build generation scripts. MinGW
      or Cygwin Perl will not work. It must also be present in the PATH.
      Binaries can be downloaded from
      <ulink url="https://www.activestate.com"></ulink>
      (Note: version 5.8.3 or later is required,
      the free Standard Distribution is sufficient).
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
________________________________________________________-->
  <para>
   构建<productname>PostgreSQL</productname>时需要下列附加产品。使用<filename>config.pl</filename>文件来指定这些库所在的目录。

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      如果你的构建环境中没有一个受支持的<productname>Microsoft Windows SDK</productname>版本，推荐你升级到最新版（当前版本为10），可从<ulink url="https://www.microsoft.com/download"></ulink>下载。
     </para>
     <para>
      你必须总是包括SDK中的<application>Windows头文件和库</application>部分。如果你安装的是一个包括<application>Visual C++ 编译器</application>的<productname>Windows SDK</productname>，构建时不需要<productname>Visual Studio</productname>。注意在版本8.0a，Windows SDK中不再包括一个完整的命令行构建环境。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl被用来运行构建生成脚本。MinGW或Cygwin Perl是不符合要求的。AcitveState Perl也必须存在于PATH中。其二进制文件可以从<ulink url="https://www.activestate.com"></ulink>下载（注意：需要版本5.8.3及以上，免费标准发布就足够了）。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
<!-- pgdoc-cn_end sig_en=0d1a1e2fdc3ca14353214746d5b72ad5 -->
<!-- pgdoc-cn_start sig_en=7468786bbe1a9e0aa41e10f0808a958e sig_cn_org=7fc35e146e3e8baa804a6e38682c3624 source=15.7 
  <para>
   The following additional products are not required to get started,
   but are required to build the complete package. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.

   <variablelist>
    <varlistentry>
________________________________________________________-->
  <para>
   以下额外的产品并非必需即可开始使用，但是构建完整包时是必需的。使用<filename>config.pl</filename>文件指定库所在的目录。

   <variablelist>
    <varlistentry>
<!-- pgdoc-cn_end sig_en=7468786bbe1a9e0aa41e10f0808a958e -->
     <term><productname>ActiveState TCL</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=25f73b0a05649e12481fa9ed23816276 sig_cn_org=6223d3153afcbfaf4ffb7307712a5b81 source=15.7 
<para>
      Required for building <application>PL/Tcl</application> (Note: version
      8.4 is required, the free Standard Distribution is sufficient).
     </para>
________________________________________________________-->
<para>
      构建<application>PL/Tcl</application>所需（注意：需要版本8.4，免费的标准发行版就足够了）。
     </para>
<!-- pgdoc-cn_end sig_en=25f73b0a05649e12481fa9ed23816276 -->
</listitem>
    </varlistentry>

    <varlistentry>
<!-- pgdoc-cn_start sig_en=526f37cc39e67aabff3dea2dc2dacf36 sig_cn_org=d42d098dda6c2ab7e7e0c95f93749464 source=15.7 
     <term><productname>Bison</productname> and
      <productname>Flex</productname></term>
________________________________________________________-->
     <term><productname>Bison</productname>和<productname>Flex</productname></term>
<!-- pgdoc-cn_end sig_en=526f37cc39e67aabff3dea2dc2dacf36 -->
     <listitem>
<!-- pgdoc-cn_start sig_en=5c724e69ffe282b0ede0df402d37d2aa sig_cn_org=69b0fa4b2b9e73c709ca29b9ba530e6d source=15.7 
     <para>
      <productname>Bison</productname> and <productname>Flex</productname> are
      required to build from Git, but not required when building from a release
      file. Only <productname>Bison</productname> 1.875 or versions 2.2 and later
      will work. <productname>Flex</productname> must be version 2.5.31 or later.
     </para>
________________________________________________________-->
     <para>
      <productname>Bison</productname>和<productname>Flex</productname>是构建Git所需的，
      但在从发布文件构建时不需要。只有<productname>Bison</productname> 1.875或版本2.2及更高版本才能工作。
      <productname>Flex</productname>必须是2.5.31版本或更高版本。
     </para>
<!-- pgdoc-cn_end sig_en=5c724e69ffe282b0ede0df402d37d2aa -->

<!-- pgdoc-cn_start sig_en=900ece3535c0f7c9640186c67b661ee9 sig_cn_org=36d95951a1f2e9137b89b7d7c56cbd1a source=15.7 
     <para>
      Both <productname>Bison</productname> and <productname>Flex</productname>
      are included in the <productname>msys</productname> tool suite, available
      from <ulink url="http://www.mingw.org/wiki/MSYS"></ulink> as part of the
      <productname>MinGW</productname> compiler suite.
     </para>
________________________________________________________-->
     <para>
      <productname>Bison</productname>和<productname>Flex</productname>都包含在<productname>msys</productname>工具套件中，
      可在<ulink url="http://www.mingw.org/wiki/MSYS"></ulink>下载，作为<productname>MinGW</productname>编译器套件的一部分。
     </para>
<!-- pgdoc-cn_end sig_en=900ece3535c0f7c9640186c67b661ee9 -->

<!-- pgdoc-cn_start sig_en=945fa27cf8a3c645d16d799223af0a24 sig_cn_org=672284f0d37e3202d27780595ef7f9b0 source=15.7 
     <para>
      You will need to add the directory containing
      <filename>flex.exe</filename> and <filename>bison.exe</filename> to the
      PATH environment variable in <filename>buildenv.pl</filename> unless
      they are already in PATH. In the case of MinGW, the directory is the
      <filename>\msys\1.0\bin</filename> subdirectory of your MinGW
      installation directory.
     </para>
________________________________________________________-->
     <para>
      你需要将包含<filename>flex.exe</filename>和<filename>bison.exe</filename>的目录添加到<filename>buildenv.pl</filename>中的PATH环境变量中，除非它们已经在PATH中。在MinGW的情况下，该目录是你的MinGW安装目录的<filename>\msys\1.0\bin</filename>子目录。
     </para>
<!-- pgdoc-cn_end sig_en=945fa27cf8a3c645d16d799223af0a24 -->

     <note>
<!-- pgdoc-cn_start sig_en=7438d5682c38ba56ca9abfb7edf3b59e sig_cn_org=a1b06997d70f326d6b8e79063f6f4020 source=15.7 
      <para>
        The Bison distribution from GnuWin32 appears to have a bug that
        causes Bison to malfunction when installed in a directory with
        spaces in the name, such as the default location on English
        installations <filename>C:\Program Files\GnuWin32</filename>.
        Consider installing into <filename>C:\GnuWin32</filename> or use the
        NTFS short name path to GnuWin32 in your PATH environment setting
        (e.g., <filename>C:\PROGRA~1\GnuWin32</filename>).
       </para>
________________________________________________________-->
      <para>
        GnuWin32的Bison发行版似乎存在一个错误，导致Bison在安装在带有空格的目录中时出现故障，
        例如英文安装的默认位置<filename>C:\Program Files\GnuWin32</filename>。
        考虑安装到<filename>C:\GnuWin32</filename>或在您的PATH环境设置中使用GnuWin32的NTFS短名称路径
        （例如，<filename>C:\PROGRA~1\GnuWin32</filename>）。
       </para>
<!-- pgdoc-cn_end sig_en=7438d5682c38ba56ca9abfb7edf3b59e -->
     </note>

     </listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=a80976cde91da74f031368861ab14935 sig_cn_org=3511bc0968101f8f2e0ceca71c256104 source=15.7 
<para>
      Diff is required to run the regression tests, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></ulink>.
     </para>
________________________________________________________-->
<para>
      运行回归测试需要Diff，并可从<ulink url="http://gnuwin32.sourceforge.net"></ulink>下载。
     </para>
<!-- pgdoc-cn_end sig_en=a80976cde91da74f031368861ab14935 -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=7a997aa3c33867310bfd9d51c05063d9 sig_cn_org=844cc022a9d6319b985a60ddd904afbe source=15.7 
<para>
      Gettext is required to build with NLS support, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></ulink>. Note that binaries,
      dependencies and developer files are all needed.
     </para>
________________________________________________________-->
<para>
      Gettext是必须使用NLS支持构建的，并且可以从<ulink url="http://gnuwin32.sourceforge.net"></ulink>下载。
      请注意，需要所有的二进制文件、依赖项和开发者文件。
     </para>
<!-- pgdoc-cn_end sig_en=7a997aa3c33867310bfd9d51c05063d9 -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=ea3f005ceb749a4acf67ad026d2bc51e sig_cn_org=e2b89eadf5f9265fa685f2df9cbff3a8 source=15.7 
<para>
      Required for GSSAPI authentication support. MIT Kerberos can be
      downloaded from
      <ulink url="https://web.mit.edu/Kerberos/dist/index.html"></ulink>.
     </para>
________________________________________________________-->
<para>
      用于GSSAPI认证支持。MIT Kerberos可以从
      <ulink url="https://web.mit.edu/Kerberos/dist/index.html"></ulink>下载。
     </para>
<!-- pgdoc-cn_end sig_en=ea3f005ceb749a4acf67ad026d2bc51e -->
</listitem>
    </varlistentry>

    <varlistentry>
<!-- pgdoc-cn_start sig_en=9f44ad138b784d4b3163c4c4fbd9fcf9 sig_cn_org=d4c5ca36a63e6c8f018bd14928a2108c source=15.7 
     <term><productname>libxml2</productname> and
      <productname>libxslt</productname></term>
________________________________________________________-->
     <term><productname>libxml2</productname>和<productname>libxslt</productname></term>
<!-- pgdoc-cn_end sig_en=9f44ad138b784d4b3163c4c4fbd9fcf9 -->
     <listitem>
<!-- pgdoc-cn_start sig_en=f2304a94df2e734a33021e226ccf2911 sig_cn_org=42b9946cbba56ed239e6a1ec178e81ea source=15.7 
<para>
      Required for XML support. Binaries can be downloaded from
      <ulink url="https://zlatkovic.com/pub/libxml"></ulink> or source from
      <ulink url="http://xmlsoft.org"></ulink>. Note that libxml2 requires iconv,
      which is available from the same download location.
     </para>
________________________________________________________-->
<para>
      XML支持所需。二进制文件可从
      <ulink url="https://zlatkovic.com/pub/libxml"></ulink>下载，或从
      <ulink url="http://xmlsoft.org"></ulink>获取源代码。请注意，libxml2需要iconv，
      可从相同的下载位置获取。
     </para>
<!-- pgdoc-cn_end sig_en=f2304a94df2e734a33021e226ccf2911 -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>LZ4</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=5c674705fea2dd5fb55865a2dceb885a sig_cn_org=95c24771661ac19f004a0e1f7fccab58 source=15.7 
<para>
      Required for supporting <productname>LZ4</productname> compression.
      Binaries and source can be downloaded from
      <ulink url="https://github.com/lz4/lz4/releases"></ulink>.
     </para>
________________________________________________________-->
<para>
      支持<productname>LZ4</productname>压缩所需。
      可从以下链接下载二进制文件和源代码
      <ulink url="https://github.com/lz4/lz4/releases"></ulink>。
     </para>
<!-- pgdoc-cn_end sig_en=5c674705fea2dd5fb55865a2dceb885a -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Zstandard</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=ea928b734fc8144d710b146458e7ecaa sig_cn_org=acff05fb9f9e50b4e1db892709a2745a source=15.7 
<para>
      Required for supporting <productname>Zstandard</productname> compression.
      Binaries and source can be downloaded from
      <ulink url="https://github.com/facebook/zstd/releases"></ulink>.
     </para>
________________________________________________________-->
<para>
      支持<productname>Zstandard</productname>压缩所需。
      可从以下链接下载二进制文件和源代码
      <ulink url="https://github.com/facebook/zstd/releases"></ulink>。
     </para>
<!-- pgdoc-cn_end sig_en=ea928b734fc8144d710b146458e7ecaa -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>OpenSSL</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=b350dd05f9fb0945157e1e39ea2be64e sig_cn_org=0f226d1383c5a6e6304d92af20e69472 source=15.7 
<para>
      Required for SSL support. Binaries can be downloaded from
      <ulink url="https://slproweb.com/products/Win32OpenSSL.html"></ulink>
      or source from <ulink url="https://www.openssl.org"></ulink>.
     </para>
________________________________________________________-->
<para>
      用于SSL支持。二进制文件可从
      <ulink url="https://slproweb.com/products/Win32OpenSSL.html"></ulink>
      下载，或从<ulink url="https://www.openssl.org"></ulink>获取。
     </para>
<!-- pgdoc-cn_end sig_en=b350dd05f9fb0945157e1e39ea2be64e -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=89a227d5ee2c172dd5d07cb7e0681a01 sig_cn_org=5867558eaa7bcb2cb11915e2f8afe3df source=15.7 
<para>
      Required for UUID-OSSP support (contrib only). Source can be
      downloaded from
      <ulink url="http://www.ossp.org/pkg/lib/uuid/"></ulink>.
     </para>
________________________________________________________-->
<para>
      仅在贡献中需要UUID-OSSP支持。源代码可以从
      <ulink url="http://www.ossp.org/pkg/lib/uuid/"></ulink>下载。
     </para>
<!-- pgdoc-cn_end sig_en=89a227d5ee2c172dd5d07cb7e0681a01 -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=f21a3a8f8bf398e88306b3768fba793f sig_cn_org=88dd1a254b3ca2ce56362ab47a0a37b3 source=15.7 
<para>
      Required for building <application>PL/Python</application>. Binaries can
      be downloaded from <ulink url="https://www.python.org"></ulink>.
     </para>
________________________________________________________-->
<para>
      构建<application>PL/Python</application>所需。二进制文件可从<ulink url="https://www.python.org"></ulink>下载。
     </para>
<!-- pgdoc-cn_end sig_en=f21a3a8f8bf398e88306b3768fba793f -->
</listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
     <listitem>
<!-- pgdoc-cn_start sig_en=dc8c282cfb29e4f908663cf5a7297317 sig_cn_org=e2dd8a4ba65290555fa70238c5a795b7 source=15.7 
<para>
      Required for compression support in <application>pg_dump</application>
      and <application>pg_restore</application>. Binaries can be downloaded
      from <ulink url="https://www.zlib.net"></ulink>.
     </para>
________________________________________________________-->
<para>
      在<application>pg_dump</application>和<application>pg_restore</application>中需要压缩支持。
      可以从<ulink url="https://www.zlib.net"></ulink>下载二进制文件。
     </para>
<!-- pgdoc-cn_end sig_en=dc8c282cfb29e4f908663cf5a7297317 -->
</listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=11c746130616a0a3565b57073b462bd7 sig_cn_org=None source=14.1 
  <title>Special Considerations for 64-Bit Windows</title>
________________________________________________________-->
  <title>针对64位Windows的特殊考虑</title>
<!-- pgdoc-cn_end sig_en=11c746130616a0a3565b57073b462bd7 -->

<!-- pgdoc-cn_start sig_en=9dd8c669997adb8a86437f95619640e5 sig_cn_org=None source=14.1 
  <para>
   PostgreSQL will only build for the x64 architecture on 64-bit Windows, there
   is no support for Itanium processors.
  </para>
________________________________________________________-->
  <para>
   在64位Windows上，PostgreSQL只能为x64架构构建，因此无法支持安腾处理器。
  </para>
<!-- pgdoc-cn_end sig_en=9dd8c669997adb8a86437f95619640e5 -->

<!-- pgdoc-cn_start sig_en=aa98a027003278e40e41856b6dfbfc7e sig_cn_org=None source=14.1 
  <para>
   Mixing 32- and 64-bit versions in the same build tree is not supported.
   The build system will automatically detect if it's running in a 32- or
   64-bit environment, and build PostgreSQL accordingly. For this reason, it
   is important to start the correct command prompt before building.
  </para>
________________________________________________________-->
  <para>
   不支持在同一个构建树中混合32位和64位版本。构建系统会自动检测它运行在32位还是64位环境中，然后相应地构建PostgreSQL。鉴于此，在构建前启动正确的命令提示很重要。
  </para>
<!-- pgdoc-cn_end sig_en=aa98a027003278e40e41856b6dfbfc7e -->

<!-- pgdoc-cn_start sig_en=fee9ab2adc01097828503e6215cc47ea sig_cn_org=d4ff379f55ff52f081d879d547b4e8f4 source=15.7 
  <para>
   To use a server-side third party library such as <productname>Python</productname> or
   <productname>OpenSSL</productname>, this library <emphasis>must</emphasis> also be
   64-bit. There is no support for loading a 32-bit library in a 64-bit
   server. Several of the third party libraries that PostgreSQL supports may
   only be available in 32-bit versions, in which case they cannot be used with
   64-bit PostgreSQL.
  </para>
________________________________________________________-->
  <para>
   要使用服务器端的第三方库，如<productname>Python</productname>或<productname>OpenSSL</productname>，
   此库<emphasis>必须</emphasis>也是64位的。在64位服务器上不支持加载32位库。
   PostgreSQL支持的几个第三方库可能只有32位版本，这种情况下它们无法与64位的PostgreSQL一起使用。
</para>
<!-- pgdoc-cn_end sig_en=fee9ab2adc01097828503e6215cc47ea -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=db58b542ec54e31bc9bbecf005deb171 sig_cn_org=None source=14.1 
  <title>Building</title>
________________________________________________________-->
  <title>构建</title>
<!-- pgdoc-cn_end sig_en=db58b542ec54e31bc9bbecf005deb171 -->

<!-- pgdoc-cn_start sig_en=7a6e1553030f796920ff84c9f47426b0 sig_cn_org=None source=14.1 
  <para>
   To build all of PostgreSQL in release configuration (the default), run the
   command:
<screen>
<userinput>build</userinput>
</screen>
   To build all of PostgreSQL in debug configuration, run the command:
<screen>
<userinput>build DEBUG</userinput>
</screen>
   To build just a single project, for example psql, run the commands:
<screen>
<userinput>build psql</userinput>
<userinput>build DEBUG psql</userinput>
</screen>
   To change the default build configuration to debug, put the following
   in the <filename>buildenv.pl</filename> file:
<programlisting>
$ENV{CONFIG}="Debug";
</programlisting>
  </para>
________________________________________________________-->
  <para>
   要在发行配置中构建PostgreSQL的所有部分（默认），运行命令：
<screen>
<userinput>build</userinput>
</screen>
   要在调试配置中构建PostgreSQL的所有部分，运行命令：
<screen>
<userinput>build DEBUG</userinput>
</screen>
   要构建单独一个对象，例如psql，运行命令：
<screen>
<userinput>build psql</userinput>
<userinput>build DEBUG psql</userinput>
</screen>
   要将默认的构建配置改变成调试，将下面的内容放在<filename>buildenv.pl</filename>文件中：
<programlisting>
$ENV{CONFIG}="Debug";
</programlisting>
  </para>
<!-- pgdoc-cn_end sig_en=7a6e1553030f796920ff84c9f47426b0 -->

<!-- pgdoc-cn_start sig_en=64a01600491231db402bb2e3d20d9cc7 sig_cn_org=None source=14.1 
  <para>
   It is also possible to build from inside the Visual Studio GUI. In this
   case, you need to run:
<screen>
<userinput>perl mkvcbuild.pl</userinput>
</screen>
   from the command prompt, and then open the generated
   <filename>pgsql.sln</filename> (in the root directory of the source tree)
   in Visual Studio.
  </para>
________________________________________________________-->
  <para>
   也可以在Visual Studio的图形界面中进行构建。在这种情况下，你需要在命令提示符下运行：
<screen>
<userinput>perl mkvcbuild.pl</userinput>
</screen>
   然后在Visual Studio中打开生成的<filename>pgsql.sln</filename>（在源代码树的根目录中）。
  </para>
<!-- pgdoc-cn_end sig_en=64a01600491231db402bb2e3d20d9cc7 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=8ce0cd491283dbb3b88371b2b0744a37 sig_cn_org=None source=14.1 
  <title>Cleaning and Installing</title>
________________________________________________________-->
  <title>清理和安装</title>
<!-- pgdoc-cn_end sig_en=8ce0cd491283dbb3b88371b2b0744a37 -->

<!-- pgdoc-cn_start sig_en=a1629343dba44cccb8111f18461c277d sig_cn_org=None source=14.1 
  <para>
   Most of the time, the automatic dependency tracking in Visual Studio will
   handle changed files. But if there have been large changes, you may need
   to clean the installation. To do this, simply run the
   <filename>clean.bat</filename> command, which will automatically clean out
   all generated files. You can also run it with the
   <parameter>dist</parameter> parameter, in which case it will behave like
   <userinput>make distclean</userinput> and remove the flex/bison output files
   as well.
  </para>
________________________________________________________-->
  <para>
   在大部分时间里，Visual Studio的自动依赖跟踪会处理发生改变的文件。但是如果发生了大量的改变，你也许需要清理整个安装。为此，只要运行<filename>clean.bat</filename>命令，它将会自动清除所有生成的文件。你也可以使用<parameter>dist</parameter>参数运行它，这种情况下它的效果和<userinput>make distclean</userinput>一样，并且会移除flex/bison的输出文件。
  </para>
<!-- pgdoc-cn_end sig_en=a1629343dba44cccb8111f18461c277d -->

<!-- pgdoc-cn_start sig_en=77d301f85a1557bfcf4a4de0fc3fb2ff sig_cn_org=None source=14.1 
  <para>
   By default, all files are written into a subdirectory of the
   <filename>debug</filename> or <filename>release</filename> directories. To
   install these files using the standard layout, and also generate the files
   required to initialize and use the database, run the command:
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>
________________________________________________________-->
  <para>
   默认情况下，所有的文件都被写入到名为<filename>debug</filename>或<filename>release</filename>的子目录中。要将这些文件以标准布局进行安装并且生成初始化和使用数据库所需的文件 ，运行命令：
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>
<!-- pgdoc-cn_end sig_en=77d301f85a1557bfcf4a4de0fc3fb2ff -->

<!-- pgdoc-cn_start sig_en=f62d4ce4f865039666c19a8e1771f074 sig_cn_org=None source=14.1 
  <para>
   If you want to install only the client applications and
   interface libraries, then you can use these commands:
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
________________________________________________________-->
  <para>
   如果你想只安装客户端应用和接口库，那么你可以使用这些命令：
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
<!-- pgdoc-cn_end sig_en=f62d4ce4f865039666c19a8e1771f074 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=102d497ae3ef997ace5ccecbc5b1389f sig_cn_org=None source=14.1 
  <title>Running the Regression Tests</title>
________________________________________________________-->
  <title>运行回归测试</title>
<!-- pgdoc-cn_end sig_en=102d497ae3ef997ace5ccecbc5b1389f -->

<!-- pgdoc-cn_start sig_en=63dcfde4ba1d1ef0e0ff927be1f229cd sig_cn_org=ac99a478c08f0280cd31446354bde458 source=15.7 
  <para>
   To run the regression tests, make sure you have completed the build of all
   required parts first. Also, make sure that the DLLs required to load all
   parts of the system (such as the Perl and Python DLLs for the procedural
   languages) are present in the system path. If they are not, set it through
   the <filename>buildenv.pl</filename> file. To run the tests, run one of
   the following commands from the <filename>src\tools\msvc</filename>
   directory:
<screen>
<userinput>vcregress check</userinput>
<userinput>vcregress installcheck</userinput>
<userinput>vcregress plcheck</userinput>
<userinput>vcregress contribcheck</userinput>
<userinput>vcregress modulescheck</userinput>
<userinput>vcregress ecpgcheck</userinput>
<userinput>vcregress isolationcheck</userinput>
<userinput>vcregress bincheck</userinput>
<userinput>vcregress recoverycheck</userinput>
<userinput>vcregress taptest</userinput>
</screen>

   To change the schedule used (default is parallel), append it to the
   command line like:
<screen>
<userinput>vcregress check serial</userinput>
</screen>

   <command>vcregress taptest</command> can be used to run the TAP tests
   of a target directory, like:
<screen>
<userinput>vcregress taptest src\bin\initdb\</userinput>
</screen>

   For more information about the regression tests, see
   <xref linkend="regress"/>.
  </para>
________________________________________________________-->
  <para>
   要运行回归测试，请确保您已经完成了所有必需部分的构建。此外，请确保加载系统的所有部分所需的DLL（例如过程语言的Perl和Python DLL）存在于系统路径中。如果不存在，请通过<filename>buildenv.pl</filename>文件设置。要运行测试，请从<filename>src\tools\msvc</filename>目录运行以下命令之一：
<screen>
<userinput>vcregress check</userinput>
<userinput>vcregress installcheck</userinput>
<userinput>vcregress plcheck</userinput>
<userinput>vcregress contribcheck</userinput>
<userinput>vcregress modulescheck</userinput>
<userinput>vcregress ecpgcheck</userinput>
<userinput>vcregress isolationcheck</userinput>
<userinput>vcregress bincheck</userinput>
<userinput>vcregress recoverycheck</userinput>
<userinput>vcregress taptest</userinput>
</screen>

   要更改使用的调度（默认为并行），请将其附加到命令行，如下所示：
<screen>
<userinput>vcregress check serial</userinput>
</screen>

   <command>vcregress taptest</command>可用于运行目标目录的TAP测试，例如：
<screen>
<userinput>vcregress taptest src\bin\initdb\</userinput>
</screen>

   有关回归测试的更多信息，请参见<xref linkend="regress"/>。
</para>
<!-- pgdoc-cn_end sig_en=63dcfde4ba1d1ef0e0ff927be1f229cd -->

<!-- pgdoc-cn_start sig_en=fdc2f5b3d3aa603edd1cae5404d3916b sig_cn_org=a7aaf30e15a3599fb42f8482050a38f5 source=15.7 
  <para>
   Running the regression tests on client programs with
   <command>vcregress bincheck</command>, on recovery tests with
   <command>vcregress recoverycheck</command>, or TAP tests specified with
   <command>vcregress taptest</command> requires an additional Perl module
   to be installed:
   <variablelist>
    <varlistentry>
     <term><productname>IPC::Run</productname></term>
     <listitem><para>
      As of this writing, <literal>IPC::Run</literal> is not included in the
      ActiveState Perl installation, nor in the ActiveState Perl Package
      Manager (PPM) library. To install, download the
      <filename>IPC-Run-&lt;version&gt;.tar.gz</filename> source archive from CPAN,
      at <ulink url="https://metacpan.org/release/IPC-Run"></ulink>, and
      uncompress. Edit the <filename>buildenv.pl</filename> file, and add a PERL5LIB
      variable to point to the <filename>lib</filename> subdirectory from the
      extracted archive. For example:
<programlisting>
$ENV{PERL5LIB}=$ENV{PERL5LIB} . ';c:\IPC-Run-0.94\lib';
</programlisting>
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
________________________________________________________-->
  <para>
   运行客户端程序的回归测试，使用<command>vcregress bincheck</command>，
   运行恢复测试，使用<command>vcregress recoverycheck</command>，
   或者指定TAP测试，使用<command>vcregress taptest</command>需要安装一个额外的Perl模块：
   <variablelist>
    <varlistentry>
     <term><productname>IPC::Run</productname></term>
     <listitem><para>
      在撰写本文时，<literal>IPC::Run</literal>未包含在ActiveState Perl安装中，
      也不在ActiveState Perl Package Manager (PPM)库中。要安装，从CPAN下载
      <filename>IPC-Run-&lt;version&gt;.tar.gz</filename>源代码压缩包，
      地址为<ulink url="https://metacpan.org/release/IPC-Run"></ulink>，然后解压缩。
      编辑<filename>buildenv.pl</filename>文件，并添加一个PERL5LIB变量指向
      从解压缩的存档中的<filename>lib</filename>子目录。例如：
<programlisting>
$ENV{PERL5LIB}=$ENV{PERL5LIB} . ';c:\IPC-Run-0.94\lib';
</programlisting>
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
<!-- pgdoc-cn_end sig_en=fdc2f5b3d3aa603edd1cae5404d3916b -->

<!-- pgdoc-cn_start sig_en=9e2c9a3b4e12a2dac76a1c0b34a435ab sig_cn_org=None source=14.1 
  <para>
   The TAP tests run with <command>vcregress</command> support the
   environment variables <varname>PROVE_TESTS</varname>, that is expanded
   automatically using the name patterns given, and
   <varname>PROVE_FLAGS</varname>. These can be set on a Windows terminal,
   before running <command>vcregress</command>:
<programlisting>
set PROVE_FLAGS=-&minus;timer -&minus;jobs 2
set PROVE_TESTS=t/020*.pl t/010*.pl
</programlisting>
   It is also possible to set up those parameters in
   <filename>buildenv.pl</filename>:
<programlisting>
$ENV{PROVE_FLAGS}='-&minus;timer -&minus;jobs 2'
$ENV{PROVE_TESTS}='t/020*.pl t/010*.pl'
</programlisting>
  </para>
________________________________________________________-->
  <para>
     用<command>vcregress</command>运行的TAP测试支持环境变量<varname>PROVE_TESTS</varname>以及<varname>PROVE_FLAGS</varname>，该变量使用给定的命名模式自动扩展。 这些可以在运行 <command>vcregress</command>命令前，
     在 Windows 终端设置好 :
  <programlisting>
  set PROVE_FLAGS=--timer --jobs 2
  set PROVE_TESTS=t/020*.pl t/010*.pl
  </programlisting>
     也可以在文件中设置这些参数
     <filename>buildenv.pl</filename>:
  <programlisting>
  $ENV{PROVE_FLAGS}='--timer --jobs 2'
  $ENV{PROVE_TESTS}='t/020*.pl t/010*.pl'
  </programlisting>
    </para>
<!-- pgdoc-cn_end sig_en=9e2c9a3b4e12a2dac76a1c0b34a435ab -->

<!-- pgdoc-cn_start sig_en=9c81e3e8895ba505001d60f494c0ccbc sig_cn_org=1d9f5cf4887e607fd8fb232031ddd477 source=15.7 
  <para>
   Some of the TAP tests depend on a set of external commands that would
   optionally trigger tests related to them. Each one of those variables
   can be set or unset in <filename>buildenv.pl</filename>:
   <variablelist>
    <varlistentry>
     <term><varname>GZIP_PROGRAM</varname></term>
     <listitem><para>
      Path to a <application>gzip</application> command. The default is
      <literal>gzip</literal>, which will search for a command by that
      name in the configured <envar>PATH</envar>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>LZ4</varname></term>
     <listitem><para>
      Path to a <application>lz4</application> command. The default is
      <literal>lz4</literal>, which will search for a command by that
      name in the configured <envar>PATH</envar>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>TAR</varname></term>
     <listitem><para>
      Path to a <application>tar</application> command. The default is
      <literal>tar</literal>, which will search for a command by that
      name in the configured <envar>PATH</envar>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>ZSTD</varname></term>
     <listitem><para>
      Path to a <application>zstd</application> command. The default is
      <literal>zstd</literal>, which will search for a command by that
      name in the configured <envar>PATH</envar>.
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
________________________________________________________-->
  <para>
   一些TAP测试依赖于一组外部命令，这些命令可以选择性地触发与它们相关的测试。这些变量中的每一个都可以在<filename>buildenv.pl</filename>中设置或取消设置：
   <variablelist>
    <varlistentry>
     <term><varname>GZIP_PROGRAM</varname></term>
     <listitem><para>
      <application>gzip</application>命令的路径。默认值是<literal>gzip</literal>，它将在配置的<envar>PATH</envar>中搜索该命令的名称。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>LZ4</varname></term>
     <listitem><para>
      <application>lz4</application>命令的路径。默认值是<literal>lz4</literal>，它将在配置的<envar>PATH</envar>中搜索该命令的名称。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>TAR</varname></term>
     <listitem><para>
      <application>tar</application>命令的路径。默认值是<literal>tar</literal>，它将在配置的<envar>PATH</envar>中搜索该命令的名称。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>ZSTD</varname></term>
     <listitem><para>
      <application>zstd</application>命令的路径。默认值是<literal>zstd</literal>，它将在配置的<envar>PATH</envar>中搜索该命令的名称。
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
<!-- pgdoc-cn_end sig_en=9c81e3e8895ba505001d60f494c0ccbc -->
 </sect2>

 </sect1>
</chapter>
