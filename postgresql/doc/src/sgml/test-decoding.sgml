<!-- doc/src/sgml/test-decoding.sgml -->

<sect1 id="test-decoding" xreflabel="test_decoding">
<!-- pgdoc-cn_start sig_en=5ef5a4d1dd32b93be84ce068d904de5e sig_cn_org=None source=14.1 
 <title>test_decoding</title>
________________________________________________________-->
 <title>test_decoding</title>
<!-- pgdoc-cn_end sig_en=5ef5a4d1dd32b93be84ce068d904de5e -->

<!-- pgdoc-cn_start sig_en=bb703ab60c648608dc107400a872899e sig_cn_org=None source=14.1 
 <indexterm zone="test-decoding">
  <primary>test_decoding</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="test-decoding">
  <primary>test_decoding</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=bb703ab60c648608dc107400a872899e -->

<!-- pgdoc-cn_start sig_en=9bfcd4c110e6861448b7f3b7cf5bc0b4 sig_cn_org=None source=14.1 
 <para>
  <filename>test_decoding</filename> is an example of a logical decoding
  output plugin. It doesn't do anything especially useful, but can serve as
  a starting point for developing your own output plugin.
 </para>
________________________________________________________-->
 <para>
  <filename>test_decoding</filename>是一个逻辑解码输出插件的例子。它其实不做
  任何特别有用的事情，但是可以作为开发你自己的输出插件的起点。
 </para>
<!-- pgdoc-cn_end sig_en=9bfcd4c110e6861448b7f3b7cf5bc0b4 -->

<!-- pgdoc-cn_start sig_en=b5f546abaf8f7ef09eba82f1482e46cf sig_cn_org=None source=14.1 
 <para>
  <filename>test_decoding</filename> receives WAL through the logical decoding
  mechanism and decodes it into text representations of the operations
  performed.
 </para>
________________________________________________________-->
 <para>
  <filename>test_decoding</filename>通过逻辑解码机制接收 WAL 并且把它解码成
  被执行的操作的文本表达形式。
 </para>
<!-- pgdoc-cn_end sig_en=b5f546abaf8f7ef09eba82f1482e46cf -->

<!-- pgdoc-cn_start sig_en=e555a79332ea81e8301722ccaff791c1 sig_cn_org=None source=14.1 
 <para>
  Typical output from this plugin, used over the SQL logical decoding
  interface, might be:

<programlisting>
postgres=# SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'include-xids', '0');
   lsn     | xid |                       data
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 0/16D30F8 | 691 | BEGIN
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:2 data[text]:'arg'
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:3 data[text]:'demo'
 0/16D32A0 | 691 | COMMIT
 0/16D32D8 | 692 | BEGIN
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:2
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:3
 0/16D3398 | 692 | COMMIT
(8 rows)
</programlisting>
 </para>
________________________________________________________-->
 <para>
  这个插件的典型输出（在 SQL 逻辑解码接口上使用）可能是：

<programlisting>
postgres=# SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'include-xids', '0');
   lsn     | xid |                       data
-----------+-----+--------------------------------------------------
 0/16D30F8 | 691 | BEGIN
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:2 data[text]:'arg'
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:3 data[text]:'demo'
 0/16D32A0 | 691 | COMMIT
 0/16D32D8 | 692 | BEGIN
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:2
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:3
 0/16D3398 | 692 | COMMIT
(8 rows)
</programlisting>
 </para>
<!-- pgdoc-cn_end sig_en=e555a79332ea81e8301722ccaff791c1 -->

<!-- pgdoc-cn_start sig_en=592b80836323cccf13db707250619ab5 sig_cn_org=053197cd04c89f4447a321b463a05354 source=15.7 
<para>
  We can also get the changes of the in-progress transaction, and the typical
  output might be:

<programlisting>
postgres[33712]=#* SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'stream-changes', '1');
    lsn    | xid |                       data
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 0/16B21F8 | 503 | opening a streamed block for transaction TXN 503
 0/16B21F8 | 503 | streaming change for TXN 503
 0/16B2300 | 503 | streaming change for TXN 503
 0/16B2408 | 503 | streaming change for TXN 503
 0/16BEBA0 | 503 | closing a streamed block for transaction TXN 503
 0/16B21F8 | 503 | opening a streamed block for transaction TXN 503
 0/16BECA8 | 503 | streaming change for TXN 503
 0/16BEDB0 | 503 | streaming change for TXN 503
 0/16BEEB8 | 503 | streaming change for TXN 503
 0/16BEBA0 | 503 | closing a streamed block for transaction TXN 503
(10 rows)
</programlisting>
 </para>
________________________________________________________-->
<para>
  我们还可以获取正在进行中的事务的更改，典型的输出可能是：

<programlisting>
postgres[33712]=#* SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'stream-changes', '1');
    lsn    | xid |                       data
-----------+-----+--------------------------------------------------
 0/16B21F8 | 503 | opening a streamed block for transaction TXN 503
 0/16B21F8 | 503 | streaming change for TXN 503
 0/16B2300 | 503 | streaming change for TXN 503
 0/16B2408 | 503 | streaming change for TXN 503
 0/16BEBA0 | 503 | closing a streamed block for transaction TXN 503
 0/16B21F8 | 503 | opening a streamed block for transaction TXN 503
 0/16BECA8 | 503 | streaming change for TXN 503
 0/16BEDB0 | 503 | streaming change for TXN 503
 0/16BEEB8 | 503 | streaming change for TXN 503
 0/16BEBA0 | 503 | closing a streamed block for transaction TXN 503
(10 rows)
</programlisting>
</para>
<!-- pgdoc-cn_end sig_en=592b80836323cccf13db707250619ab5 -->

</sect1>
