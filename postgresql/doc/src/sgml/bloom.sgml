<!-- doc/src/sgml/bloom.sgml -->

<sect1 id="bloom" xreflabel="bloom">
<!-- pgdoc-cn_start sig_en=8c35d30070f2975b2742c6a65d800c26 sig_cn_org=None source=14.1 
 <title>bloom</title>
________________________________________________________-->
 <title>bloom</title>
<!-- pgdoc-cn_end sig_en=8c35d30070f2975b2742c6a65d800c26 -->

<!-- pgdoc-cn_start sig_en=a2361afa158ce783782c270bfd68216e sig_cn_org=None source=14.1 
 <indexterm zone="bloom">
  <primary>bloom</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="bloom">
  <primary>bloom</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=a2361afa158ce783782c270bfd68216e -->

<!-- pgdoc-cn_start sig_en=12343aa372b13120b85b3c3fdad4959f sig_cn_org=None source=14.1 
 <para>
  <literal>bloom</literal> provides an index access method based on
  <ulink url="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filters</ulink>.
 </para>
________________________________________________________-->
 <para>
  <literal>bloom</literal>提供了一种基于<ulink url="https://en.wikipedia.org/wiki/Bloom_filter">布鲁姆过滤器</ulink>的索引访问方法。
 </para>
<!-- pgdoc-cn_end sig_en=12343aa372b13120b85b3c3fdad4959f -->

<!-- pgdoc-cn_start sig_en=4db9abd921a177dc4bb5e9dff9ad94a1 sig_cn_org=None source=14.1 
 <para>
  A Bloom filter is a space-efficient data structure that is used to test
  whether an element is a member of a set.  In the case of an index access
  method, it allows fast exclusion of non-matching tuples via signatures
  whose size is determined at index creation.
 </para>
________________________________________________________-->
 <para>
  布鲁姆过滤器是一种空间高效的数据结构，它被用来测试一个元素是否为一个集合的成员。在索引访问方法的情况下，它可以通过尺寸在索引创建时决定的签名来快速地排除不匹配的元组。
 </para>
<!-- pgdoc-cn_end sig_en=4db9abd921a177dc4bb5e9dff9ad94a1 -->

<!-- pgdoc-cn_start sig_en=8bce8fef7204da7892f3e84ec3b6e307 sig_cn_org=None source=14.1 
 <para>
  A signature is a lossy representation of the indexed attribute(s), and as
  such is prone to reporting false positives; that is, it may be reported
  that an element is in the set, when it is not.  So index search results
  must always be rechecked using the actual attribute values from the heap
  entry.  Larger signatures reduce the odds of a false positive and thus
  reduce the number of useless heap visits, but of course also make the index
  larger and hence slower to scan.
 </para>
________________________________________________________-->
 <para>
  签名是被索引属性的一种有损表达，并且因此容易报告伪肯定，也就是说对于一个不在集合中的元素有可能报告该元素在集合中。因此索引搜索结果必须使用来自堆项的实际属性值进行再次检查。较大的签名可以降低伪肯定的几率并且减少无用的堆访问的次数，但是这显然会让索引更大且扫描起来更慢。
 </para>
<!-- pgdoc-cn_end sig_en=8bce8fef7204da7892f3e84ec3b6e307 -->

<!-- pgdoc-cn_start sig_en=379155deefe7517da001b0ca6d5ae46a sig_cn_org=None source=14.1 
 <para>
  This type of index is most useful when a table has many attributes and
  queries test arbitrary combinations of them.  A traditional btree index is
  faster than a bloom index, but it can require many btree indexes to support
  all possible queries where one needs only a single bloom index.  Note
  however that bloom indexes only support equality queries, whereas btree
  indexes can also perform inequality and range searches.
 </para>
________________________________________________________-->
 <para>
  当表具有很多属性并且查询可能会测试其中任意组合时，这种类型的索引最有用。传统的 btree 索引比布鲁姆索引更快，但是需要很多 btree 索引来支持所有可能的查询，而对于布鲁姆索引来说只需要一个即可。不过要注意 bloom 索引只支持等值查询，而 btree 索引还能执行不等和范围搜索。
 </para>
<!-- pgdoc-cn_end sig_en=379155deefe7517da001b0ca6d5ae46a -->

 <sect2>
<!-- pgdoc-cn_start sig_en=55f21f3bddee6a8d223aa24ab57d80dc sig_cn_org=None source=14.1 
  <title>Parameters</title>
________________________________________________________-->
  <title>参数</title>
<!-- pgdoc-cn_end sig_en=55f21f3bddee6a8d223aa24ab57d80dc -->

<!-- pgdoc-cn_start sig_en=d57f01b59ec485047abf7260ca7de49a sig_cn_org=None source=14.1 
  <para>
   A <literal>bloom</literal> index accepts the following parameters in its
   <literal>WITH</literal> clause:
  </para>
________________________________________________________-->
  <para>
   <literal>bloom</literal>索引在其<literal>WITH</literal>子句中接受下列参数：
  </para>
<!-- pgdoc-cn_end sig_en=d57f01b59ec485047abf7260ca7de49a -->

   <variablelist>
   <varlistentry>
    <term><literal>length</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=717c14e267900dff9c07ec6ef972adb4 sig_cn_org=None source=14.1 
     <para>
      Length of each signature (index entry) in bits. It is rounded up to the
      nearest multiple of <literal>16</literal>. The default is
      <literal>80</literal> bits and the maximum is <literal>4096</literal>.
     </para>
________________________________________________________-->
     <para>
      每个签名（索引项）的长度位数，它会被圆整成为最近的<literal>16</literal>的倍数。默认是<literal>80</literal>位，最长是<literal>4096</literal>位。
     </para>
<!-- pgdoc-cn_end sig_en=717c14e267900dff9c07ec6ef972adb4 -->
    </listitem>
   </varlistentry>
   </variablelist>
   <variablelist>
   <varlistentry>
    <term><literal>col1 &mdash; col32</literal></term>
    <listitem>
<!-- pgdoc-cn_start sig_en=85f86c039fce8ff4871a8d45c15d898f sig_cn_org=None source=14.1 
     <para>
      Number of bits generated for each index column. Each parameter's name
      refers to the number of the index column that it controls.  The default
      is <literal>2</literal> bits and the maximum is <literal>4095</literal>.
      Parameters for index columns not actually used are ignored.
     </para>
________________________________________________________-->
     <para>
      从每一个索引列产生的位数。每个参数的名字表示它所控制的索引列的编号。默认是<literal>2</literal>位，最大是<literal>4095</literal>位。没有实际使用的索引列的参数会被忽略。
     </para>
<!-- pgdoc-cn_end sig_en=85f86c039fce8ff4871a8d45c15d898f -->
    </listitem>
   </varlistentry>
   </variablelist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d sig_cn_org=None source=14.1 
  <title>Examples</title>
________________________________________________________-->
  <title>例子</title>
<!-- pgdoc-cn_end sig_en=8f24ed0a9e4d47ffa2be9a1f3e09fa6d -->

<!-- pgdoc-cn_start sig_en=7658667ea9973c09ff08b471373b8b1c sig_cn_org=None source=14.1 
  <para>
   This is an example of creating a bloom index:
  </para>
________________________________________________________-->
  <para>
   这是一个创建布鲁姆索引的例子：
  </para>
<!-- pgdoc-cn_end sig_en=7658667ea9973c09ff08b471373b8b1c -->

<!-- pgdoc-cn_start sig_en=2b55d32df3c276cc31de27fbab529714 sig_cn_org=None source=14.1 
<programlisting>
CREATE INDEX bloomidx ON tbloom USING bloom (i1,i2,i3)
       WITH (length=80, col1=2, col2=2, col3=4);
</programlisting>
________________________________________________________-->
<programlisting>
CREATE INDEX bloomidx ON tbloom USING bloom (i1,i2,i3)
       WITH (length=80, col1=2, col2=2, col3=4);
</programlisting>
<!-- pgdoc-cn_end sig_en=2b55d32df3c276cc31de27fbab529714 -->

<!-- pgdoc-cn_start sig_en=7cb8f005cf59f23453b44c31cad0e73f sig_cn_org=None source=14.1 
  <para>
   The index is created with a signature length of 80 bits, with attributes
   i1 and i2 mapped to 2 bits, and attribute i3 mapped to 4 bits.  We could
   have omitted the <literal>length</literal>, <literal>col1</literal>,
   and <literal>col2</literal> specifications since those have the default values.
  </para>
________________________________________________________-->
  <para>
   该索引是用长度为 80 位的签名所创建，其中属性 i1 和 i2 被映射为 2 位，属性 i3 被映射为 4 位。我们可以省略<literal>length</literal>、<literal>col1</literal>和<literal>col2</literal>说明，因为它们都有默认值。
  </para>
<!-- pgdoc-cn_end sig_en=7cb8f005cf59f23453b44c31cad0e73f -->

<!-- pgdoc-cn_start sig_en=dccdd4fc2778fec3ae6a414b064789be sig_cn_org=None source=14.1 
  <para>
   Here is a more complete example of bloom index definition and usage, as
   well as a comparison with equivalent btree indexes.  The bloom index is
   considerably smaller than the btree index, and can perform better.
  </para>
________________________________________________________-->
  <para>
   这里是布鲁姆索引定义和使用的更完整的例子，其中还与等效的 btree 做了对比。布鲁姆索引比 btree 索引更小，并且效率更高。
  </para>
<!-- pgdoc-cn_end sig_en=dccdd4fc2778fec3ae6a414b064789be -->

<!-- pgdoc-cn_start sig_en=93698cf0f8e86e012611a56453ee3c1c sig_cn_org=None source=14.1 
<programlisting>
=# CREATE TABLE tbloom AS
   SELECT
     (random() * 1000000)::int as i1,
     (random() * 1000000)::int as i2,
     (random() * 1000000)::int as i3,
     (random() * 1000000)::int as i4,
     (random() * 1000000)::int as i5,
     (random() * 1000000)::int as i6
   FROM
  generate_series(1,10000000);
SELECT 10000000
</programlisting>
________________________________________________________-->
<programlisting>
=# CREATE TABLE tbloom AS
   SELECT
     (random() * 1000000)::int as i1,
     (random() * 1000000)::int as i2,
     (random() * 1000000)::int as i3,
     (random() * 1000000)::int as i4,
     (random() * 1000000)::int as i5,
     (random() * 1000000)::int as i6
   FROM
  generate_series(1,10000000);
SELECT 10000000
</programlisting>
<!-- pgdoc-cn_end sig_en=93698cf0f8e86e012611a56453ee3c1c -->

<!-- pgdoc-cn_start sig_en=2870d20e6be8551b8b07998a326b5f4a sig_cn_org=630ecb8f07a622c7b2c5d19654a57631 source=15.7 
  <para>
   A sequential scan over this large table takes a long time:
<programlisting>
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                              QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 Seq Scan on tbloom  (cost=0.00..2137.14 rows=3 width=24) (actual time=16.971..16.971 rows=0 loops=1)
   Filter: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Filter: 100000
 Planning Time: 0.346 ms
 Execution Time: 16.988 ms
(5 rows)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   对这个大表进行顺序扫描需要很长时间:
<programlisting>
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                              QUERY PLAN
-------------------------------------------------------------------&zwsp;-----------------------------------
 Seq Scan on tbloom  (cost=0.00..2137.14 rows=3 width=24) (actual time=16.971..16.971 rows=0 loops=1)
   Filter: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Filter: 100000
 Planning Time: 0.346 ms
 Execution Time: 16.988 ms
(5 rows)
</programlisting>
</para>
<!-- pgdoc-cn_end sig_en=2870d20e6be8551b8b07998a326b5f4a -->

<!-- pgdoc-cn_start sig_en=c4d1e8a2e2275c68e2a11074f6514e9e sig_cn_org=27567d6d432ab9e6af83f2c50c0372eb source=15.7 
  <para>
   Even with the btree index defined the result will still be a
   sequential scan:
<programlisting>
=# CREATE INDEX btreeidx ON tbloom (i1, i2, i3, i4, i5, i6);
CREATE INDEX
=# SELECT pg_size_pretty(pg_relation_size('btreeidx'));
 pg_size_pretty
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 3976 kB
(1 row)
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                              QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 Seq Scan on tbloom  (cost=0.00..2137.00 rows=2 width=24) (actual time=12.805..12.805 rows=0 loops=1)
   Filter: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Filter: 100000
 Planning Time: 0.138 ms
 Execution Time: 12.817 ms
(5 rows)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   即使定义了btree索引，结果仍然会是一个顺序扫描:
<programlisting>
=# CREATE INDEX btreeidx ON tbloom (i1, i2, i3, i4, i5, i6);
CREATE INDEX
=# SELECT pg_size_pretty(pg_relation_size('btreeidx'));
 pg_size_pretty
----------------
 3976 kB
(1 row)
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                              QUERY PLAN
-------------------------------------------------------------------&zwsp;-----------------------------------
 Seq Scan on tbloom  (cost=0.00..2137.00 rows=2 width=24) (actual time=12.805..12.805 rows=0 loops=1)
   Filter: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Filter: 100000
 Planning Time: 0.138 ms
 Execution Time: 12.817 ms
(5 rows)
</programlisting>
</para>
<!-- pgdoc-cn_end sig_en=c4d1e8a2e2275c68e2a11074f6514e9e -->

<!-- pgdoc-cn_start sig_en=bd7239a5d17dc4d45f5a003edb4d2927 sig_cn_org=b22561807f34cd63e48413ce16d74378 source=15.7 
  <para>
   Having the bloom index defined on the table is better than btree in
   handling this type of search:
<programlisting>
=# CREATE INDEX bloomidx ON tbloom USING bloom (i1, i2, i3, i4, i5, i6);
CREATE INDEX
=# SELECT pg_size_pretty(pg_relation_size('bloomidx'));
 pg_size_pretty
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 1584 kB
(1 row)
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                                     QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 Bitmap Heap Scan on tbloom  (cost=1792.00..1799.69 rows=2 width=24) (actual time=0.388..0.388 rows=0 loops=1)
   Recheck Cond: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Index Recheck: 29
   Heap Blocks: exact=28
   -&gt;  Bitmap Index Scan on bloomidx  (cost=0.00..1792.00 rows=2 width=0) (actual time=0.356..0.356 rows=29 loops=1)
         Index Cond: ((i2 = 898732) AND (i5 = 123451))
 Planning Time: 0.099 ms
 Execution Time: 0.408 ms
(8 rows)
</programlisting>
  </para>
________________________________________________________-->
  <para>
   在表上定义了bloom索引比btree更好地处理这种类型的搜索:
<programlisting>
=# CREATE INDEX bloomidx ON tbloom USING bloom (i1, i2, i3, i4, i5, i6);
CREATE INDEX
=# SELECT pg_size_pretty(pg_relation_size('bloomidx'));
 pg_size_pretty
----------------
 1584 kB
(1 row)
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                                     QUERY PLAN
-------------------------------------------------------------------&zwsp;--------------------------------------------------
 Bitmap Heap Scan on tbloom  (cost=1792.00..1799.69 rows=2 width=24) (actual time=0.388..0.388 rows=0 loops=1)
   Recheck Cond: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Index Recheck: 29
   Heap Blocks: exact=28
   -&gt;  Bitmap Index Scan on bloomidx  (cost=0.00..1792.00 rows=2 width=0) (actual time=0.356..0.356 rows=29 loops=1)
         Index Cond: ((i2 = 898732) AND (i5 = 123451))
 Planning Time: 0.099 ms
 Execution Time: 0.408 ms
(8 rows)
</programlisting>
</para>
<!-- pgdoc-cn_end sig_en=bd7239a5d17dc4d45f5a003edb4d2927 -->

<!-- pgdoc-cn_start sig_en=119b4f13183b4ff8e68c10c15d83f1f3 sig_cn_org=edf09e7399596d4a817ec5af2a6df1c6 source=15.7 
  <para>
   Now, the main problem with the btree search is that btree is inefficient
   when the search conditions do not constrain the leading index column(s).
   A better strategy for btree is to create a separate index on each column.
   Then the planner will choose something like this:
<programlisting>
=# CREATE INDEX btreeidx1 ON tbloom (i1);
CREATE INDEX
=# CREATE INDEX btreeidx2 ON tbloom (i2);
CREATE INDEX
=# CREATE INDEX btreeidx3 ON tbloom (i3);
CREATE INDEX
=# CREATE INDEX btreeidx4 ON tbloom (i4);
CREATE INDEX
=# CREATE INDEX btreeidx5 ON tbloom (i5);
CREATE INDEX
=# CREATE INDEX btreeidx6 ON tbloom (i6);
CREATE INDEX
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                                        QUERY PLAN
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&zwsp;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 Bitmap Heap Scan on tbloom  (cost=24.34..32.03 rows=2 width=24) (actual time=0.028..0.029 rows=0 loops=1)
   Recheck Cond: ((i5 = 123451) AND (i2 = 898732))
   -&gt;  BitmapAnd  (cost=24.34..24.34 rows=2 width=0) (actual time=0.027..0.027 rows=0 loops=1)
         -&gt;  Bitmap Index Scan on btreeidx5  (cost=0.00..12.04 rows=500 width=0) (actual time=0.026..0.026 rows=0 loops=1)
               Index Cond: (i5 = 123451)
         -&gt;  Bitmap Index Scan on btreeidx2  (cost=0.00..12.04 rows=500 width=0) (never executed)
               Index Cond: (i2 = 898732)
 Planning Time: 0.491 ms
 Execution Time: 0.055 ms
(9 rows)
</programlisting>
   Although this query runs much faster than with either of the single
   indexes, we pay a penalty in index size.  Each of the single-column
   btree indexes occupies 2 MB, so the total space needed is 12 MB,
   eight times the space used by the bloom index.
  </para>
________________________________________________________-->
  <para>
   现在，btree搜索的主要问题是，当搜索条件不限制主导索引列时，btree是低效的。
   对于btree的更好策略是在每一列上创建单独的索引。
   然后规划器将选择类似这样的内容：
<programlisting>
=# CREATE INDEX btreeidx1 ON tbloom (i1);
CREATE INDEX
=# CREATE INDEX btreeidx2 ON tbloom (i2);
CREATE INDEX
=# CREATE INDEX btreeidx3 ON tbloom (i3);
CREATE INDEX
=# CREATE INDEX btreeidx4 ON tbloom (i4);
CREATE INDEX
=# CREATE INDEX btreeidx5 ON tbloom (i5);
CREATE INDEX
=# CREATE INDEX btreeidx6 ON tbloom (i6);
CREATE INDEX
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                                        QUERY PLAN
-------------------------------------------------------------------&zwsp;--------------------------------------------------------
 Bitmap Heap Scan on tbloom  (cost=24.34..32.03 rows=2 width=24) (actual time=0.028..0.029 rows=0 loops=1)
   Recheck Cond: ((i5 = 123451) AND (i2 = 898732))
   -&gt;  BitmapAnd  (cost=24.34..24.34 rows=2 width=0) (actual time=0.027..0.027 rows=0 loops=1)
         -&gt;  Bitmap Index Scan on btreeidx5  (cost=0.00..12.04 rows=500 width=0) (actual time=0.026..0.026 rows=0 loops=1)
               Index Cond: (i5 = 123451)
         -&gt;  Bitmap Index Scan on btreeidx2  (cost=0.00..12.04 rows=500 width=0) (never executed)
               Index Cond: (i2 = 898732)
 Planning Time: 0.491 ms
 Execution Time: 0.055 ms
(9 rows)
</programlisting>
   尽管这个查询比任何单个索引运行得更快，但我们在索引大小上付出了代价。
   每个单列btree索引占用2 MB，因此总空间需求为12 MB，
   是bloom索引使用空间的8倍。
</para>
<!-- pgdoc-cn_end sig_en=119b4f13183b4ff8e68c10c15d83f1f3 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=eacffd602605d47d55fc7f381524146d sig_cn_org=None source=14.1 
  <title>Operator Class Interface</title>
________________________________________________________-->
  <title>操作符类接口</title>
<!-- pgdoc-cn_end sig_en=eacffd602605d47d55fc7f381524146d -->

<!-- pgdoc-cn_start sig_en=3788d4039cfe0e164018a53f077975d6 sig_cn_org=None source=14.1 
  <para>
   An operator class for bloom indexes requires only a hash function for the
   indexed data type and an equality operator for searching. This example
   shows the operator class definition for the <type>text</type> data type:
  </para>
________________________________________________________-->
  <para>
   用于布鲁姆索引的操作符类只要一个用于被索引数据类型的哈希函数以及一个用于搜索的等值操作符。这个例子展示了用于<type>text</type>数据类型的操作符类定义：
  </para>
<!-- pgdoc-cn_end sig_en=3788d4039cfe0e164018a53f077975d6 -->

<!-- pgdoc-cn_start sig_en=e18cf103192b3be02d9723cc80901dac sig_cn_org=None source=14.1 
<programlisting>
CREATE OPERATOR CLASS text_ops
DEFAULT FOR TYPE text USING bloom AS
    OPERATOR    1   =(text, text),
    FUNCTION    1   hashtext(text);
</programlisting>
________________________________________________________-->
<programlisting>
CREATE OPERATOR CLASS text_ops
DEFAULT FOR TYPE text USING bloom AS
    OPERATOR    1   =(text, text),
    FUNCTION    1   hashtext(text);
</programlisting>
<!-- pgdoc-cn_end sig_en=e18cf103192b3be02d9723cc80901dac -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=6f5b22a932265c21e464df6dcbb347ec sig_cn_org=None source=14.1 
  <title>Limitations</title>
________________________________________________________-->
  <title>限制</title>
<!-- pgdoc-cn_end sig_en=6f5b22a932265c21e464df6dcbb347ec -->
<!-- pgdoc-cn_start sig_en=74509d9d2ac933acaea10fb91fe6dfd9 sig_cn_org=None source=14.1 
  <para>
   <itemizedlist>
    <listitem>
     <para>
      Only operator classes for <type>int4</type> and <type>text</type> are
      included with the module.
     </para>
    </listitem>

    <listitem>
     <para>
      Only the <literal>=</literal> operator is supported for search.  But
      it is possible to add support for arrays with union and intersection
      operations in the future.
     </para>
    </listitem>

    <listitem>
     <para>
       <literal>bloom</literal> access method doesn't support
       <literal>UNIQUE</literal> indexes.
     </para>
    </listitem>

    <listitem>
     <para>
       <literal>bloom</literal> access method doesn't support searching for
       <literal>NULL</literal> values.
     </para>
    </listitem>
   </itemizedlist>
  </para>
________________________________________________________-->
  <para>
   <itemizedlist>
    <listitem>
     <para>
      在模块中只包括了用于<type>int4</type>以及<type>text</type>的操作符类。
     </para>
    </listitem>

    <listitem>
     <para>
      搜索只支持<literal>=</literal>操作符。但是未来可以为带合并和交集操作的数组增加支持。
     </para>
    </listitem>

    <listitem>
     <para>
       <literal>bloom</literal>访问方法不支持<literal>UNIQUE</literal>索引。
     </para>
    </listitem>

    <listitem>
     <para>
       <literal>bloom</literal>访问方法不支持对<literal>NULL</literal>值的搜索。
     </para>
    </listitem>
   </itemizedlist>
  </para>
<!-- pgdoc-cn_end sig_en=74509d9d2ac933acaea10fb91fe6dfd9 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=c9d18a21a6b8c7d5325e8feeb56b7420 sig_cn_org=None source=14.1 
  <title>Authors</title>
________________________________________________________-->
  <title>作者</title>
<!-- pgdoc-cn_end sig_en=c9d18a21a6b8c7d5325e8feeb56b7420 -->

<!-- pgdoc-cn_start sig_en=78b06032173c660af3cc48a8b4483a28 sig_cn_org=None source=14.1 
  <para>
   Teodor Sigaev <email>teodor@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>
________________________________________________________-->
  <para>
   Teodor Sigaev <email>teodor@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>
<!-- pgdoc-cn_end sig_en=78b06032173c660af3cc48a8b4483a28 -->

<!-- pgdoc-cn_start sig_en=7bc257ca4fe492b94373fc02f8f601d3 sig_cn_org=None source=14.1 
  <para>
   Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>
________________________________________________________-->
  <para>
   Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>
<!-- pgdoc-cn_end sig_en=7bc257ca4fe492b94373fc02f8f601d3 -->

<!-- pgdoc-cn_start sig_en=8b61d401cec771febd33c91d76288a99 sig_cn_org=None source=14.1 
  <para>
   Oleg Bartunov <email>obartunov@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>
________________________________________________________-->
  <para>
   Oleg Bartunov <email>obartunov@postgrespro.ru</email>,
   Postgres Professional, Moscow, Russia
  </para>
<!-- pgdoc-cn_end sig_en=8b61d401cec771febd33c91d76288a99 -->
 </sect2>

</sect1>
