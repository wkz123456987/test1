<!-- doc/src/sgml/lo.sgml -->

<sect1 id="lo" xreflabel="lo">
<!-- pgdoc-cn_start sig_en=cbd5b7ab7f1eb2e529a2988ff4daedf5 sig_cn_org=None source=14.1 
 <title>lo</title>
________________________________________________________-->
 <title>lo</title>
<!-- pgdoc-cn_end sig_en=cbd5b7ab7f1eb2e529a2988ff4daedf5 -->

<!-- pgdoc-cn_start sig_en=be76988b7e6c72051b67ee90b286f1ab sig_cn_org=None source=14.1 
 <indexterm zone="lo">
  <primary>lo</primary>
 </indexterm>
________________________________________________________-->
 <indexterm zone="lo">
  <primary>lo</primary>
 </indexterm>
<!-- pgdoc-cn_end sig_en=be76988b7e6c72051b67ee90b286f1ab -->

<!-- pgdoc-cn_start sig_en=8929f3fcf8683da44bc2ca5e7908fe6e sig_cn_org=None source=14.1 
 <para>
  The <filename>lo</filename> module provides support for managing Large Objects
  (also called LOs or BLOBs).  This includes a data type <type>lo</type>
  and a trigger <function>lo_manage</function>.
 </para>
________________________________________________________-->
 <para>
  <filename>lo</filename>模块提供管理大对象（也被称为 LO 或 BLOB）的支持。这包括一种数据类型<type>lo</type>以及一个触发器<function>lo_manage</function>。
 </para>
<!-- pgdoc-cn_end sig_en=8929f3fcf8683da44bc2ca5e7908fe6e -->

<!-- pgdoc-cn_start sig_en=73fd7076637bb21a0cce44734412cba6 sig_cn_org=None source=14.1 
 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>
________________________________________________________-->
 <para>
  这个模块被视为<quote>trusted</quote>，也就是说，它能够由当前数据库中具有<literal>CREATE</literal>特权的非超级用户来安装。
 </para>
<!-- pgdoc-cn_end sig_en=73fd7076637bb21a0cce44734412cba6 -->

 <sect2>
<!-- pgdoc-cn_start sig_en=eea3d2535fea830670be7670fd0fd80c sig_cn_org=None source=14.1 
  <title>Rationale</title>
________________________________________________________-->
  <title>原理</title>
<!-- pgdoc-cn_end sig_en=eea3d2535fea830670be7670fd0fd80c -->

<!-- pgdoc-cn_start sig_en=bdd8442f9d1200e7ddf6d8b8e7ac9b9f sig_cn_org=None source=14.1 
  <para>
   One of the problems with the JDBC driver (and this affects the ODBC driver
   also), is that the specification assumes that references to BLOBs (Binary
   Large OBjects) are stored within a table, and if that entry is changed, the
   associated BLOB is deleted from the database.
  </para>
________________________________________________________-->
  <para>
   JDBC 驱动的问题之一（并且这也影响 ODBC 驱动）是其说明书假定对 BLOB（二进制大对象）的引用被存储在一个表中，并且如果该项被改变相关的 BLOB 会被从数据库删除。
  </para>
<!-- pgdoc-cn_end sig_en=bdd8442f9d1200e7ddf6d8b8e7ac9b9f -->

<!-- pgdoc-cn_start sig_en=a181cca17f63df285340daac5c41fc6f sig_cn_org=None source=14.1 
  <para>
   As <productname>PostgreSQL</productname> stands, this doesn't occur.  Large objects
   are treated as objects in their own right; a table entry can reference a
   large object by OID, but there can be multiple table entries referencing
   the same large object OID, so the system doesn't delete the large object
   just because you change or remove one such entry.
  </para>
________________________________________________________-->
  <para>
   但对于<productname>PostgreSQL</productname>来说这并不会发生。大对象被当做自主的对象，一个表项可以通过 OID 引用一个大对象，但是可以有多个表项引用同一个大对象 OID，因此系统不会因为你改变或者删除这种项而删除大对象。
  </para>
<!-- pgdoc-cn_end sig_en=a181cca17f63df285340daac5c41fc6f -->

<!-- pgdoc-cn_start sig_en=bcdd1d589eec1fd85f1331c8e7115229 sig_cn_org=None source=14.1 
  <para>
   Now this is fine for <productname>PostgreSQL</productname>-specific applications, but
   standard code using JDBC or ODBC won't delete the objects, resulting in
   orphan objects &mdash; objects that are not referenced by anything, and
   simply occupy disk space.
  </para>
________________________________________________________-->
  <para>
   现在这对<productname>PostgreSQL</productname>-相关的应用挺好的，但是使用 JDBC 或 ODBC 的标准代码不会删除那些对象，从而导致孤立对象 &mdash; 不被任何东西引用的对象，而且会占据磁盘空间。
  </para>
<!-- pgdoc-cn_end sig_en=bcdd1d589eec1fd85f1331c8e7115229 -->

<!-- pgdoc-cn_start sig_en=1825951c2da87c89e64bb3153df5708f sig_cn_org=None source=14.1 
  <para>
   The <filename>lo</filename> module allows fixing this by attaching a trigger
   to tables that contain LO reference columns.  The trigger essentially just
   does a <function>lo_unlink</function> whenever you delete or modify a value
   referencing a large object.  When you use this trigger, you are assuming
   that there is only one database reference to any large object that is
   referenced in a trigger-controlled column!
  </para>
________________________________________________________-->
  <para>
   <filename>lo</filename>允许通过附加一个触发器到包含 LO 引用列的表来修复这种问题。该触发器本质上只是在你删除或修改一个引用大对象的值时做<function>lo_unlink</function>。当你使用这个触发器时，你必须假定在一个触发器控制的列中只有一个对任意大对象的数据库引用！
  </para>
<!-- pgdoc-cn_end sig_en=1825951c2da87c89e64bb3153df5708f -->

<!-- pgdoc-cn_start sig_en=641574ded35bb5f745f8fc0b26c664c4 sig_cn_org=e37a409086886b5973fb577c20369283 source=15.7 
  <para>
   The module also provides a data type <type>lo</type>, which is really just
   a <glossterm linkend="glossary-domain">domain</glossterm> over
   the <type>oid</type> type.  This is useful for differentiating
   database columns that hold large object references from those that are
   OIDs of other things.  You don't have to use the <type>lo</type> type to
   use the trigger, but it may be convenient to use it to keep track of which
   columns in your database represent large objects that you are managing with
   the trigger.  It is also rumored that the ODBC driver gets confused if you
   don't use <type>lo</type> for BLOB columns.
  </para>
________________________________________________________-->
  <para>
   该模块还提供了一个数据类型<type>lo</type>，实际上只是<type>oid</type>类型上的一个
   <glossterm linkend="glossary-domain">域</glossterm>。
   这对于区分保存大对象引用的数据库列和其他OID的列非常有用。您不必使用<type>lo</type>类型来使用触发器，
   但使用它来跟踪数据库中表示您正在使用触发器管理的大对象的列可能很方便。也有传言称，如果您不对BLOB列使用
   <type>lo</type>，ODBC驱动程序会感到困惑。
</para>
<!-- pgdoc-cn_end sig_en=641574ded35bb5f745f8fc0b26c664c4 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=eda561003dc4bce7d1e84f72bf8f9f00 sig_cn_org=None source=14.1 
  <title>How to Use It</title>
________________________________________________________-->
  <title>如何使用它</title>
<!-- pgdoc-cn_end sig_en=eda561003dc4bce7d1e84f72bf8f9f00 -->

<!-- pgdoc-cn_start sig_en=079d41de7c92a6390efc1489c160a314 sig_cn_org=None source=14.1 
  <para>
   Here's a simple example of usage:
  </para>
________________________________________________________-->
  <para>
   这里是一个简单的用法示例：
  </para>
<!-- pgdoc-cn_end sig_en=079d41de7c92a6390efc1489c160a314 -->

<!-- pgdoc-cn_start sig_en=8178536a5584034c99880da6f6dd9d62 sig_cn_org=None source=14.1 
<programlisting>
CREATE TABLE image (title text, raster lo);

CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
    FOR EACH ROW EXECUTE FUNCTION lo_manage(raster);
</programlisting>
________________________________________________________-->
<programlisting>
CREATE TABLE image (title text, raster lo);

CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
    FOR EACH ROW EXECUTE FUNCTION lo_manage(raster);
</programlisting>
<!-- pgdoc-cn_end sig_en=8178536a5584034c99880da6f6dd9d62 -->

<!-- pgdoc-cn_start sig_en=02f24fdbac9ac160989aa7eaa8a77394 sig_cn_org=None source=14.1 
  <para>
   For each column that will contain unique references to large objects,
   create a <literal>BEFORE UPDATE OR DELETE</literal> trigger, and give the column
   name as the sole trigger argument.  You can also restrict the trigger
   to only execute on updates to the column by using <literal>BEFORE UPDATE
   OF</literal> <replaceable class="parameter">column_name</replaceable>.
   If you need multiple <type>lo</type>
   columns in the same table, create a separate trigger for each one,
   remembering to give a different name to each trigger on the same table.
  </para>
________________________________________________________-->
  <para>
   对每一个将包含到大对象唯一引用的列，创建一个<literal>BEFORE UPDATE OR DELETE</literal>触发器，并且将该列名作为唯一的触发器参数。你也可以用<literal>BEFORE UPDATE OF</literal> <replaceable class="parameter">column_name</replaceable>来限制该触发器只对该列上的更新事件执行。如果你需要在同一个表中有多个<type>lo</type>列，为每一个创建一个独立的触发器，记住为同一个表上的每个触发器指定一个不同的名称。
  </para>
<!-- pgdoc-cn_end sig_en=02f24fdbac9ac160989aa7eaa8a77394 -->
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=6f5b22a932265c21e464df6dcbb347ec sig_cn_org=None source=14.1 
  <title>Limitations</title>
________________________________________________________-->
  <title>限制</title>
<!-- pgdoc-cn_end sig_en=6f5b22a932265c21e464df6dcbb347ec -->

  <itemizedlist>
   <listitem>
<!-- pgdoc-cn_start sig_en=efdbe4f97dc3036c12c0db715e0cbbe3 sig_cn_org=None source=14.1 
    <para>
     Dropping a table will still orphan any objects it contains, as the trigger
     is not executed.  You can avoid this by preceding the <command>DROP
     TABLE</command> with <command>DELETE FROM <replaceable>table</replaceable></command>.
    </para>
________________________________________________________-->
    <para>
     删除一个表仍将让它包含的任何对象变成孤立的，因为触发器在这种情况下不会被执行。你可以在<command>DROP TABLE</command>之前放上<command>DELETE FROM <replaceable>table</replaceable></command>来避免这种问题。
    </para>
<!-- pgdoc-cn_end sig_en=efdbe4f97dc3036c12c0db715e0cbbe3 -->

<!-- pgdoc-cn_start sig_en=9980d6d41ae2da8d59b79611a145964d sig_cn_org=None source=14.1 
    <para>
     <command>TRUNCATE</command> has the same hazard.
    </para>
________________________________________________________-->
    <para>
     <command>TRUNCATE</command>有同样的危害。
    </para>
<!-- pgdoc-cn_end sig_en=9980d6d41ae2da8d59b79611a145964d -->

<!-- pgdoc-cn_start sig_en=824c85570be9d2cdcc67cc36c3c7e83e sig_cn_org=None source=14.1 
    <para>
     If you already have, or suspect you have, orphaned large objects, see the
     <xref linkend="vacuumlo"/> module to help
     you clean them up.  It's a good idea to run <application>vacuumlo</application>
     occasionally as a back-stop to the <function>lo_manage</function> trigger.
    </para>
________________________________________________________-->
    <para>
     如果你已经有或者怀疑有孤立的大对象，参考<xref linkend="vacuumlo"/>模块可以帮助你清理它们。偶尔运行<application>vacuumlo</application>作为<function>lo_manage</function>触发器的后备是个好主意。
    </para>
<!-- pgdoc-cn_end sig_en=824c85570be9d2cdcc67cc36c3c7e83e -->
   </listitem>

   <listitem>
<!-- pgdoc-cn_start sig_en=df50eb0b83b0c6f1059975709e4f7be5 sig_cn_org=None source=14.1 
    <para>
     Some frontends may create their own tables, and will not create the
     associated trigger(s).  Also, users may not remember (or know) to create
     the triggers.
    </para>
________________________________________________________-->
    <para>
     有些前端可能会创建它们自己的表，并且将不会创建相关的触发器。另外，用户可能不会记得（或知道）要创建触发器。
    </para>
<!-- pgdoc-cn_end sig_en=df50eb0b83b0c6f1059975709e4f7be5 -->
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
<!-- pgdoc-cn_start sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc sig_cn_org=None source=14.1 
  <title>Author</title>
________________________________________________________-->
  <title>作者</title>
<!-- pgdoc-cn_end sig_en=4cfae8ddf9b6dcc33177b633e0f1dcfc -->

<!-- pgdoc-cn_start sig_en=556566e7f7dc1b30175d43b3f0483ebd sig_cn_org=None source=14.1 
  <para>
   Peter Mount <email>peter@retep.org.uk</email>
  </para>
________________________________________________________-->
  <para>
   Peter Mount <email>peter@retep.org.uk</email>
  </para>
<!-- pgdoc-cn_end sig_en=556566e7f7dc1b30175d43b3f0483ebd -->
 </sect2>

</sect1>
